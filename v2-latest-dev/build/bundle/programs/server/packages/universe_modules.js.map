{"version":3,"sources":["meteor://ðŸ’»app/packages/universe_modules/packages/universe_modules.js"],"names":[],"mappingsfile":"/packages/universe_modules.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/universe:modules/require-polyfill.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire = Npm.require;                                                                                                 // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/universe:modules/vendor/system-polyfills.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * SystemJS Polyfills for URL and Promise providing IE8+ Support                                                       // 2\n */                                                                                                                    // 3\n// from https://gist.github.com/Yaffle/1088850                                                                         // 4\n(function(global) {                                                                                                    // 5\n    function URLPolyfill(url, baseURL) {                                                                               // 6\n        if (typeof url != 'string')                                                                                    // 7\n            throw new TypeError('URL must be a string');                                                               // 8\n        var m = String(url).replace(/^\\s+|\\s+$/g, \"\").match(/^([^:\\/?#]+:)?(?:\\/\\/(?:([^:@\\/?#]*)(?::([^:@\\/?#]*))?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\n        if (!m) {                                                                                                      // 10\n            throw new RangeError();                                                                                    // 11\n        }                                                                                                              // 12\n        var protocol = m[1] || \"\";                                                                                     // 13\n        var username = m[2] || \"\";                                                                                     // 14\n        var password = m[3] || \"\";                                                                                     // 15\n        var host = m[4] || \"\";                                                                                         // 16\n        var hostname = m[5] || \"\";                                                                                     // 17\n        var port = m[6] || \"\";                                                                                         // 18\n        var pathname = m[7] || \"\";                                                                                     // 19\n        var search = m[8] || \"\";                                                                                       // 20\n        var hash = m[9] || \"\";                                                                                         // 21\n        if (baseURL !== undefined) {                                                                                   // 22\n            var base = baseURL instanceof URLPolyfill ? baseURL : new URLPolyfill(baseURL);                            // 23\n            var flag = protocol === \"\" && host === \"\" && username === \"\";                                              // 24\n            if (flag && pathname === \"\" && search === \"\") {                                                            // 25\n                search = base.search;                                                                                  // 26\n            }                                                                                                          // 27\n            if (flag && pathname.charAt(0) !== \"/\") {                                                                  // 28\n                pathname = (pathname !== \"\" ? (((base.host !== \"\" || base.username !== \"\") && base.pathname === \"\" ? \"/\" : \"\") + base.pathname.slice(0, base.pathname.lastIndexOf(\"/\") + 1) + pathname) : base.pathname);\n            }                                                                                                          // 30\n            // dot segments removal                                                                                    // 31\n            var output = [];                                                                                           // 32\n            pathname.replace(/^(\\.\\.?(\\/|$))+/, \"\")                                                                    // 33\n                .replace(/\\/(\\.(\\/|$))+/g, \"/\")                                                                        // 34\n                .replace(/\\/\\.\\.$/, \"/../\")                                                                            // 35\n                .replace(/\\/?[^\\/]*/g, function (p) {                                                                  // 36\n                    if (p === \"/..\") {                                                                                 // 37\n                        output.pop();                                                                                  // 38\n                    } else {                                                                                           // 39\n                        output.push(p);                                                                                // 40\n                    }                                                                                                  // 41\n                });                                                                                                    // 42\n            pathname = output.join(\"\").replace(/^\\//, pathname.charAt(0) === \"/\" ? \"/\" : \"\");                          // 43\n            if (flag) {                                                                                                // 44\n                port = base.port;                                                                                      // 45\n                hostname = base.hostname;                                                                              // 46\n                host = base.host;                                                                                      // 47\n                password = base.password;                                                                              // 48\n                username = base.username;                                                                              // 49\n            }                                                                                                          // 50\n            if (protocol === \"\") {                                                                                     // 51\n                protocol = base.protocol;                                                                              // 52\n            }                                                                                                          // 53\n        }                                                                                                              // 54\n                                                                                                                       // 55\n        // convert windows file URLs to use /                                                                          // 56\n        if (protocol == 'file:')                                                                                       // 57\n            pathname = pathname.replace(/\\\\/g, '/');                                                                   // 58\n                                                                                                                       // 59\n        this.origin = protocol + (protocol !== \"\" || host !== \"\" ? \"//\" : \"\") + host;                                  // 60\n        this.href = protocol + (protocol !== \"\" || host !== \"\" ? \"//\" : \"\") + (username !== \"\" ? username + (password !== \"\" ? \":\" + password : \"\") + \"@\" : \"\") + host + pathname + search + hash;\n        this.protocol = protocol;                                                                                      // 62\n        this.username = username;                                                                                      // 63\n        this.password = password;                                                                                      // 64\n        this.host = host;                                                                                              // 65\n        this.hostname = hostname;                                                                                      // 66\n        this.port = port;                                                                                              // 67\n        this.pathname = pathname;                                                                                      // 68\n        this.search = search;                                                                                          // 69\n        this.hash = hash;                                                                                              // 70\n    }                                                                                                                  // 71\n    global.URLPolyfill = URLPolyfill;                                                                                  // 72\n})(typeof self != 'undefined' ? self : global);!function(e){\"object\"==typeof exports?module.exports=e():\"function\"==typeof define&&define.amd?define(e):\"undefined\"!=typeof window?window.Promise=e():\"undefined\"!=typeof global?global.Promise=e():\"undefined\"!=typeof self&&(self.Promise=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n    /** @license MIT License (c) copyright 2010-2014 original author or authors */                                     // 74\n    /** @author Brian Cavalier */                                                                                      // 75\n    /** @author John Hann */                                                                                           // 76\n                                                                                                                       // 77\n    /**                                                                                                                // 78\n     * ES6 global Promise shim                                                                                         // 79\n     */                                                                                                                // 80\n    var unhandledRejections = require('../lib/decorators/unhandledRejection');                                         // 81\n    var PromiseConstructor = unhandledRejections(require('../lib/Promise'));                                           // 82\n                                                                                                                       // 83\n    module.exports = typeof global != 'undefined' ? (global.Promise = PromiseConstructor)                              // 84\n        : typeof self   != 'undefined' ? (self.Promise   = PromiseConstructor)                                         // 85\n        : PromiseConstructor;                                                                                          // 86\n                                                                                                                       // 87\n},{\"../lib/Promise\":2,\"../lib/decorators/unhandledRejection\":4}],2:[function(require,module,exports){                  // 88\n    /** @license MIT License (c) copyright 2010-2014 original author or authors */                                     // 89\n    /** @author Brian Cavalier */                                                                                      // 90\n    /** @author John Hann */                                                                                           // 91\n                                                                                                                       // 92\n    (function(define) { 'use strict';                                                                                  // 93\n        define(function (require) {                                                                                    // 94\n                                                                                                                       // 95\n            var makePromise = require('./makePromise');                                                                // 96\n            var Scheduler = require('./Scheduler');                                                                    // 97\n            var async = require('./env').asap;                                                                         // 98\n                                                                                                                       // 99\n            return makePromise({                                                                                       // 100\n                scheduler: new Scheduler(async)                                                                        // 101\n            });                                                                                                        // 102\n                                                                                                                       // 103\n        });                                                                                                            // 104\n    })(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n                                                                                                                       // 106\n},{\"./Scheduler\":3,\"./env\":5,\"./makePromise\":7}],3:[function(require,module,exports){                                  // 107\n    /** @license MIT License (c) copyright 2010-2014 original author or authors */                                     // 108\n    /** @author Brian Cavalier */                                                                                      // 109\n    /** @author John Hann */                                                                                           // 110\n                                                                                                                       // 111\n    (function(define) { 'use strict';                                                                                  // 112\n        define(function() {                                                                                            // 113\n                                                                                                                       // 114\n            // Credit to Twisol (https://github.com/Twisol) for suggesting                                             // 115\n            // this type of extensible queue + trampoline approach for next-tick conflation.                           // 116\n                                                                                                                       // 117\n            /**                                                                                                        // 118\n             * Async task scheduler                                                                                    // 119\n             * @param {function} async function to schedule a single async function                                    // 120\n             * @constructor                                                                                            // 121\n             */                                                                                                        // 122\n            function Scheduler(async) {                                                                                // 123\n                this._async = async;                                                                                   // 124\n                this._running = false;                                                                                 // 125\n                                                                                                                       // 126\n                this._queue = this;                                                                                    // 127\n                this._queueLen = 0;                                                                                    // 128\n                this._afterQueue = {};                                                                                 // 129\n                this._afterQueueLen = 0;                                                                               // 130\n                                                                                                                       // 131\n                var self = this;                                                                                       // 132\n                this.drain = function() {                                                                              // 133\n                    self._drain();                                                                                     // 134\n                };                                                                                                     // 135\n            }                                                                                                          // 136\n                                                                                                                       // 137\n            /**                                                                                                        // 138\n             * Enqueue a task                                                                                          // 139\n             * @param {{ run:function }} task                                                                          // 140\n             */                                                                                                        // 141\n            Scheduler.prototype.enqueue = function(task) {                                                             // 142\n                this._queue[this._queueLen++] = task;                                                                  // 143\n                this.run();                                                                                            // 144\n            };                                                                                                         // 145\n                                                                                                                       // 146\n            /**                                                                                                        // 147\n             * Enqueue a task to run after the main task queue                                                         // 148\n             * @param {{ run:function }} task                                                                          // 149\n             */                                                                                                        // 150\n            Scheduler.prototype.afterQueue = function(task) {                                                          // 151\n                this._afterQueue[this._afterQueueLen++] = task;                                                        // 152\n                this.run();                                                                                            // 153\n            };                                                                                                         // 154\n                                                                                                                       // 155\n            Scheduler.prototype.run = function() {                                                                     // 156\n                if (!this._running) {                                                                                  // 157\n                    this._running = true;                                                                              // 158\n                    this._async(this.drain);                                                                           // 159\n                }                                                                                                      // 160\n            };                                                                                                         // 161\n                                                                                                                       // 162\n            /**                                                                                                        // 163\n             * Drain the handler queue entirely, and then the after queue                                              // 164\n             */                                                                                                        // 165\n            Scheduler.prototype._drain = function() {                                                                  // 166\n                var i = 0;                                                                                             // 167\n                for (; i < this._queueLen; ++i) {                                                                      // 168\n                    this._queue[i].run();                                                                              // 169\n                    this._queue[i] = void 0;                                                                           // 170\n                }                                                                                                      // 171\n                                                                                                                       // 172\n                this._queueLen = 0;                                                                                    // 173\n                this._running = false;                                                                                 // 174\n                                                                                                                       // 175\n                for (i = 0; i < this._afterQueueLen; ++i) {                                                            // 176\n                    this._afterQueue[i].run();                                                                         // 177\n                    this._afterQueue[i] = void 0;                                                                      // 178\n                }                                                                                                      // 179\n                                                                                                                       // 180\n                this._afterQueueLen = 0;                                                                               // 181\n            };                                                                                                         // 182\n                                                                                                                       // 183\n            return Scheduler;                                                                                          // 184\n                                                                                                                       // 185\n        });                                                                                                            // 186\n    }(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));       // 187\n                                                                                                                       // 188\n},{}],4:[function(require,module,exports){                                                                             // 189\n    /** @license MIT License (c) copyright 2010-2014 original author or authors */                                     // 190\n    /** @author Brian Cavalier */                                                                                      // 191\n    /** @author John Hann */                                                                                           // 192\n                                                                                                                       // 193\n    (function(define) { 'use strict';                                                                                  // 194\n        define(function(require) {                                                                                     // 195\n                                                                                                                       // 196\n            var setTimer = require('../env').setTimer;                                                                 // 197\n            var format = require('../format');                                                                         // 198\n                                                                                                                       // 199\n            return function unhandledRejection(Promise) {                                                              // 200\n                                                                                                                       // 201\n                var logError = noop;                                                                                   // 202\n                var logInfo = noop;                                                                                    // 203\n                var localConsole;                                                                                      // 204\n                                                                                                                       // 205\n                if(typeof console !== 'undefined') {                                                                   // 206\n                    // Alias console to prevent things like uglify's drop_console option from                          // 207\n                    // removing console.log/error. Unhandled rejections fall into the same                             // 208\n                    // category as uncaught exceptions, and build tools shouldn't silence them.                        // 209\n                    localConsole = console;                                                                            // 210\n                    logError = typeof localConsole.error !== 'undefined'                                               // 211\n                        ? function (e) { localConsole.error(e); }                                                      // 212\n                        : function (e) { localConsole.log(e); };                                                       // 213\n                                                                                                                       // 214\n                    logInfo = typeof localConsole.info !== 'undefined'                                                 // 215\n                        ? function (e) { localConsole.info(e); }                                                       // 216\n                        : function (e) { localConsole.log(e); };                                                       // 217\n                }                                                                                                      // 218\n                                                                                                                       // 219\n                Promise.onPotentiallyUnhandledRejection = function(rejection) {                                        // 220\n                    enqueue(report, rejection);                                                                        // 221\n                };                                                                                                     // 222\n                                                                                                                       // 223\n                Promise.onPotentiallyUnhandledRejectionHandled = function(rejection) {                                 // 224\n                    enqueue(unreport, rejection);                                                                      // 225\n                };                                                                                                     // 226\n                                                                                                                       // 227\n                Promise.onFatalRejection = function(rejection) {                                                       // 228\n                    enqueue(throwit, rejection.value);                                                                 // 229\n                };                                                                                                     // 230\n                                                                                                                       // 231\n                var tasks = [];                                                                                        // 232\n                var reported = [];                                                                                     // 233\n                var running = null;                                                                                    // 234\n                                                                                                                       // 235\n                function report(r) {                                                                                   // 236\n                    if(!r.handled) {                                                                                   // 237\n                        reported.push(r);                                                                              // 238\n                        logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));     // 239\n                    }                                                                                                  // 240\n                }                                                                                                      // 241\n                                                                                                                       // 242\n                function unreport(r) {                                                                                 // 243\n                    var i = reported.indexOf(r);                                                                       // 244\n                    if(i >= 0) {                                                                                       // 245\n                        reported.splice(i, 1);                                                                         // 246\n                        logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));          // 247\n                    }                                                                                                  // 248\n                }                                                                                                      // 249\n                                                                                                                       // 250\n                function enqueue(f, x) {                                                                               // 251\n                    tasks.push(f, x);                                                                                  // 252\n                    if(running === null) {                                                                             // 253\n                        running = setTimer(flush, 0);                                                                  // 254\n                    }                                                                                                  // 255\n                }                                                                                                      // 256\n                                                                                                                       // 257\n                function flush() {                                                                                     // 258\n                    running = null;                                                                                    // 259\n                    while(tasks.length > 0) {                                                                          // 260\n                        tasks.shift()(tasks.shift());                                                                  // 261\n                    }                                                                                                  // 262\n                }                                                                                                      // 263\n                                                                                                                       // 264\n                return Promise;                                                                                        // 265\n            };                                                                                                         // 266\n                                                                                                                       // 267\n            function throwit(e) {                                                                                      // 268\n                throw e;                                                                                               // 269\n            }                                                                                                          // 270\n                                                                                                                       // 271\n            function noop() {}                                                                                         // 272\n                                                                                                                       // 273\n        });                                                                                                            // 274\n    }(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n                                                                                                                       // 276\n},{\"../env\":5,\"../format\":6}],5:[function(require,module,exports){                                                     // 277\n    /** @license MIT License (c) copyright 2010-2014 original author or authors */                                     // 278\n    /** @author Brian Cavalier */                                                                                      // 279\n    /** @author John Hann */                                                                                           // 280\n                                                                                                                       // 281\n    /*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/                        // 282\n    (function(define) { 'use strict';                                                                                  // 283\n        define(function(require) {                                                                                     // 284\n            /*jshint maxcomplexity:6*/                                                                                 // 285\n                                                                                                                       // 286\n            // Sniff \"best\" async scheduling option                                                                    // 287\n            // Prefer process.nextTick or MutationObserver, then check for                                             // 288\n            // setTimeout, and finally vertx, since its the only env that doesn't                                      // 289\n            // have setTimeout                                                                                         // 290\n                                                                                                                       // 291\n            var MutationObs;                                                                                           // 292\n            var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;                                  // 293\n                                                                                                                       // 294\n            // Default env                                                                                             // 295\n            var setTimer = function(f, ms) { return setTimeout(f, ms); };                                              // 296\n            var clearTimer = function(t) { return clearTimeout(t); };                                                  // 297\n            var asap = function (f) { return capturedSetTimeout(f, 0); };                                              // 298\n                                                                                                                       // 299\n            // Detect specific env                                                                                     // 300\n            if (isNode()) { // Node                                                                                    // 301\n                asap = function (f) { return process.nextTick(f); };                                                   // 302\n                                                                                                                       // 303\n            } else if (MutationObs = hasMutationObserver()) { // Modern browser                                        // 304\n                asap = initMutationObserver(MutationObs);                                                              // 305\n                                                                                                                       // 306\n            } else if (!capturedSetTimeout) { // vert.x                                                                // 307\n                var vertxRequire = require;                                                                            // 308\n                var vertx = vertxRequire('vertx');                                                                     // 309\n                setTimer = function (f, ms) { return vertx.setTimer(ms, f); };                                         // 310\n                clearTimer = vertx.cancelTimer;                                                                        // 311\n                asap = vertx.runOnLoop || vertx.runOnContext;                                                          // 312\n            }                                                                                                          // 313\n                                                                                                                       // 314\n            return {                                                                                                   // 315\n                setTimer: setTimer,                                                                                    // 316\n                clearTimer: clearTimer,                                                                                // 317\n                asap: asap                                                                                             // 318\n            };                                                                                                         // 319\n                                                                                                                       // 320\n            function isNode () {                                                                                       // 321\n                return typeof process !== 'undefined' && process !== null &&                                           // 322\n                    typeof process.nextTick === 'function';                                                            // 323\n            }                                                                                                          // 324\n                                                                                                                       // 325\n            function hasMutationObserver () {                                                                          // 326\n                return (typeof MutationObserver === 'function' && MutationObserver) ||                                 // 327\n                    (typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);                          // 328\n            }                                                                                                          // 329\n                                                                                                                       // 330\n            function initMutationObserver(MutationObserver) {                                                          // 331\n                var scheduled;                                                                                         // 332\n                var node = document.createTextNode('');                                                                // 333\n                var o = new MutationObserver(run);                                                                     // 334\n                o.observe(node, { characterData: true });                                                              // 335\n                                                                                                                       // 336\n                function run() {                                                                                       // 337\n                    var f = scheduled;                                                                                 // 338\n                    scheduled = void 0;                                                                                // 339\n                    f();                                                                                               // 340\n                }                                                                                                      // 341\n                                                                                                                       // 342\n                var i = 0;                                                                                             // 343\n                return function (f) {                                                                                  // 344\n                    scheduled = f;                                                                                     // 345\n                    node.data = (i ^= 1);                                                                              // 346\n                };                                                                                                     // 347\n            }                                                                                                          // 348\n        });                                                                                                            // 349\n    }(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n                                                                                                                       // 351\n},{}],6:[function(require,module,exports){                                                                             // 352\n    /** @license MIT License (c) copyright 2010-2014 original author or authors */                                     // 353\n    /** @author Brian Cavalier */                                                                                      // 354\n    /** @author John Hann */                                                                                           // 355\n                                                                                                                       // 356\n    (function(define) { 'use strict';                                                                                  // 357\n        define(function() {                                                                                            // 358\n                                                                                                                       // 359\n            return {                                                                                                   // 360\n                formatError: formatError,                                                                              // 361\n                formatObject: formatObject,                                                                            // 362\n                tryStringify: tryStringify                                                                             // 363\n            };                                                                                                         // 364\n                                                                                                                       // 365\n            /**                                                                                                        // 366\n             * Format an error into a string.  If e is an Error and has a stack property,                              // 367\n             * it's returned.  Otherwise, e is formatted using formatObject, with a                                    // 368\n             * warning added about e not being a proper Error.                                                         // 369\n             * @param {*} e                                                                                            // 370\n             * @returns {String} formatted string, suitable for output to developers                                   // 371\n             */                                                                                                        // 372\n            function formatError(e) {                                                                                  // 373\n                var s = typeof e === 'object' && e !== null && e.stack ? e.stack : formatObject(e);                    // 374\n                return e instanceof Error ? s : s + ' (WARNING: non-Error used)';                                      // 375\n            }                                                                                                          // 376\n                                                                                                                       // 377\n            /**                                                                                                        // 378\n             * Format an object, detecting \"plain\" objects and running them through                                    // 379\n             * JSON.stringify if possible.                                                                             // 380\n             * @param {Object} o                                                                                       // 381\n             * @returns {string}                                                                                       // 382\n             */                                                                                                        // 383\n            function formatObject(o) {                                                                                 // 384\n                var s = String(o);                                                                                     // 385\n                if(s === '[object Object]' && typeof JSON !== 'undefined') {                                           // 386\n                    s = tryStringify(o, s);                                                                            // 387\n                }                                                                                                      // 388\n                return s;                                                                                              // 389\n            }                                                                                                          // 390\n                                                                                                                       // 391\n            /**                                                                                                        // 392\n             * Try to return the result of JSON.stringify(x).  If that fails, return                                   // 393\n             * defaultValue                                                                                            // 394\n             * @param {*} x                                                                                            // 395\n             * @param {*} defaultValue                                                                                 // 396\n             * @returns {String|*} JSON.stringify(x) or defaultValue                                                   // 397\n             */                                                                                                        // 398\n            function tryStringify(x, defaultValue) {                                                                   // 399\n                try {                                                                                                  // 400\n                    return JSON.stringify(x);                                                                          // 401\n                } catch(e) {                                                                                           // 402\n                    return defaultValue;                                                                               // 403\n                }                                                                                                      // 404\n            }                                                                                                          // 405\n                                                                                                                       // 406\n        });                                                                                                            // 407\n    }(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));       // 408\n                                                                                                                       // 409\n},{}],7:[function(require,module,exports){                                                                             // 410\n    /** @license MIT License (c) copyright 2010-2014 original author or authors */                                     // 411\n    /** @author Brian Cavalier */                                                                                      // 412\n    /** @author John Hann */                                                                                           // 413\n                                                                                                                       // 414\n    (function(define) { 'use strict';                                                                                  // 415\n        define(function() {                                                                                            // 416\n                                                                                                                       // 417\n            return function makePromise(environment) {                                                                 // 418\n                                                                                                                       // 419\n                var tasks = environment.scheduler;                                                                     // 420\n                var emitRejection = initEmitRejection();                                                               // 421\n                                                                                                                       // 422\n                var objectCreate = Object.create ||                                                                    // 423\n                    function(proto) {                                                                                  // 424\n                        function Child() {}                                                                            // 425\n                        Child.prototype = proto;                                                                       // 426\n                        return new Child();                                                                            // 427\n                    };                                                                                                 // 428\n                                                                                                                       // 429\n                /**                                                                                                    // 430\n                 * Create a promise whose fate is determined by resolver                                               // 431\n                 * @constructor                                                                                        // 432\n                 * @returns {Promise} promise                                                                          // 433\n                 * @name Promise                                                                                       // 434\n                 */                                                                                                    // 435\n                function Promise(resolver, handler) {                                                                  // 436\n                    this._handler = resolver === Handler ? handler : init(resolver);                                   // 437\n                }                                                                                                      // 438\n                                                                                                                       // 439\n                /**                                                                                                    // 440\n                 * Run the supplied resolver                                                                           // 441\n                 * @param resolver                                                                                     // 442\n                 * @returns {Pending}                                                                                  // 443\n                 */                                                                                                    // 444\n                function init(resolver) {                                                                              // 445\n                    var handler = new Pending();                                                                       // 446\n                                                                                                                       // 447\n                    try {                                                                                              // 448\n                        resolver(promiseResolve, promiseReject, promiseNotify);                                        // 449\n                    } catch (e) {                                                                                      // 450\n                        promiseReject(e);                                                                              // 451\n                    }                                                                                                  // 452\n                                                                                                                       // 453\n                    return handler;                                                                                    // 454\n                                                                                                                       // 455\n                    /**                                                                                                // 456\n                     * Transition from pre-resolution state to post-resolution state, notifying                        // 457\n                     * all listeners of the ultimate fulfillment or rejection                                          // 458\n                     * @param {*} x resolution value                                                                   // 459\n                     */                                                                                                // 460\n                    function promiseResolve (x) {                                                                      // 461\n                        handler.resolve(x);                                                                            // 462\n                    }                                                                                                  // 463\n                    /**                                                                                                // 464\n                     * Reject this promise with reason, which will be used verbatim                                    // 465\n                     * @param {Error|*} reason rejection reason, strongly suggested                                    // 466\n                     *   to be an Error type                                                                           // 467\n                     */                                                                                                // 468\n                    function promiseReject (reason) {                                                                  // 469\n                        handler.reject(reason);                                                                        // 470\n                    }                                                                                                  // 471\n                                                                                                                       // 472\n                    /**                                                                                                // 473\n                     * @deprecated                                                                                     // 474\n                     * Issue a progress event, notifying all progress listeners                                        // 475\n                     * @param {*} x progress event payload to pass to all listeners                                    // 476\n                     */                                                                                                // 477\n                    function promiseNotify (x) {                                                                       // 478\n                        handler.notify(x);                                                                             // 479\n                    }                                                                                                  // 480\n                }                                                                                                      // 481\n                                                                                                                       // 482\n                // Creation                                                                                            // 483\n                                                                                                                       // 484\n                Promise.resolve = resolve;                                                                             // 485\n                Promise.reject = reject;                                                                               // 486\n                Promise.never = never;                                                                                 // 487\n                                                                                                                       // 488\n                Promise._defer = defer;                                                                                // 489\n                Promise._handler = getHandler;                                                                         // 490\n                                                                                                                       // 491\n                /**                                                                                                    // 492\n                 * Returns a trusted promise. If x is already a trusted promise, it is                                 // 493\n                 * returned, otherwise returns a new trusted Promise which follows x.                                  // 494\n                 * @param  {*} x                                                                                       // 495\n                 * @return {Promise} promise                                                                           // 496\n                 */                                                                                                    // 497\n                function resolve(x) {                                                                                  // 498\n                    return isPromise(x) ? x                                                                            // 499\n                        : new Promise(Handler, new Async(getHandler(x)));                                              // 500\n                }                                                                                                      // 501\n                                                                                                                       // 502\n                /**                                                                                                    // 503\n                 * Return a reject promise with x as its reason (x is used verbatim)                                   // 504\n                 * @param {*} x                                                                                        // 505\n                 * @returns {Promise} rejected promise                                                                 // 506\n                 */                                                                                                    // 507\n                function reject(x) {                                                                                   // 508\n                    return new Promise(Handler, new Async(new Rejected(x)));                                           // 509\n                }                                                                                                      // 510\n                                                                                                                       // 511\n                /**                                                                                                    // 512\n                 * Return a promise that remains pending forever                                                       // 513\n                 * @returns {Promise} forever-pending promise.                                                         // 514\n                 */                                                                                                    // 515\n                function never() {                                                                                     // 516\n                    return foreverPendingPromise; // Should be frozen                                                  // 517\n                }                                                                                                      // 518\n                                                                                                                       // 519\n                /**                                                                                                    // 520\n                 * Creates an internal {promise, resolver} pair                                                        // 521\n                 * @private                                                                                            // 522\n                 * @returns {Promise}                                                                                  // 523\n                 */                                                                                                    // 524\n                function defer() {                                                                                     // 525\n                    return new Promise(Handler, new Pending());                                                        // 526\n                }                                                                                                      // 527\n                                                                                                                       // 528\n                // Transformation and flow control                                                                     // 529\n                                                                                                                       // 530\n                /**                                                                                                    // 531\n                 * Transform this promise's fulfillment value, returning a new Promise                                 // 532\n                 * for the transformed result.  If the promise cannot be fulfilled, onRejected                         // 533\n                 * is called with the reason.  onProgress *may* be called with updates toward                          // 534\n                 * this promise's fulfillment.                                                                         // 535\n                 * @param {function=} onFulfilled fulfillment handler                                                  // 536\n                 * @param {function=} onRejected rejection handler                                                     // 537\n                 * @param {function=} onProgress @deprecated progress handler                                          // 538\n                 * @return {Promise} new promise                                                                       // 539\n                 */                                                                                                    // 540\n                Promise.prototype.then = function(onFulfilled, onRejected, onProgress) {                               // 541\n                    var parent = this._handler;                                                                        // 542\n                    var state = parent.join().state();                                                                 // 543\n                                                                                                                       // 544\n                    if ((typeof onFulfilled !== 'function' && state > 0) ||                                            // 545\n                        (typeof onRejected !== 'function' && state < 0)) {                                             // 546\n                        // Short circuit: value will not change, simply share handler                                  // 547\n                        return new this.constructor(Handler, parent);                                                  // 548\n                    }                                                                                                  // 549\n                                                                                                                       // 550\n                    var p = this._beget();                                                                             // 551\n                    var child = p._handler;                                                                            // 552\n                                                                                                                       // 553\n                    parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);                         // 554\n                                                                                                                       // 555\n                    return p;                                                                                          // 556\n                };                                                                                                     // 557\n                                                                                                                       // 558\n                /**                                                                                                    // 559\n                 * If this promise cannot be fulfilled due to an error, call onRejected to                             // 560\n                 * handle the error. Shortcut for .then(undefined, onRejected)                                         // 561\n                 * @param {function?} onRejected                                                                       // 562\n                 * @return {Promise}                                                                                   // 563\n                 */                                                                                                    // 564\n                Promise.prototype['catch'] = function(onRejected) {                                                    // 565\n                    return this.then(void 0, onRejected);                                                              // 566\n                };                                                                                                     // 567\n                                                                                                                       // 568\n                /**                                                                                                    // 569\n                 * Creates a new, pending promise of the same type as this promise                                     // 570\n                 * @private                                                                                            // 571\n                 * @returns {Promise}                                                                                  // 572\n                 */                                                                                                    // 573\n                Promise.prototype._beget = function() {                                                                // 574\n                    return begetFrom(this._handler, this.constructor);                                                 // 575\n                };                                                                                                     // 576\n                                                                                                                       // 577\n                function begetFrom(parent, Promise) {                                                                  // 578\n                    var child = new Pending(parent.receiver, parent.join().context);                                   // 579\n                    return new Promise(Handler, child);                                                                // 580\n                }                                                                                                      // 581\n                                                                                                                       // 582\n                // Array combinators                                                                                   // 583\n                                                                                                                       // 584\n                Promise.all = all;                                                                                     // 585\n                Promise.race = race;                                                                                   // 586\n                Promise._traverse = traverse;                                                                          // 587\n                                                                                                                       // 588\n                /**                                                                                                    // 589\n                 * Return a promise that will fulfill when all promises in the                                         // 590\n                 * input array have fulfilled, or will reject when one of the                                          // 591\n                 * promises rejects.                                                                                   // 592\n                 * @param {array} promises array of promises                                                           // 593\n                 * @returns {Promise} promise for array of fulfillment values                                          // 594\n                 */                                                                                                    // 595\n                function all(promises) {                                                                               // 596\n                    return traverseWith(snd, null, promises);                                                          // 597\n                }                                                                                                      // 598\n                                                                                                                       // 599\n                /**                                                                                                    // 600\n                 * Array<Promise<X>> -> Promise<Array<f(X)>>                                                           // 601\n                 * @private                                                                                            // 602\n                 * @param {function} f function to apply to each promise's value                                       // 603\n                 * @param {Array} promises array of promises                                                           // 604\n                 * @returns {Promise} promise for transformed values                                                   // 605\n                 */                                                                                                    // 606\n                function traverse(f, promises) {                                                                       // 607\n                    return traverseWith(tryCatch2, f, promises);                                                       // 608\n                }                                                                                                      // 609\n                                                                                                                       // 610\n                function traverseWith(tryMap, f, promises) {                                                           // 611\n                    var handler = typeof f === 'function' ? mapAt : settleAt;                                          // 612\n                                                                                                                       // 613\n                    var resolver = new Pending();                                                                      // 614\n                    var pending = promises.length >>> 0;                                                               // 615\n                    var results = new Array(pending);                                                                  // 616\n                                                                                                                       // 617\n                    for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {                               // 618\n                        x = promises[i];                                                                               // 619\n                                                                                                                       // 620\n                        if (x === void 0 && !(i in promises)) {                                                        // 621\n                            --pending;                                                                                 // 622\n                            continue;                                                                                  // 623\n                        }                                                                                              // 624\n                                                                                                                       // 625\n                        traverseAt(promises, handler, i, x, resolver);                                                 // 626\n                    }                                                                                                  // 627\n                                                                                                                       // 628\n                    if(pending === 0) {                                                                                // 629\n                        resolver.become(new Fulfilled(results));                                                       // 630\n                    }                                                                                                  // 631\n                                                                                                                       // 632\n                    return new Promise(Handler, resolver);                                                             // 633\n                                                                                                                       // 634\n                    function mapAt(i, x, resolver) {                                                                   // 635\n                        if(!resolver.resolved) {                                                                       // 636\n                            traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);                              // 637\n                        }                                                                                              // 638\n                    }                                                                                                  // 639\n                                                                                                                       // 640\n                    function settleAt(i, x, resolver) {                                                                // 641\n                        results[i] = x;                                                                                // 642\n                        if(--pending === 0) {                                                                          // 643\n                            resolver.become(new Fulfilled(results));                                                   // 644\n                        }                                                                                              // 645\n                    }                                                                                                  // 646\n                }                                                                                                      // 647\n                                                                                                                       // 648\n                function traverseAt(promises, handler, i, x, resolver) {                                               // 649\n                    if (maybeThenable(x)) {                                                                            // 650\n                        var h = getHandlerMaybeThenable(x);                                                            // 651\n                        var s = h.state();                                                                             // 652\n                                                                                                                       // 653\n                        if (s === 0) {                                                                                 // 654\n                            h.fold(handler, i, void 0, resolver);                                                      // 655\n                        } else if (s > 0) {                                                                            // 656\n                            handler(i, h.value, resolver);                                                             // 657\n                        } else {                                                                                       // 658\n                            resolver.become(h);                                                                        // 659\n                            visitRemaining(promises, i+1, h);                                                          // 660\n                        }                                                                                              // 661\n                    } else {                                                                                           // 662\n                        handler(i, x, resolver);                                                                       // 663\n                    }                                                                                                  // 664\n                }                                                                                                      // 665\n                                                                                                                       // 666\n                Promise._visitRemaining = visitRemaining;                                                              // 667\n                function visitRemaining(promises, start, handler) {                                                    // 668\n                    for(var i=start; i<promises.length; ++i) {                                                         // 669\n                        markAsHandled(getHandler(promises[i]), handler);                                               // 670\n                    }                                                                                                  // 671\n                }                                                                                                      // 672\n                                                                                                                       // 673\n                function markAsHandled(h, handler) {                                                                   // 674\n                    if(h === handler) {                                                                                // 675\n                        return;                                                                                        // 676\n                    }                                                                                                  // 677\n                                                                                                                       // 678\n                    var s = h.state();                                                                                 // 679\n                    if(s === 0) {                                                                                      // 680\n                        h.visit(h, void 0, h._unreport);                                                               // 681\n                    } else if(s < 0) {                                                                                 // 682\n                        h._unreport();                                                                                 // 683\n                    }                                                                                                  // 684\n                }                                                                                                      // 685\n                                                                                                                       // 686\n                /**                                                                                                    // 687\n                 * Fulfill-reject competitive race. Return a promise that will settle                                  // 688\n                 * to the same state as the earliest input promise to settle.                                          // 689\n                 *                                                                                                     // 690\n                 * WARNING: The ES6 Promise spec requires that race()ing an empty array                                // 691\n                 * must return a promise that is pending forever.  This implementation                                 // 692\n                 * returns a singleton forever-pending promise, the same singleton that is                             // 693\n                 * returned by Promise.never(), thus can be checked with ===                                           // 694\n                 *                                                                                                     // 695\n                 * @param {array} promises array of promises to race                                                   // 696\n                 * @returns {Promise} if input is non-empty, a promise that will settle                                // 697\n                 * to the same outcome as the earliest input promise to settle. if empty                               // 698\n                 * is empty, returns a promise that will never settle.                                                 // 699\n                 */                                                                                                    // 700\n                function race(promises) {                                                                              // 701\n                    if(typeof promises !== 'object' || promises === null) {                                            // 702\n                        return reject(new TypeError('non-iterable passed to race()'));                                 // 703\n                    }                                                                                                  // 704\n                                                                                                                       // 705\n                    // Sigh, race([]) is untestable unless we return *something*                                       // 706\n                    // that is recognizable without calling .then() on it.                                             // 707\n                    return promises.length === 0 ? never()                                                             // 708\n                        : promises.length === 1 ? resolve(promises[0])                                                 // 709\n                        : runRace(promises);                                                                           // 710\n                }                                                                                                      // 711\n                                                                                                                       // 712\n                function runRace(promises) {                                                                           // 713\n                    var resolver = new Pending();                                                                      // 714\n                    var i, x, h;                                                                                       // 715\n                    for(i=0; i<promises.length; ++i) {                                                                 // 716\n                        x = promises[i];                                                                               // 717\n                        if (x === void 0 && !(i in promises)) {                                                        // 718\n                            continue;                                                                                  // 719\n                        }                                                                                              // 720\n                                                                                                                       // 721\n                        h = getHandler(x);                                                                             // 722\n                        if(h.state() !== 0) {                                                                          // 723\n                            resolver.become(h);                                                                        // 724\n                            visitRemaining(promises, i+1, h);                                                          // 725\n                            break;                                                                                     // 726\n                        } else {                                                                                       // 727\n                            h.visit(resolver, resolver.resolve, resolver.reject);                                      // 728\n                        }                                                                                              // 729\n                    }                                                                                                  // 730\n                    return new Promise(Handler, resolver);                                                             // 731\n                }                                                                                                      // 732\n                                                                                                                       // 733\n                // Promise internals                                                                                   // 734\n                // Below this, everything is @private                                                                  // 735\n                                                                                                                       // 736\n                /**                                                                                                    // 737\n                 * Get an appropriate handler for x, without checking for cycles                                       // 738\n                 * @param {*} x                                                                                        // 739\n                 * @returns {object} handler                                                                           // 740\n                 */                                                                                                    // 741\n                function getHandler(x) {                                                                               // 742\n                    if(isPromise(x)) {                                                                                 // 743\n                        return x._handler.join();                                                                      // 744\n                    }                                                                                                  // 745\n                    return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);                               // 746\n                }                                                                                                      // 747\n                                                                                                                       // 748\n                /**                                                                                                    // 749\n                 * Get a handler for thenable x.                                                                       // 750\n                 * NOTE: You must only call this if maybeThenable(x) == true                                           // 751\n                 * @param {object|function|Promise} x                                                                  // 752\n                 * @returns {object} handler                                                                           // 753\n                 */                                                                                                    // 754\n                function getHandlerMaybeThenable(x) {                                                                  // 755\n                    return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);                                  // 756\n                }                                                                                                      // 757\n                                                                                                                       // 758\n                /**                                                                                                    // 759\n                 * Get a handler for potentially untrusted thenable x                                                  // 760\n                 * @param {*} x                                                                                        // 761\n                 * @returns {object} handler                                                                           // 762\n                 */                                                                                                    // 763\n                function getHandlerUntrusted(x) {                                                                      // 764\n                    try {                                                                                              // 765\n                        var untrustedThen = x.then;                                                                    // 766\n                        return typeof untrustedThen === 'function'                                                     // 767\n                            ? new Thenable(untrustedThen, x)                                                           // 768\n                            : new Fulfilled(x);                                                                        // 769\n                    } catch(e) {                                                                                       // 770\n                        return new Rejected(e);                                                                        // 771\n                    }                                                                                                  // 772\n                }                                                                                                      // 773\n                                                                                                                       // 774\n                /**                                                                                                    // 775\n                 * Handler for a promise that is pending forever                                                       // 776\n                 * @constructor                                                                                        // 777\n                 */                                                                                                    // 778\n                function Handler() {}                                                                                  // 779\n                                                                                                                       // 780\n                Handler.prototype.when                                                                                 // 781\n                    = Handler.prototype.become                                                                         // 782\n                    = Handler.prototype.notify // deprecated                                                           // 783\n                    = Handler.prototype.fail                                                                           // 784\n                    = Handler.prototype._unreport                                                                      // 785\n                    = Handler.prototype._report                                                                        // 786\n                    = noop;                                                                                            // 787\n                                                                                                                       // 788\n                Handler.prototype._state = 0;                                                                          // 789\n                                                                                                                       // 790\n                Handler.prototype.state = function() {                                                                 // 791\n                    return this._state;                                                                                // 792\n                };                                                                                                     // 793\n                                                                                                                       // 794\n                /**                                                                                                    // 795\n                 * Recursively collapse handler chain to find the handler                                              // 796\n                 * nearest to the fully resolved value.                                                                // 797\n                 * @returns {object} handler nearest the fully resolved value                                          // 798\n                 */                                                                                                    // 799\n                Handler.prototype.join = function() {                                                                  // 800\n                    var h = this;                                                                                      // 801\n                    while(h.handler !== void 0) {                                                                      // 802\n                        h = h.handler;                                                                                 // 803\n                    }                                                                                                  // 804\n                    return h;                                                                                          // 805\n                };                                                                                                     // 806\n                                                                                                                       // 807\n                Handler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {                      // 808\n                    this.when({                                                                                        // 809\n                        resolver: to,                                                                                  // 810\n                        receiver: receiver,                                                                            // 811\n                        fulfilled: fulfilled,                                                                          // 812\n                        rejected: rejected,                                                                            // 813\n                        progress: progress                                                                             // 814\n                    });                                                                                                // 815\n                };                                                                                                     // 816\n                                                                                                                       // 817\n                Handler.prototype.visit = function(receiver, fulfilled, rejected, progress) {                          // 818\n                    this.chain(failIfRejected, receiver, fulfilled, rejected, progress);                               // 819\n                };                                                                                                     // 820\n                                                                                                                       // 821\n                Handler.prototype.fold = function(f, z, c, to) {                                                       // 822\n                    this.when(new Fold(f, z, c, to));                                                                  // 823\n                };                                                                                                     // 824\n                                                                                                                       // 825\n                /**                                                                                                    // 826\n                 * Handler that invokes fail() on any handler it becomes                                               // 827\n                 * @constructor                                                                                        // 828\n                 */                                                                                                    // 829\n                function FailIfRejected() {}                                                                           // 830\n                                                                                                                       // 831\n                inherit(Handler, FailIfRejected);                                                                      // 832\n                                                                                                                       // 833\n                FailIfRejected.prototype.become = function(h) {                                                        // 834\n                    h.fail();                                                                                          // 835\n                };                                                                                                     // 836\n                                                                                                                       // 837\n                var failIfRejected = new FailIfRejected();                                                             // 838\n                                                                                                                       // 839\n                /**                                                                                                    // 840\n                 * Handler that manages a queue of consumers waiting on a pending promise                              // 841\n                 * @constructor                                                                                        // 842\n                 */                                                                                                    // 843\n                function Pending(receiver, inheritedContext) {                                                         // 844\n                    Promise.createContext(this, inheritedContext);                                                     // 845\n                                                                                                                       // 846\n                    this.consumers = void 0;                                                                           // 847\n                    this.receiver = receiver;                                                                          // 848\n                    this.handler = void 0;                                                                             // 849\n                    this.resolved = false;                                                                             // 850\n                }                                                                                                      // 851\n                                                                                                                       // 852\n                inherit(Handler, Pending);                                                                             // 853\n                                                                                                                       // 854\n                Pending.prototype._state = 0;                                                                          // 855\n                                                                                                                       // 856\n                Pending.prototype.resolve = function(x) {                                                              // 857\n                    this.become(getHandler(x));                                                                        // 858\n                };                                                                                                     // 859\n                                                                                                                       // 860\n                Pending.prototype.reject = function(x) {                                                               // 861\n                    if(this.resolved) {                                                                                // 862\n                        return;                                                                                        // 863\n                    }                                                                                                  // 864\n                                                                                                                       // 865\n                    this.become(new Rejected(x));                                                                      // 866\n                };                                                                                                     // 867\n                                                                                                                       // 868\n                Pending.prototype.join = function() {                                                                  // 869\n                    if (!this.resolved) {                                                                              // 870\n                        return this;                                                                                   // 871\n                    }                                                                                                  // 872\n                                                                                                                       // 873\n                    var h = this;                                                                                      // 874\n                                                                                                                       // 875\n                    while (h.handler !== void 0) {                                                                     // 876\n                        h = h.handler;                                                                                 // 877\n                        if (h === this) {                                                                              // 878\n                            return this.handler = cycle();                                                             // 879\n                        }                                                                                              // 880\n                    }                                                                                                  // 881\n                                                                                                                       // 882\n                    return h;                                                                                          // 883\n                };                                                                                                     // 884\n                                                                                                                       // 885\n                Pending.prototype.run = function() {                                                                   // 886\n                    var q = this.consumers;                                                                            // 887\n                    var handler = this.handler;                                                                        // 888\n                    this.handler = this.handler.join();                                                                // 889\n                    this.consumers = void 0;                                                                           // 890\n                                                                                                                       // 891\n                    for (var i = 0; i < q.length; ++i) {                                                               // 892\n                        handler.when(q[i]);                                                                            // 893\n                    }                                                                                                  // 894\n                };                                                                                                     // 895\n                                                                                                                       // 896\n                Pending.prototype.become = function(handler) {                                                         // 897\n                    if(this.resolved) {                                                                                // 898\n                        return;                                                                                        // 899\n                    }                                                                                                  // 900\n                                                                                                                       // 901\n                    this.resolved = true;                                                                              // 902\n                    this.handler = handler;                                                                            // 903\n                    if(this.consumers !== void 0) {                                                                    // 904\n                        tasks.enqueue(this);                                                                           // 905\n                    }                                                                                                  // 906\n                                                                                                                       // 907\n                    if(this.context !== void 0) {                                                                      // 908\n                        handler._report(this.context);                                                                 // 909\n                    }                                                                                                  // 910\n                };                                                                                                     // 911\n                                                                                                                       // 912\n                Pending.prototype.when = function(continuation) {                                                      // 913\n                    if(this.resolved) {                                                                                // 914\n                        tasks.enqueue(new ContinuationTask(continuation, this.handler));                               // 915\n                    } else {                                                                                           // 916\n                        if(this.consumers === void 0) {                                                                // 917\n                            this.consumers = [continuation];                                                           // 918\n                        } else {                                                                                       // 919\n                            this.consumers.push(continuation);                                                         // 920\n                        }                                                                                              // 921\n                    }                                                                                                  // 922\n                };                                                                                                     // 923\n                                                                                                                       // 924\n                /**                                                                                                    // 925\n                 * @deprecated                                                                                         // 926\n                 */                                                                                                    // 927\n                Pending.prototype.notify = function(x) {                                                               // 928\n                    if(!this.resolved) {                                                                               // 929\n                        tasks.enqueue(new ProgressTask(x, this));                                                      // 930\n                    }                                                                                                  // 931\n                };                                                                                                     // 932\n                                                                                                                       // 933\n                Pending.prototype.fail = function(context) {                                                           // 934\n                    var c = typeof context === 'undefined' ? this.context : context;                                   // 935\n                    this.resolved && this.handler.join().fail(c);                                                      // 936\n                };                                                                                                     // 937\n                                                                                                                       // 938\n                Pending.prototype._report = function(context) {                                                        // 939\n                    this.resolved && this.handler.join()._report(context);                                             // 940\n                };                                                                                                     // 941\n                                                                                                                       // 942\n                Pending.prototype._unreport = function() {                                                             // 943\n                    this.resolved && this.handler.join()._unreport();                                                  // 944\n                };                                                                                                     // 945\n                                                                                                                       // 946\n                /**                                                                                                    // 947\n                 * Wrap another handler and force it into a future stack                                               // 948\n                 * @param {object} handler                                                                             // 949\n                 * @constructor                                                                                        // 950\n                 */                                                                                                    // 951\n                function Async(handler) {                                                                              // 952\n                    this.handler = handler;                                                                            // 953\n                }                                                                                                      // 954\n                                                                                                                       // 955\n                inherit(Handler, Async);                                                                               // 956\n                                                                                                                       // 957\n                Async.prototype.when = function(continuation) {                                                        // 958\n                    tasks.enqueue(new ContinuationTask(continuation, this));                                           // 959\n                };                                                                                                     // 960\n                                                                                                                       // 961\n                Async.prototype._report = function(context) {                                                          // 962\n                    this.join()._report(context);                                                                      // 963\n                };                                                                                                     // 964\n                                                                                                                       // 965\n                Async.prototype._unreport = function() {                                                               // 966\n                    this.join()._unreport();                                                                           // 967\n                };                                                                                                     // 968\n                                                                                                                       // 969\n                /**                                                                                                    // 970\n                 * Handler that wraps an untrusted thenable and assimilates it in a future stack                       // 971\n                 * @param {function} then                                                                              // 972\n                 * @param {{then: function}} thenable                                                                  // 973\n                 * @constructor                                                                                        // 974\n                 */                                                                                                    // 975\n                function Thenable(then, thenable) {                                                                    // 976\n                    Pending.call(this);                                                                                // 977\n                    tasks.enqueue(new AssimilateTask(then, thenable, this));                                           // 978\n                }                                                                                                      // 979\n                                                                                                                       // 980\n                inherit(Pending, Thenable);                                                                            // 981\n                                                                                                                       // 982\n                /**                                                                                                    // 983\n                 * Handler for a fulfilled promise                                                                     // 984\n                 * @param {*} x fulfillment value                                                                      // 985\n                 * @constructor                                                                                        // 986\n                 */                                                                                                    // 987\n                function Fulfilled(x) {                                                                                // 988\n                    Promise.createContext(this);                                                                       // 989\n                    this.value = x;                                                                                    // 990\n                }                                                                                                      // 991\n                                                                                                                       // 992\n                inherit(Handler, Fulfilled);                                                                           // 993\n                                                                                                                       // 994\n                Fulfilled.prototype._state = 1;                                                                        // 995\n                                                                                                                       // 996\n                Fulfilled.prototype.fold = function(f, z, c, to) {                                                     // 997\n                    runContinuation3(f, z, this, c, to);                                                               // 998\n                };                                                                                                     // 999\n                                                                                                                       // 1000\n                Fulfilled.prototype.when = function(cont) {                                                            // 1001\n                    runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);                              // 1002\n                };                                                                                                     // 1003\n                                                                                                                       // 1004\n                var errorId = 0;                                                                                       // 1005\n                                                                                                                       // 1006\n                /**                                                                                                    // 1007\n                 * Handler for a rejected promise                                                                      // 1008\n                 * @param {*} x rejection reason                                                                       // 1009\n                 * @constructor                                                                                        // 1010\n                 */                                                                                                    // 1011\n                function Rejected(x) {                                                                                 // 1012\n                    Promise.createContext(this);                                                                       // 1013\n                                                                                                                       // 1014\n                    this.id = ++errorId;                                                                               // 1015\n                    this.value = x;                                                                                    // 1016\n                    this.handled = false;                                                                              // 1017\n                    this.reported = false;                                                                             // 1018\n                                                                                                                       // 1019\n                    this._report();                                                                                    // 1020\n                }                                                                                                      // 1021\n                                                                                                                       // 1022\n                inherit(Handler, Rejected);                                                                            // 1023\n                                                                                                                       // 1024\n                Rejected.prototype._state = -1;                                                                        // 1025\n                                                                                                                       // 1026\n                Rejected.prototype.fold = function(f, z, c, to) {                                                      // 1027\n                    to.become(this);                                                                                   // 1028\n                };                                                                                                     // 1029\n                                                                                                                       // 1030\n                Rejected.prototype.when = function(cont) {                                                             // 1031\n                    if(typeof cont.rejected === 'function') {                                                          // 1032\n                        this._unreport();                                                                              // 1033\n                    }                                                                                                  // 1034\n                    runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);                               // 1035\n                };                                                                                                     // 1036\n                                                                                                                       // 1037\n                Rejected.prototype._report = function(context) {                                                       // 1038\n                    tasks.afterQueue(new ReportTask(this, context));                                                   // 1039\n                };                                                                                                     // 1040\n                                                                                                                       // 1041\n                Rejected.prototype._unreport = function() {                                                            // 1042\n                    if(this.handled) {                                                                                 // 1043\n                        return;                                                                                        // 1044\n                    }                                                                                                  // 1045\n                    this.handled = true;                                                                               // 1046\n                    tasks.afterQueue(new UnreportTask(this));                                                          // 1047\n                };                                                                                                     // 1048\n                                                                                                                       // 1049\n                Rejected.prototype.fail = function(context) {                                                          // 1050\n                    this.reported = true;                                                                              // 1051\n                    emitRejection('unhandledRejection', this);                                                         // 1052\n                    Promise.onFatalRejection(this, context === void 0 ? this.context : context);                       // 1053\n                };                                                                                                     // 1054\n                                                                                                                       // 1055\n                function ReportTask(rejection, context) {                                                              // 1056\n                    this.rejection = rejection;                                                                        // 1057\n                    this.context = context;                                                                            // 1058\n                }                                                                                                      // 1059\n                                                                                                                       // 1060\n                ReportTask.prototype.run = function() {                                                                // 1061\n                    if(!this.rejection.handled && !this.rejection.reported) {                                          // 1062\n                        this.rejection.reported = true;                                                                // 1063\n                        emitRejection('unhandledRejection', this.rejection) ||                                         // 1064\n                        Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);                         // 1065\n                    }                                                                                                  // 1066\n                };                                                                                                     // 1067\n                                                                                                                       // 1068\n                function UnreportTask(rejection) {                                                                     // 1069\n                    this.rejection = rejection;                                                                        // 1070\n                }                                                                                                      // 1071\n                                                                                                                       // 1072\n                UnreportTask.prototype.run = function() {                                                              // 1073\n                    if(this.rejection.reported) {                                                                      // 1074\n                        emitRejection('rejectionHandled', this.rejection) ||                                           // 1075\n                        Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);                                // 1076\n                    }                                                                                                  // 1077\n                };                                                                                                     // 1078\n                                                                                                                       // 1079\n                // Unhandled rejection hooks                                                                           // 1080\n                // By default, everything is a noop                                                                    // 1081\n                                                                                                                       // 1082\n                Promise.createContext                                                                                  // 1083\n                    = Promise.enterContext                                                                             // 1084\n                    = Promise.exitContext                                                                              // 1085\n                    = Promise.onPotentiallyUnhandledRejection                                                          // 1086\n                    = Promise.onPotentiallyUnhandledRejectionHandled                                                   // 1087\n                    = Promise.onFatalRejection                                                                         // 1088\n                    = noop;                                                                                            // 1089\n                                                                                                                       // 1090\n                // Errors and singletons                                                                               // 1091\n                                                                                                                       // 1092\n                var foreverPendingHandler = new Handler();                                                             // 1093\n                var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);                               // 1094\n                                                                                                                       // 1095\n                function cycle() {                                                                                     // 1096\n                    return new Rejected(new TypeError('Promise cycle'));                                               // 1097\n                }                                                                                                      // 1098\n                                                                                                                       // 1099\n                // Task runners                                                                                        // 1100\n                                                                                                                       // 1101\n                /**                                                                                                    // 1102\n                 * Run a single consumer                                                                               // 1103\n                 * @constructor                                                                                        // 1104\n                 */                                                                                                    // 1105\n                function ContinuationTask(continuation, handler) {                                                     // 1106\n                    this.continuation = continuation;                                                                  // 1107\n                    this.handler = handler;                                                                            // 1108\n                }                                                                                                      // 1109\n                                                                                                                       // 1110\n                ContinuationTask.prototype.run = function() {                                                          // 1111\n                    this.handler.join().when(this.continuation);                                                       // 1112\n                };                                                                                                     // 1113\n                                                                                                                       // 1114\n                /**                                                                                                    // 1115\n                 * Run a queue of progress handlers                                                                    // 1116\n                 * @constructor                                                                                        // 1117\n                 */                                                                                                    // 1118\n                function ProgressTask(value, handler) {                                                                // 1119\n                    this.handler = handler;                                                                            // 1120\n                    this.value = value;                                                                                // 1121\n                }                                                                                                      // 1122\n                                                                                                                       // 1123\n                ProgressTask.prototype.run = function() {                                                              // 1124\n                    var q = this.handler.consumers;                                                                    // 1125\n                    if(q === void 0) {                                                                                 // 1126\n                        return;                                                                                        // 1127\n                    }                                                                                                  // 1128\n                                                                                                                       // 1129\n                    for (var c, i = 0; i < q.length; ++i) {                                                            // 1130\n                        c = q[i];                                                                                      // 1131\n                        runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);                       // 1132\n                    }                                                                                                  // 1133\n                };                                                                                                     // 1134\n                                                                                                                       // 1135\n                /**                                                                                                    // 1136\n                 * Assimilate a thenable, sending it's value to resolver                                               // 1137\n                 * @param {function} then                                                                              // 1138\n                 * @param {object|function} thenable                                                                   // 1139\n                 * @param {object} resolver                                                                            // 1140\n                 * @constructor                                                                                        // 1141\n                 */                                                                                                    // 1142\n                function AssimilateTask(then, thenable, resolver) {                                                    // 1143\n                    this._then = then;                                                                                 // 1144\n                    this.thenable = thenable;                                                                          // 1145\n                    this.resolver = resolver;                                                                          // 1146\n                }                                                                                                      // 1147\n                                                                                                                       // 1148\n                AssimilateTask.prototype.run = function() {                                                            // 1149\n                    var h = this.resolver;                                                                             // 1150\n                    tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);                              // 1151\n                                                                                                                       // 1152\n                    function _resolve(x) { h.resolve(x); }                                                             // 1153\n                    function _reject(x)  { h.reject(x); }                                                              // 1154\n                    function _notify(x)  { h.notify(x); }                                                              // 1155\n                };                                                                                                     // 1156\n                                                                                                                       // 1157\n                function tryAssimilate(then, thenable, resolve, reject, notify) {                                      // 1158\n                    try {                                                                                              // 1159\n                        then.call(thenable, resolve, reject, notify);                                                  // 1160\n                    } catch (e) {                                                                                      // 1161\n                        reject(e);                                                                                     // 1162\n                    }                                                                                                  // 1163\n                }                                                                                                      // 1164\n                                                                                                                       // 1165\n                /**                                                                                                    // 1166\n                 * Fold a handler value with z                                                                         // 1167\n                 * @constructor                                                                                        // 1168\n                 */                                                                                                    // 1169\n                function Fold(f, z, c, to) {                                                                           // 1170\n                    this.f = f; this.z = z; this.c = c; this.to = to;                                                  // 1171\n                    this.resolver = failIfRejected;                                                                    // 1172\n                    this.receiver = this;                                                                              // 1173\n                }                                                                                                      // 1174\n                                                                                                                       // 1175\n                Fold.prototype.fulfilled = function(x) {                                                               // 1176\n                    this.f.call(this.c, this.z, x, this.to);                                                           // 1177\n                };                                                                                                     // 1178\n                                                                                                                       // 1179\n                Fold.prototype.rejected = function(x) {                                                                // 1180\n                    this.to.reject(x);                                                                                 // 1181\n                };                                                                                                     // 1182\n                                                                                                                       // 1183\n                Fold.prototype.progress = function(x) {                                                                // 1184\n                    this.to.notify(x);                                                                                 // 1185\n                };                                                                                                     // 1186\n                                                                                                                       // 1187\n                // Other helpers                                                                                       // 1188\n                                                                                                                       // 1189\n                /**                                                                                                    // 1190\n                 * @param {*} x                                                                                        // 1191\n                 * @returns {boolean} true iff x is a trusted Promise                                                  // 1192\n                 */                                                                                                    // 1193\n                function isPromise(x) {                                                                                // 1194\n                    return x instanceof Promise;                                                                       // 1195\n                }                                                                                                      // 1196\n                                                                                                                       // 1197\n                /**                                                                                                    // 1198\n                 * Test just enough to rule out primitives, in order to take faster                                    // 1199\n                 * paths in some code                                                                                  // 1200\n                 * @param {*} x                                                                                        // 1201\n                 * @returns {boolean} false iff x is guaranteed *not* to be a thenable                                 // 1202\n                 */                                                                                                    // 1203\n                function maybeThenable(x) {                                                                            // 1204\n                    return (typeof x === 'object' || typeof x === 'function') && x !== null;                           // 1205\n                }                                                                                                      // 1206\n                                                                                                                       // 1207\n                function runContinuation1(f, h, receiver, next) {                                                      // 1208\n                    if(typeof f !== 'function') {                                                                      // 1209\n                        return next.become(h);                                                                         // 1210\n                    }                                                                                                  // 1211\n                                                                                                                       // 1212\n                    Promise.enterContext(h);                                                                           // 1213\n                    tryCatchReject(f, h.value, receiver, next);                                                        // 1214\n                    Promise.exitContext();                                                                             // 1215\n                }                                                                                                      // 1216\n                                                                                                                       // 1217\n                function runContinuation3(f, x, h, receiver, next) {                                                   // 1218\n                    if(typeof f !== 'function') {                                                                      // 1219\n                        return next.become(h);                                                                         // 1220\n                    }                                                                                                  // 1221\n                                                                                                                       // 1222\n                    Promise.enterContext(h);                                                                           // 1223\n                    tryCatchReject3(f, x, h.value, receiver, next);                                                    // 1224\n                    Promise.exitContext();                                                                             // 1225\n                }                                                                                                      // 1226\n                                                                                                                       // 1227\n                /**                                                                                                    // 1228\n                 * @deprecated                                                                                         // 1229\n                 */                                                                                                    // 1230\n                function runNotify(f, x, h, receiver, next) {                                                          // 1231\n                    if(typeof f !== 'function') {                                                                      // 1232\n                        return next.notify(x);                                                                         // 1233\n                    }                                                                                                  // 1234\n                                                                                                                       // 1235\n                    Promise.enterContext(h);                                                                           // 1236\n                    tryCatchReturn(f, x, receiver, next);                                                              // 1237\n                    Promise.exitContext();                                                                             // 1238\n                }                                                                                                      // 1239\n                                                                                                                       // 1240\n                function tryCatch2(f, a, b) {                                                                          // 1241\n                    try {                                                                                              // 1242\n                        return f(a, b);                                                                                // 1243\n                    } catch(e) {                                                                                       // 1244\n                        return reject(e);                                                                              // 1245\n                    }                                                                                                  // 1246\n                }                                                                                                      // 1247\n                                                                                                                       // 1248\n                /**                                                                                                    // 1249\n                 * Return f.call(thisArg, x), or if it throws return a rejected promise for                            // 1250\n                 * the thrown exception                                                                                // 1251\n                 */                                                                                                    // 1252\n                function tryCatchReject(f, x, thisArg, next) {                                                         // 1253\n                    try {                                                                                              // 1254\n                        next.become(getHandler(f.call(thisArg, x)));                                                   // 1255\n                    } catch(e) {                                                                                       // 1256\n                        next.become(new Rejected(e));                                                                  // 1257\n                    }                                                                                                  // 1258\n                }                                                                                                      // 1259\n                                                                                                                       // 1260\n                /**                                                                                                    // 1261\n                 * Same as above, but includes the extra argument parameter.                                           // 1262\n                 */                                                                                                    // 1263\n                function tryCatchReject3(f, x, y, thisArg, next) {                                                     // 1264\n                    try {                                                                                              // 1265\n                        f.call(thisArg, x, y, next);                                                                   // 1266\n                    } catch(e) {                                                                                       // 1267\n                        next.become(new Rejected(e));                                                                  // 1268\n                    }                                                                                                  // 1269\n                }                                                                                                      // 1270\n                                                                                                                       // 1271\n                /**                                                                                                    // 1272\n                 * @deprecated                                                                                         // 1273\n                 * Return f.call(thisArg, x), or if it throws, *return* the exception                                  // 1274\n                 */                                                                                                    // 1275\n                function tryCatchReturn(f, x, thisArg, next) {                                                         // 1276\n                    try {                                                                                              // 1277\n                        next.notify(f.call(thisArg, x));                                                               // 1278\n                    } catch(e) {                                                                                       // 1279\n                        next.notify(e);                                                                                // 1280\n                    }                                                                                                  // 1281\n                }                                                                                                      // 1282\n                                                                                                                       // 1283\n                function inherit(Parent, Child) {                                                                      // 1284\n                    Child.prototype = objectCreate(Parent.prototype);                                                  // 1285\n                    Child.prototype.constructor = Child;                                                               // 1286\n                }                                                                                                      // 1287\n                                                                                                                       // 1288\n                function snd(x, y) {                                                                                   // 1289\n                    return y;                                                                                          // 1290\n                }                                                                                                      // 1291\n                                                                                                                       // 1292\n                function noop() {}                                                                                     // 1293\n                                                                                                                       // 1294\n                function initEmitRejection() {                                                                         // 1295\n                    /*global process, self, CustomEvent*/                                                              // 1296\n                    if(typeof process !== 'undefined' && process !== null                                              // 1297\n                        && typeof process.emit === 'function') {                                                       // 1298\n                        // Returning falsy here means to call the default                                              // 1299\n                        // onPotentiallyUnhandledRejection API.  This is safe even in                                  // 1300\n                        // browserify since process.emit always returns falsy in browserify:                           // 1301\n                        // https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46                // 1302\n                        return function(type, rejection) {                                                             // 1303\n                            return type === 'unhandledRejection'                                                       // 1304\n                                ? process.emit(type, rejection.value, rejection)                                       // 1305\n                                : process.emit(type, rejection);                                                       // 1306\n                        };                                                                                             // 1307\n                    } else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {                      // 1308\n                        return (function(noop, self, CustomEvent) {                                                    // 1309\n                            var hasCustomEvent = false;                                                                // 1310\n                            try {                                                                                      // 1311\n                                var ev = new CustomEvent('unhandledRejection');                                        // 1312\n                                hasCustomEvent = ev instanceof CustomEvent;                                            // 1313\n                            } catch (e) {}                                                                             // 1314\n                                                                                                                       // 1315\n                            return !hasCustomEvent ? noop : function(type, rejection) {                                // 1316\n                                var ev = new CustomEvent(type, {                                                       // 1317\n                                    detail: {                                                                          // 1318\n                                        reason: rejection.value,                                                       // 1319\n                                        key: rejection                                                                 // 1320\n                                    },                                                                                 // 1321\n                                    bubbles: false,                                                                    // 1322\n                                    cancelable: true                                                                   // 1323\n                                });                                                                                    // 1324\n                                                                                                                       // 1325\n                                return !self.dispatchEvent(ev);                                                        // 1326\n                            };                                                                                         // 1327\n                        }(noop, self, CustomEvent));                                                                   // 1328\n                    }                                                                                                  // 1329\n                                                                                                                       // 1330\n                    return noop;                                                                                       // 1331\n                }                                                                                                      // 1332\n                                                                                                                       // 1333\n                return Promise;                                                                                        // 1334\n            };                                                                                                         // 1335\n        });                                                                                                            // 1336\n    }(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));       // 1337\n                                                                                                                       // 1338\n},{}]},{},[1])                                                                                                         // 1339\n(1)                                                                                                                    // 1340\n});                                                                                                                    // 1341\n;if (typeof systemJSBootstrap !== 'undefined')                                                                         // 1342\n    systemJSBootstrap();                                                                                               // 1343\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/universe:modules/vendor/system.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * SystemJS v0.18.4                                                                                                    // 2\n */                                                                                                                    // 3\n(function() {                                                                                                          // 4\n    function bootstrap() {(function(__global) {                                                                        // 5\n                                                                                                                       // 6\n        var isWorker = typeof window == 'undefined' && typeof self != 'undefined' && typeof importScripts != 'undefined';\n        var isBrowser = typeof window != 'undefined' && typeof document != 'undefined';                                // 8\n        var isWindows = typeof process != 'undefined' && !!process.platform.match(/^win/);                             // 9\n                                                                                                                       // 10\n        if (!__global.console)                                                                                         // 11\n            __global.console = { assert: function() {} };                                                              // 12\n                                                                                                                       // 13\n        // IE8 support                                                                                                 // 14\n        var indexOf = Array.prototype.indexOf || function(item) {                                                      // 15\n                for (var i = 0, thisLen = this.length; i < thisLen; i++) {                                             // 16\n                    if (this[i] === item) {                                                                            // 17\n                        return i;                                                                                      // 18\n                    }                                                                                                  // 19\n                }                                                                                                      // 20\n                return -1;                                                                                             // 21\n            };                                                                                                         // 22\n                                                                                                                       // 23\n        var defineProperty;                                                                                            // 24\n        (function () {                                                                                                 // 25\n            try {                                                                                                      // 26\n                if (!!Object.defineProperty({}, 'a', {}))                                                              // 27\n                    defineProperty = Object.defineProperty;                                                            // 28\n            }                                                                                                          // 29\n            catch (e) {                                                                                                // 30\n                defineProperty = function(obj, prop, opt) {                                                            // 31\n                    try {                                                                                              // 32\n                        obj[prop] = opt.value || opt.get.call(obj);                                                    // 33\n                    }                                                                                                  // 34\n                    catch(e) {}                                                                                        // 35\n                }                                                                                                      // 36\n            }                                                                                                          // 37\n        })();                                                                                                          // 38\n                                                                                                                       // 39\n        function addToError(err, msg) {                                                                                // 40\n            var newErr;                                                                                                // 41\n            if (err instanceof Error) {                                                                                // 42\n                var newErr = new Error(err.message, err.fileName, err.lineNumber);                                     // 43\n                if (isBrowser) {                                                                                       // 44\n                    newErr.message = err.message + '\\n\\t' + msg;                                                       // 45\n                    newErr.stack = err.stack;                                                                          // 46\n                }                                                                                                      // 47\n                else {                                                                                                 // 48\n                    // node errors only look correct with the stack modified                                           // 49\n                    newErr.message = err.message;                                                                      // 50\n                    newErr.stack = err.stack + '\\n\\t' + msg;                                                           // 51\n                }                                                                                                      // 52\n            }                                                                                                          // 53\n            else {                                                                                                     // 54\n                newErr = err + '\\n\\t' + msg;                                                                           // 55\n            }                                                                                                          // 56\n                                                                                                                       // 57\n            return newErr;                                                                                             // 58\n        }                                                                                                              // 59\n                                                                                                                       // 60\n        function __eval(source, debugName, context) {                                                                  // 61\n            try {                                                                                                      // 62\n                new Function(source).call(context);                                                                    // 63\n            }                                                                                                          // 64\n            catch(e) {                                                                                                 // 65\n                throw addToError(e, 'Evaluating ' + debugName);                                                        // 66\n            }                                                                                                          // 67\n        }                                                                                                              // 68\n                                                                                                                       // 69\n        var baseURI;                                                                                                   // 70\n        // environent baseURI detection                                                                                // 71\n        if (typeof document != 'undefined' && document.getElementsByTagName) {                                         // 72\n            baseURI = document.baseURI;                                                                                // 73\n                                                                                                                       // 74\n            if (!baseURI) {                                                                                            // 75\n                var bases = document.getElementsByTagName('base');                                                     // 76\n                baseURI = bases[0] && bases[0].href || window.location.href;                                           // 77\n            }                                                                                                          // 78\n                                                                                                                       // 79\n            // sanitize out the hash and querystring                                                                   // 80\n            baseURI = baseURI.split('#')[0].split('?')[0];                                                             // 81\n            baseURI = baseURI.substr(0, baseURI.lastIndexOf('/') + 1);                                                 // 82\n        }                                                                                                              // 83\n        else if (typeof process != 'undefined' && process.cwd) {                                                       // 84\n            baseURI = 'file://' + (isWindows ? '/' : '') + process.cwd() + '/';                                        // 85\n            if (isWindows)                                                                                             // 86\n                baseURI = baseURI.replace(/\\\\/g, '/');                                                                 // 87\n        }                                                                                                              // 88\n        else if (typeof location != 'undefined') {                                                                     // 89\n            baseURI = __global.location.href;                                                                          // 90\n        }                                                                                                              // 91\n        else {                                                                                                         // 92\n            throw new TypeError('No environment baseURI');                                                             // 93\n        }                                                                                                              // 94\n                                                                                                                       // 95\n        var URL = __global.URLPolyfill || __global.URL;                                                                // 96\n        /*                                                                                                             // 97\n         *********************************************************************************************                 // 98\n                                                                                                                       // 99\n         Dynamic Module Loader Polyfill                                                                                // 100\n                                                                                                                       // 101\n         - Implemented exactly to the former 2014-08-24 ES6 Specification Draft Rev 27, Section 15                     // 102\n         http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#august_24_2014_draft_rev_27               // 103\n                                                                                                                       // 104\n         - Functions are commented with their spec numbers, with spec differences commented.                           // 105\n                                                                                                                       // 106\n         - Spec bugs are commented in this code with links.                                                            // 107\n                                                                                                                       // 108\n         - Abstract functions have been combined where possible, and their associated functions                        // 109\n         commented.                                                                                                    // 110\n                                                                                                                       // 111\n         - Realm implementation is entirely omitted.                                                                   // 112\n                                                                                                                       // 113\n         *********************************************************************************************                 // 114\n         */                                                                                                            // 115\n                                                                                                                       // 116\n        function Module() {}                                                                                           // 117\n        function Loader(options) {                                                                                     // 118\n            this._loader = {                                                                                           // 119\n                loaderObj: this,                                                                                       // 120\n                loads: [],                                                                                             // 121\n                modules: {},                                                                                           // 122\n                importPromises: {},                                                                                    // 123\n                moduleRecords: {}                                                                                      // 124\n            };                                                                                                         // 125\n                                                                                                                       // 126\n            // 26.3.3.6                                                                                                // 127\n            defineProperty(this, 'global', {                                                                           // 128\n                get: function() {                                                                                      // 129\n                    return __global;                                                                                   // 130\n                }                                                                                                      // 131\n            });                                                                                                        // 132\n                                                                                                                       // 133\n            // 26.3.3.13 realm not implemented                                                                         // 134\n        }                                                                                                              // 135\n                                                                                                                       // 136\n        (function() {                                                                                                  // 137\n                                                                                                                       // 138\n// Some Helpers                                                                                                        // 139\n                                                                                                                       // 140\n// logs a linkset snapshot for debugging                                                                               // 141\n            /* function snapshot(loader) {                                                                             // 142\n             console.log('---Snapshot---');                                                                            // 143\n             for (var i = 0; i < loader.loads.length; i++) {                                                           // 144\n             var load = loader.loads[i];                                                                               // 145\n             var linkSetLog = '  ' + load.name + ' (' + load.status + '): ';                                           // 146\n                                                                                                                       // 147\n             for (var j = 0; j < load.linkSets.length; j++) {                                                          // 148\n             linkSetLog += '{' + logloads(load.linkSets[j].loads) + '} ';                                              // 149\n             }                                                                                                         // 150\n             console.log(linkSetLog);                                                                                  // 151\n             }                                                                                                         // 152\n             console.log('');                                                                                          // 153\n             }                                                                                                         // 154\n             function logloads(loads) {                                                                                // 155\n             var log = '';                                                                                             // 156\n             for (var k = 0; k < loads.length; k++)                                                                    // 157\n             log += loads[k].name + (k != loads.length - 1 ? ' ' : '');                                                // 158\n             return log;                                                                                               // 159\n             } */                                                                                                      // 160\n                                                                                                                       // 161\n                                                                                                                       // 162\n            /* function checkInvariants() {                                                                            // 163\n             // see https://bugs.ecmascript.org/show_bug.cgi?id=2603#c1                                                // 164\n                                                                                                                       // 165\n             var loads = System._loader.loads;                                                                         // 166\n             var linkSets = [];                                                                                        // 167\n                                                                                                                       // 168\n             for (var i = 0; i < loads.length; i++) {                                                                  // 169\n             var load = loads[i];                                                                                      // 170\n             console.assert(load.status == 'loading' || load.status == 'loaded', 'Each load is loading or loaded');    // 171\n                                                                                                                       // 172\n             for (var j = 0; j < load.linkSets.length; j++) {                                                          // 173\n             var linkSet = load.linkSets[j];                                                                           // 174\n                                                                                                                       // 175\n             for (var k = 0; k < linkSet.loads.length; k++)                                                            // 176\n             console.assert(loads.indexOf(linkSet.loads[k]) != -1, 'linkSet loads are a subset of loader loads');      // 177\n                                                                                                                       // 178\n             if (linkSets.indexOf(linkSet) == -1)                                                                      // 179\n             linkSets.push(linkSet);                                                                                   // 180\n             }                                                                                                         // 181\n             }                                                                                                         // 182\n                                                                                                                       // 183\n             for (var i = 0; i < loads.length; i++) {                                                                  // 184\n             var load = loads[i];                                                                                      // 185\n             for (var j = 0; j < linkSets.length; j++) {                                                               // 186\n             var linkSet = linkSets[j];                                                                                // 187\n                                                                                                                       // 188\n             if (linkSet.loads.indexOf(load) != -1)                                                                    // 189\n             console.assert(load.linkSets.indexOf(linkSet) != -1, 'linkSet contains load -> load contains linkSet');   // 190\n                                                                                                                       // 191\n             if (load.linkSets.indexOf(linkSet) != -1)                                                                 // 192\n             console.assert(linkSet.loads.indexOf(load) != -1, 'load contains linkSet -> linkSet contains load');      // 193\n             }                                                                                                         // 194\n             }                                                                                                         // 195\n                                                                                                                       // 196\n             for (var i = 0; i < linkSets.length; i++) {                                                               // 197\n             var linkSet = linkSets[i];                                                                                // 198\n             for (var j = 0; j < linkSet.loads.length; j++) {                                                          // 199\n             var load = linkSet.loads[j];                                                                              // 200\n                                                                                                                       // 201\n             for (var k = 0; k < load.dependencies.length; k++) {                                                      // 202\n             var depName = load.dependencies[k].value;                                                                 // 203\n             var depLoad;                                                                                              // 204\n             for (var l = 0; l < loads.length; l++) {                                                                  // 205\n             if (loads[l].name != depName)                                                                             // 206\n             continue;                                                                                                 // 207\n             depLoad = loads[l];                                                                                       // 208\n             break;                                                                                                    // 209\n             }                                                                                                         // 210\n                                                                                                                       // 211\n             // loading records are allowed not to have their dependencies yet                                         // 212\n             // if (load.status != 'loading')                                                                          // 213\n             //  console.assert(depLoad, 'depLoad found');                                                             // 214\n                                                                                                                       // 215\n             // console.assert(linkSet.loads.indexOf(depLoad) != -1, 'linkset contains all dependencies');             // 216\n             }                                                                                                         // 217\n             }                                                                                                         // 218\n             }                                                                                                         // 219\n             } */                                                                                                      // 220\n                                                                                                                       // 221\n            // 15.2.3 - Runtime Semantics: Loader State                                                                // 222\n                                                                                                                       // 223\n            // 15.2.3.11                                                                                               // 224\n            function createLoaderLoad(object) {                                                                        // 225\n                return {                                                                                               // 226\n                    // modules is an object for ES5 implementation                                                     // 227\n                    modules: {},                                                                                       // 228\n                    loads: [],                                                                                         // 229\n                    loaderObj: object                                                                                  // 230\n                };                                                                                                     // 231\n            }                                                                                                          // 232\n                                                                                                                       // 233\n            // 15.2.3.2 Load Records and LoadRequest Objects                                                           // 234\n                                                                                                                       // 235\n            // 15.2.3.2.1                                                                                              // 236\n            function createLoad(name) {                                                                                // 237\n                return {                                                                                               // 238\n                    status: 'loading',                                                                                 // 239\n                    name: name,                                                                                        // 240\n                    linkSets: [],                                                                                      // 241\n                    dependencies: [],                                                                                  // 242\n                    metadata: {}                                                                                       // 243\n                };                                                                                                     // 244\n            }                                                                                                          // 245\n                                                                                                                       // 246\n            // 15.2.3.2.2 createLoadRequestObject, absorbed into calling functions                                     // 247\n                                                                                                                       // 248\n            // 15.2.4                                                                                                  // 249\n                                                                                                                       // 250\n            // 15.2.4.1                                                                                                // 251\n            function loadModule(loader, name, options) {                                                               // 252\n                return new Promise(asyncStartLoadPartwayThrough({                                                      // 253\n                    step: options.address ? 'fetch' : 'locate',                                                        // 254\n                    loader: loader,                                                                                    // 255\n                    moduleName: name,                                                                                  // 256\n                    // allow metadata for import https://bugs.ecmascript.org/show_bug.cgi?id=3091                      // 257\n                    moduleMetadata: options && options.metadata || {},                                                 // 258\n                    moduleSource: options.source,                                                                      // 259\n                    moduleAddress: options.address                                                                     // 260\n                }));                                                                                                   // 261\n            }                                                                                                          // 262\n                                                                                                                       // 263\n            // 15.2.4.2                                                                                                // 264\n            function requestLoad(loader, request, refererName, refererAddress) {                                       // 265\n                // 15.2.4.2.1 CallNormalize                                                                            // 266\n                return new Promise(function(resolve, reject) {                                                         // 267\n                    resolve(loader.loaderObj.normalize(request, refererName, refererAddress));                         // 268\n                })                                                                                                     // 269\n                    // 15.2.4.2.2 GetOrCreateLoad                                                                      // 270\n                    .then(function(name) {                                                                             // 271\n                        var load;                                                                                      // 272\n                        if (loader.modules[name]) {                                                                    // 273\n                            load = createLoad(name);                                                                   // 274\n                            load.status = 'linked';                                                                    // 275\n                            // https://bugs.ecmascript.org/show_bug.cgi?id=2795                                        // 276\n                            load.module = loader.modules[name];                                                        // 277\n                            return load;                                                                               // 278\n                        }                                                                                              // 279\n                                                                                                                       // 280\n                        for (var i = 0, l = loader.loads.length; i < l; i++) {                                         // 281\n                            load = loader.loads[i];                                                                    // 282\n                            if (load.name != name)                                                                     // 283\n                                continue;                                                                              // 284\n                            console.assert(load.status == 'loading' || load.status == 'loaded', 'loading or loaded');  // 285\n                            return load;                                                                               // 286\n                        }                                                                                              // 287\n                                                                                                                       // 288\n                        load = createLoad(name);                                                                       // 289\n                        loader.loads.push(load);                                                                       // 290\n                                                                                                                       // 291\n                        proceedToLocate(loader, load);                                                                 // 292\n                                                                                                                       // 293\n                        return load;                                                                                   // 294\n                    });                                                                                                // 295\n            }                                                                                                          // 296\n                                                                                                                       // 297\n            // 15.2.4.3                                                                                                // 298\n            function proceedToLocate(loader, load) {                                                                   // 299\n                proceedToFetch(loader, load,                                                                           // 300\n                    Promise.resolve()                                                                                  // 301\n                        // 15.2.4.3.1 CallLocate                                                                       // 302\n                        .then(function() {                                                                             // 303\n                            return loader.loaderObj.locate({ name: load.name, metadata: load.metadata });              // 304\n                        })                                                                                             // 305\n                );                                                                                                     // 306\n            }                                                                                                          // 307\n                                                                                                                       // 308\n            // 15.2.4.4                                                                                                // 309\n            function proceedToFetch(loader, load, p) {                                                                 // 310\n                proceedToTranslate(loader, load,                                                                       // 311\n                    p                                                                                                  // 312\n                        // 15.2.4.4.1 CallFetch                                                                        // 313\n                        .then(function(address) {                                                                      // 314\n                            // adjusted, see https://bugs.ecmascript.org/show_bug.cgi?id=2602                          // 315\n                            if (load.status != 'loading')                                                              // 316\n                                return;                                                                                // 317\n                            load.address = address;                                                                    // 318\n                                                                                                                       // 319\n                            return loader.loaderObj.fetch({ name: load.name, metadata: load.metadata, address: address });\n                        })                                                                                             // 321\n                );                                                                                                     // 322\n            }                                                                                                          // 323\n                                                                                                                       // 324\n            var anonCnt = 0;                                                                                           // 325\n                                                                                                                       // 326\n            // 15.2.4.5                                                                                                // 327\n            function proceedToTranslate(loader, load, p) {                                                             // 328\n                p                                                                                                      // 329\n                    // 15.2.4.5.1 CallTranslate                                                                        // 330\n                    .then(function(source) {                                                                           // 331\n                        if (load.status != 'loading')                                                                  // 332\n                            return;                                                                                    // 333\n                                                                                                                       // 334\n                        return Promise.resolve(loader.loaderObj.translate({ name: load.name, metadata: load.metadata, address: load.address, source: source }))\n                                                                                                                       // 336\n                            // 15.2.4.5.2 CallInstantiate                                                              // 337\n                            .then(function(source) {                                                                   // 338\n                                load.source = source;                                                                  // 339\n                                return loader.loaderObj.instantiate({ name: load.name, metadata: load.metadata, address: load.address, source: source });\n                            })                                                                                         // 341\n                                                                                                                       // 342\n                            // 15.2.4.5.3 InstantiateSucceeded                                                         // 343\n                            .then(function(instantiateResult) {                                                        // 344\n                                if (instantiateResult === undefined) {                                                 // 345\n                                    load.address = load.address || '<Anonymous Module ' + ++anonCnt + '>';             // 346\n                                                                                                                       // 347\n                                    // instead of load.kind, use load.isDeclarative                                    // 348\n                                    load.isDeclarative = true;                                                         // 349\n                                    return transpile.call(loader.loaderObj, load)                                      // 350\n                                        .then(function(transpiled) {                                                   // 351\n                                            // Hijack System.register to set declare function                          // 352\n                                            var curSystem = __global.System;                                           // 353\n                                            var curRegister = curSystem.register;                                      // 354\n                                            curSystem.register = function(name, deps, declare) {                       // 355\n                                                if (typeof name != 'string') {                                         // 356\n                                                    declare = deps;                                                    // 357\n                                                    deps = name;                                                       // 358\n                                                }                                                                      // 359\n                                                // store the registered declaration as load.declare                    // 360\n                                                // store the deps as load.deps                                         // 361\n                                                load.declare = declare;                                                // 362\n                                                load.depsList = deps;                                                  // 363\n                                            }                                                                          // 364\n                                            // empty {} context is closest to undefined 'this' we can get              // 365\n                                            __eval(transpiled, load.address, {});                                      // 366\n                                            curSystem.register = curRegister;                                          // 367\n                                        });                                                                            // 368\n                                }                                                                                      // 369\n                                else if (typeof instantiateResult == 'object') {                                       // 370\n                                    load.depsList = instantiateResult.deps || [];                                      // 371\n                                    load.execute = instantiateResult.execute;                                          // 372\n                                    load.isDeclarative = false;                                                        // 373\n                                }                                                                                      // 374\n                                else                                                                                   // 375\n                                    throw TypeError('Invalid instantiate return value');                               // 376\n                            })                                                                                         // 377\n                            // 15.2.4.6 ProcessLoadDependencies                                                        // 378\n                            .then(function() {                                                                         // 379\n                                load.dependencies = [];                                                                // 380\n                                var depsList = load.depsList;                                                          // 381\n                                                                                                                       // 382\n                                var loadPromises = [];                                                                 // 383\n                                for (var i = 0, l = depsList.length; i < l; i++) (function(request, index) {           // 384\n                                    loadPromises.push(                                                                 // 385\n                                        requestLoad(loader, request, load.name, load.address)                          // 386\n                                                                                                                       // 387\n                                            // 15.2.4.6.1 AddDependencyLoad (load is parentLoad)                       // 388\n                                            .then(function(depLoad) {                                                  // 389\n                                                                                                                       // 390\n                                                // adjusted from spec to maintain dependency order                     // 391\n                                                // this is due to the System.register internal implementation needs    // 392\n                                                load.dependencies[index] = {                                           // 393\n                                                    key: request,                                                      // 394\n                                                    value: depLoad.name                                                // 395\n                                                };                                                                     // 396\n                                                                                                                       // 397\n                                                if (depLoad.status != 'linked') {                                      // 398\n                                                    var linkSets = load.linkSets.concat([]);                           // 399\n                                                    for (var i = 0, l = linkSets.length; i < l; i++)                   // 400\n                                                        addLoadToLinkSet(linkSets[i], depLoad);                        // 401\n                                                }                                                                      // 402\n                                                                                                                       // 403\n                                                // console.log('AddDependencyLoad ' + depLoad.name + ' for ' + load.name);\n                                                // snapshot(loader);                                                   // 405\n                                            })                                                                         // 406\n                                    );                                                                                 // 407\n                                })(depsList[i], i);                                                                    // 408\n                                                                                                                       // 409\n                                return Promise.all(loadPromises);                                                      // 410\n                            })                                                                                         // 411\n                                                                                                                       // 412\n                            // 15.2.4.6.2 LoadSucceeded                                                                // 413\n                            .then(function() {                                                                         // 414\n                                // console.log('LoadSucceeded ' + load.name);                                          // 415\n                                // snapshot(loader);                                                                   // 416\n                                                                                                                       // 417\n                                console.assert(load.status == 'loading', 'is loading');                                // 418\n                                                                                                                       // 419\n                                load.status = 'loaded';                                                                // 420\n                                                                                                                       // 421\n                                var linkSets = load.linkSets.concat([]);                                               // 422\n                                for (var i = 0, l = linkSets.length; i < l; i++)                                       // 423\n                                    updateLinkSetOnLoad(linkSets[i], load);                                            // 424\n                            });                                                                                        // 425\n                    })                                                                                                 // 426\n                    // 15.2.4.5.4 LoadFailed                                                                           // 427\n                    ['catch'](function(exc) {                                                                          // 428\n                    load.status = 'failed';                                                                            // 429\n                    load.exception = exc;                                                                              // 430\n                                                                                                                       // 431\n                    var linkSets = load.linkSets.concat([]);                                                           // 432\n                    for (var i = 0, l = linkSets.length; i < l; i++) {                                                 // 433\n                        linkSetFailed(linkSets[i], load, exc);                                                         // 434\n                    }                                                                                                  // 435\n                                                                                                                       // 436\n                    console.assert(load.linkSets.length == 0, 'linkSets not removed');                                 // 437\n                });                                                                                                    // 438\n            }                                                                                                          // 439\n                                                                                                                       // 440\n            // 15.2.4.7 PromiseOfStartLoadPartwayThrough absorbed into calling functions                               // 441\n                                                                                                                       // 442\n            // 15.2.4.7.1                                                                                              // 443\n            function asyncStartLoadPartwayThrough(stepState) {                                                         // 444\n                return function(resolve, reject) {                                                                     // 445\n                    var loader = stepState.loader;                                                                     // 446\n                    var name = stepState.moduleName;                                                                   // 447\n                    var step = stepState.step;                                                                         // 448\n                                                                                                                       // 449\n                    if (loader.modules[name])                                                                          // 450\n                        throw new TypeError('\"' + name + '\" already exists in the module table');                      // 451\n                                                                                                                       // 452\n                    // adjusted to pick up existing loads                                                              // 453\n                    var existingLoad;                                                                                  // 454\n                    for (var i = 0, l = loader.loads.length; i < l; i++) {                                             // 455\n                        if (loader.loads[i].name == name) {                                                            // 456\n                            existingLoad = loader.loads[i];                                                            // 457\n                                                                                                                       // 458\n                            if(step == 'translate' && !existingLoad.source) {                                          // 459\n                                existingLoad.address = stepState.moduleAddress;                                        // 460\n                                proceedToTranslate(loader, existingLoad, Promise.resolve(stepState.moduleSource));     // 461\n                            }                                                                                          // 462\n                                                                                                                       // 463\n                            return existingLoad.linkSets[0].done.then(function() {                                     // 464\n                                resolve(existingLoad);                                                                 // 465\n                            });                                                                                        // 466\n                        }                                                                                              // 467\n                    }                                                                                                  // 468\n                                                                                                                       // 469\n                    var load = createLoad(name);                                                                       // 470\n                                                                                                                       // 471\n                    load.metadata = stepState.moduleMetadata;                                                          // 472\n                                                                                                                       // 473\n                    var linkSet = createLinkSet(loader, load);                                                         // 474\n                                                                                                                       // 475\n                    loader.loads.push(load);                                                                           // 476\n                                                                                                                       // 477\n                    resolve(linkSet.done);                                                                             // 478\n                                                                                                                       // 479\n                    if (step == 'locate')                                                                              // 480\n                        proceedToLocate(loader, load);                                                                 // 481\n                                                                                                                       // 482\n                    else if (step == 'fetch')                                                                          // 483\n                        proceedToFetch(loader, load, Promise.resolve(stepState.moduleAddress));                        // 484\n                                                                                                                       // 485\n                    else {                                                                                             // 486\n                        console.assert(step == 'translate', 'translate step');                                         // 487\n                        load.address = stepState.moduleAddress;                                                        // 488\n                        proceedToTranslate(loader, load, Promise.resolve(stepState.moduleSource));                     // 489\n                    }                                                                                                  // 490\n                }                                                                                                      // 491\n            }                                                                                                          // 492\n                                                                                                                       // 493\n            // Declarative linking functions run through alternative implementation:                                   // 494\n            // 15.2.5.1.1 CreateModuleLinkageRecord not implemented                                                    // 495\n            // 15.2.5.1.2 LookupExport not implemented                                                                 // 496\n            // 15.2.5.1.3 LookupModuleDependency not implemented                                                       // 497\n                                                                                                                       // 498\n            // 15.2.5.2.1                                                                                              // 499\n            function createLinkSet(loader, startingLoad) {                                                             // 500\n                var linkSet = {                                                                                        // 501\n                    loader: loader,                                                                                    // 502\n                    loads: [],                                                                                         // 503\n                    startingLoad: startingLoad, // added see spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995 // 504\n                    loadingCount: 0                                                                                    // 505\n                };                                                                                                     // 506\n                linkSet.done = new Promise(function(resolve, reject) {                                                 // 507\n                    linkSet.resolve = resolve;                                                                         // 508\n                    linkSet.reject = reject;                                                                           // 509\n                });                                                                                                    // 510\n                addLoadToLinkSet(linkSet, startingLoad);                                                               // 511\n                return linkSet;                                                                                        // 512\n            }                                                                                                          // 513\n            // 15.2.5.2.2                                                                                              // 514\n            function addLoadToLinkSet(linkSet, load) {                                                                 // 515\n                console.assert(load.status == 'loading' || load.status == 'loaded', 'loading or loaded on link set');  // 516\n                                                                                                                       // 517\n                for (var i = 0, l = linkSet.loads.length; i < l; i++)                                                  // 518\n                    if (linkSet.loads[i] == load)                                                                      // 519\n                        return;                                                                                        // 520\n                                                                                                                       // 521\n                linkSet.loads.push(load);                                                                              // 522\n                load.linkSets.push(linkSet);                                                                           // 523\n                                                                                                                       // 524\n                // adjustment, see https://bugs.ecmascript.org/show_bug.cgi?id=2603                                    // 525\n                if (load.status != 'loaded') {                                                                         // 526\n                    linkSet.loadingCount++;                                                                            // 527\n                }                                                                                                      // 528\n                                                                                                                       // 529\n                var loader = linkSet.loader;                                                                           // 530\n                                                                                                                       // 531\n                for (var i = 0, l = load.dependencies.length; i < l; i++) {                                            // 532\n                    var name = load.dependencies[i].value;                                                             // 533\n                                                                                                                       // 534\n                    if (loader.modules[name])                                                                          // 535\n                        continue;                                                                                      // 536\n                                                                                                                       // 537\n                    for (var j = 0, d = loader.loads.length; j < d; j++) {                                             // 538\n                        if (loader.loads[j].name != name)                                                              // 539\n                            continue;                                                                                  // 540\n                                                                                                                       // 541\n                        addLoadToLinkSet(linkSet, loader.loads[j]);                                                    // 542\n                        break;                                                                                         // 543\n                    }                                                                                                  // 544\n                }                                                                                                      // 545\n                // console.log('add to linkset ' + load.name);                                                         // 546\n                // snapshot(linkSet.loader);                                                                           // 547\n            }                                                                                                          // 548\n                                                                                                                       // 549\n            // linking errors can be generic or load-specific                                                          // 550\n            // this is necessary for debugging info                                                                    // 551\n            function doLink(linkSet) {                                                                                 // 552\n                var error = false;                                                                                     // 553\n                try {                                                                                                  // 554\n                    link(linkSet, function(load, exc) {                                                                // 555\n                        linkSetFailed(linkSet, load, exc);                                                             // 556\n                        error = true;                                                                                  // 557\n                    });                                                                                                // 558\n                }                                                                                                      // 559\n                catch(e) {                                                                                             // 560\n                    linkSetFailed(linkSet, null, e);                                                                   // 561\n                    error = true;                                                                                      // 562\n                }                                                                                                      // 563\n                return error;                                                                                          // 564\n            }                                                                                                          // 565\n                                                                                                                       // 566\n            // 15.2.5.2.3                                                                                              // 567\n            function updateLinkSetOnLoad(linkSet, load) {                                                              // 568\n                // console.log('update linkset on load ' + load.name);                                                 // 569\n                // snapshot(linkSet.loader);                                                                           // 570\n                                                                                                                       // 571\n                console.assert(load.status == 'loaded' || load.status == 'linked', 'loaded or linked');                // 572\n                                                                                                                       // 573\n                linkSet.loadingCount--;                                                                                // 574\n                                                                                                                       // 575\n                if (linkSet.loadingCount > 0)                                                                          // 576\n                    return;                                                                                            // 577\n                                                                                                                       // 578\n                // adjusted for spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995                              // 579\n                var startingLoad = linkSet.startingLoad;                                                               // 580\n                                                                                                                       // 581\n                // non-executing link variation for loader tracing                                                     // 582\n                // on the server. Not in spec.                                                                         // 583\n                /***/                                                                                                  // 584\n                if (linkSet.loader.loaderObj.execute === false) {                                                      // 585\n                    var loads = [].concat(linkSet.loads);                                                              // 586\n                    for (var i = 0, l = loads.length; i < l; i++) {                                                    // 587\n                        var load = loads[i];                                                                           // 588\n                        load.module = !load.isDeclarative ? {                                                          // 589\n                            module: _newModule({})                                                                     // 590\n                        } : {                                                                                          // 591\n                            name: load.name,                                                                           // 592\n                            module: _newModule({}),                                                                    // 593\n                            evaluated: true                                                                            // 594\n                        };                                                                                             // 595\n                        load.status = 'linked';                                                                        // 596\n                        finishLoad(linkSet.loader, load);                                                              // 597\n                    }                                                                                                  // 598\n                    return linkSet.resolve(startingLoad);                                                              // 599\n                }                                                                                                      // 600\n                /***/                                                                                                  // 601\n                                                                                                                       // 602\n                var abrupt = doLink(linkSet);                                                                          // 603\n                                                                                                                       // 604\n                if (abrupt)                                                                                            // 605\n                    return;                                                                                            // 606\n                                                                                                                       // 607\n                console.assert(linkSet.loads.length == 0, 'loads cleared');                                            // 608\n                                                                                                                       // 609\n                linkSet.resolve(startingLoad);                                                                         // 610\n            }                                                                                                          // 611\n                                                                                                                       // 612\n            // 15.2.5.2.4                                                                                              // 613\n            function linkSetFailed(linkSet, load, exc) {                                                               // 614\n                var loader = linkSet.loader;                                                                           // 615\n                                                                                                                       // 616\n                if (load) {                                                                                            // 617\n                    if (load && linkSet.loads[0].name != load.name)                                                    // 618\n                        exc = addToError(exc, 'Error loading ' + load.name + ' from ' + linkSet.loads[0].name);        // 619\n                                                                                                                       // 620\n                    if (load)                                                                                          // 621\n                        exc = addToError(exc, 'Error loading ' + load.name);                                           // 622\n                }                                                                                                      // 623\n                else {                                                                                                 // 624\n                    exc = addToError(exc, 'Error linking ' + linkSet.loads[0].name);                                   // 625\n                }                                                                                                      // 626\n                                                                                                                       // 627\n                                                                                                                       // 628\n                var loads = linkSet.loads.concat([]);                                                                  // 629\n                for (var i = 0, l = loads.length; i < l; i++) {                                                        // 630\n                    var load = loads[i];                                                                               // 631\n                                                                                                                       // 632\n                    // store all failed load records                                                                   // 633\n                    loader.loaderObj.failed = loader.loaderObj.failed || [];                                           // 634\n                    if (indexOf.call(loader.loaderObj.failed, load) == -1)                                             // 635\n                        loader.loaderObj.failed.push(load);                                                            // 636\n                                                                                                                       // 637\n                    var linkIndex = indexOf.call(load.linkSets, linkSet);                                              // 638\n                    console.assert(linkIndex != -1, 'link not present');                                               // 639\n                    load.linkSets.splice(linkIndex, 1);                                                                // 640\n                    if (load.linkSets.length == 0) {                                                                   // 641\n                        var globalLoadsIndex = indexOf.call(linkSet.loader.loads, load);                               // 642\n                        if (globalLoadsIndex != -1)                                                                    // 643\n                            linkSet.loader.loads.splice(globalLoadsIndex, 1);                                          // 644\n                    }                                                                                                  // 645\n                }                                                                                                      // 646\n                linkSet.reject(exc);                                                                                   // 647\n            }                                                                                                          // 648\n                                                                                                                       // 649\n            // 15.2.5.2.5                                                                                              // 650\n            function finishLoad(loader, load) {                                                                        // 651\n                // add to global trace if tracing                                                                      // 652\n                if (loader.loaderObj.trace) {                                                                          // 653\n                    if (!loader.loaderObj.loads)                                                                       // 654\n                        loader.loaderObj.loads = {};                                                                   // 655\n                    var depMap = {};                                                                                   // 656\n                    load.dependencies.forEach(function(dep) {                                                          // 657\n                        depMap[dep.key] = dep.value;                                                                   // 658\n                    });                                                                                                // 659\n                    loader.loaderObj.loads[load.name] = {                                                              // 660\n                        name: load.name,                                                                               // 661\n                        deps: load.dependencies.map(function(dep){ return dep.key }),                                  // 662\n                        depMap: depMap,                                                                                // 663\n                        address: load.address,                                                                         // 664\n                        metadata: load.metadata,                                                                       // 665\n                        source: load.source,                                                                           // 666\n                        kind: load.isDeclarative ? 'declarative' : 'dynamic'                                           // 667\n                    };                                                                                                 // 668\n                }                                                                                                      // 669\n                // if not anonymous, add to the module table                                                           // 670\n                if (load.name) {                                                                                       // 671\n                    console.assert(!loader.modules[load.name], 'load not in module table');                            // 672\n                    loader.modules[load.name] = load.module;                                                           // 673\n                }                                                                                                      // 674\n                var loadIndex = indexOf.call(loader.loads, load);                                                      // 675\n                if (loadIndex != -1)                                                                                   // 676\n                    loader.loads.splice(loadIndex, 1);                                                                 // 677\n                for (var i = 0, l = load.linkSets.length; i < l; i++) {                                                // 678\n                    loadIndex = indexOf.call(load.linkSets[i].loads, load);                                            // 679\n                    if (loadIndex != -1)                                                                               // 680\n                        load.linkSets[i].loads.splice(loadIndex, 1);                                                   // 681\n                }                                                                                                      // 682\n                load.linkSets.splice(0, load.linkSets.length);                                                         // 683\n            }                                                                                                          // 684\n                                                                                                                       // 685\n            function doDynamicExecute(linkSet, load, linkError) {                                                      // 686\n                try {                                                                                                  // 687\n                    var module = load.execute();                                                                       // 688\n                }                                                                                                      // 689\n                catch(e) {                                                                                             // 690\n                    linkError(load, e);                                                                                // 691\n                    return;                                                                                            // 692\n                }                                                                                                      // 693\n                if (!module || !(module instanceof Module))                                                            // 694\n                    linkError(load, new TypeError('Execution must define a Module instance'));                         // 695\n                else                                                                                                   // 696\n                    return module;                                                                                     // 697\n            }                                                                                                          // 698\n                                                                                                                       // 699\n            // 26.3 Loader                                                                                             // 700\n                                                                                                                       // 701\n            // 26.3.1.1                                                                                                // 702\n            // defined at top                                                                                          // 703\n                                                                                                                       // 704\n            // importPromises adds ability to import a module twice without error - https://bugs.ecmascript.org/show_bug.cgi?id=2601\n            function createImportPromise(loader, name, promise) {                                                      // 706\n                var importPromises = loader._loader.importPromises;                                                    // 707\n                return importPromises[name] = promise.then(function(m) {                                               // 708\n                    importPromises[name] = undefined;                                                                  // 709\n                    return m;                                                                                          // 710\n                }, function(e) {                                                                                       // 711\n                    importPromises[name] = undefined;                                                                  // 712\n                    throw e;                                                                                           // 713\n                });                                                                                                    // 714\n            }                                                                                                          // 715\n                                                                                                                       // 716\n            Loader.prototype = {                                                                                       // 717\n                // 26.3.3.1                                                                                            // 718\n                constructor: Loader,                                                                                   // 719\n                // 26.3.3.2                                                                                            // 720\n                define: function(name, source, options) {                                                              // 721\n                    // check if already defined                                                                        // 722\n                    if (this._loader.importPromises[name])                                                             // 723\n                        throw new TypeError('Module is already loading.');                                             // 724\n                    return createImportPromise(this, name, new Promise(asyncStartLoadPartwayThrough({                  // 725\n                        step: 'translate',                                                                             // 726\n                        loader: this._loader,                                                                          // 727\n                        moduleName: name,                                                                              // 728\n                        moduleMetadata: options && options.metadata || {},                                             // 729\n                        moduleSource: source,                                                                          // 730\n                        moduleAddress: options && options.address                                                      // 731\n                    })));                                                                                              // 732\n                },                                                                                                     // 733\n                // 26.3.3.3                                                                                            // 734\n                'delete': function(name) {                                                                             // 735\n                    var loader = this._loader;                                                                         // 736\n                    delete loader.importPromises[name];                                                                // 737\n                    delete loader.moduleRecords[name];                                                                 // 738\n                    return loader.modules[name] ? delete loader.modules[name] : false;                                 // 739\n                },                                                                                                     // 740\n                // 26.3.3.4 entries not implemented                                                                    // 741\n                // 26.3.3.5                                                                                            // 742\n                get: function(key) {                                                                                   // 743\n                    if (!this._loader.modules[key])                                                                    // 744\n                        return;                                                                                        // 745\n                    doEnsureEvaluated(this._loader.modules[key], [], this);                                            // 746\n                    return this._loader.modules[key].module;                                                           // 747\n                },                                                                                                     // 748\n                // 26.3.3.7                                                                                            // 749\n                has: function(name) {                                                                                  // 750\n                    return !!this._loader.modules[name];                                                               // 751\n                },                                                                                                     // 752\n                // 26.3.3.8                                                                                            // 753\n                'import': function(name, parentName, parentAddress) {                                                  // 754\n                    if (typeof parentName == 'object')                                                                 // 755\n                        parentName = parentName.name;                                                                  // 756\n                                                                                                                       // 757\n                    // run normalize first                                                                             // 758\n                    var loaderObj = this;                                                                              // 759\n                                                                                                                       // 760\n                    // added, see https://bugs.ecmascript.org/show_bug.cgi?id=2659                                     // 761\n                    return Promise.resolve(loaderObj.normalize(name, parentName))                                      // 762\n                        .then(function(name) {                                                                         // 763\n                            var loader = loaderObj._loader;                                                            // 764\n                                                                                                                       // 765\n                            if (loader.modules[name]) {                                                                // 766\n                                doEnsureEvaluated(loader.modules[name], [], loader._loader);                           // 767\n                                return loader.modules[name].module;                                                    // 768\n                            }                                                                                          // 769\n                                                                                                                       // 770\n                            return loader.importPromises[name] || createImportPromise(loaderObj, name,                 // 771\n                                    loadModule(loader, name, {})                                                       // 772\n                                        .then(function(load) {                                                         // 773\n                                            delete loader.importPromises[name];                                        // 774\n                                            return evaluateLoadedModule(loader, load);                                 // 775\n                                        }));                                                                           // 776\n                        });                                                                                            // 777\n                },                                                                                                     // 778\n                // 26.3.3.9 keys not implemented                                                                       // 779\n                // 26.3.3.10                                                                                           // 780\n                load: function(name, options) {                                                                        // 781\n                    if (this._loader.modules[name]) {                                                                  // 782\n                        doEnsureEvaluated(this._loader.modules[name], [], this._loader);                               // 783\n                        return Promise.resolve(this._loader.modules[name].module);                                     // 784\n                    }                                                                                                  // 785\n                    return this._loader.importPromises[name] || createImportPromise(this, name, loadModule(this._loader, name, {}));\n                },                                                                                                     // 787\n                // 26.3.3.11                                                                                           // 788\n                module: function(source, options) {                                                                    // 789\n                    var load = createLoad();                                                                           // 790\n                    load.address = options && options.address;                                                         // 791\n                    var linkSet = createLinkSet(this._loader, load);                                                   // 792\n                    var sourcePromise = Promise.resolve(source);                                                       // 793\n                    var loader = this._loader;                                                                         // 794\n                    var p = linkSet.done.then(function() {                                                             // 795\n                        return evaluateLoadedModule(loader, load);                                                     // 796\n                    });                                                                                                // 797\n                    proceedToTranslate(loader, load, sourcePromise);                                                   // 798\n                    return p;                                                                                          // 799\n                },                                                                                                     // 800\n                // 26.3.3.12                                                                                           // 801\n                newModule: function (obj) {                                                                            // 802\n                    if (typeof obj != 'object')                                                                        // 803\n                        throw new TypeError('Expected object');                                                        // 804\n                                                                                                                       // 805\n                    // we do this to be able to tell if a module is a module privately in ES5                          // 806\n                    // by doing m instanceof Module                                                                    // 807\n                    var m = new Module();                                                                              // 808\n                                                                                                                       // 809\n                    var pNames;                                                                                        // 810\n                    if (Object.getOwnPropertyNames && obj != null) {                                                   // 811\n                        pNames = Object.getOwnPropertyNames(obj);                                                      // 812\n                    }                                                                                                  // 813\n                    else {                                                                                             // 814\n                        pNames = [];                                                                                   // 815\n                        for (var key in obj)                                                                           // 816\n                            pNames.push(key);                                                                          // 817\n                    }                                                                                                  // 818\n                                                                                                                       // 819\n                    for (var i = 0; i < pNames.length; i++) (function(key) {                                           // 820\n                        defineProperty(m, key, {                                                                       // 821\n                            configurable: false,                                                                       // 822\n                            enumerable: true,                                                                          // 823\n                            get: function () {                                                                         // 824\n                                return obj[key];                                                                       // 825\n                            }                                                                                          // 826\n                        });                                                                                            // 827\n                    })(pNames[i]);                                                                                     // 828\n                                                                                                                       // 829\n                    if (Object.preventExtensions)                                                                      // 830\n                        Object.preventExtensions(m);                                                                   // 831\n                                                                                                                       // 832\n                    return m;                                                                                          // 833\n                },                                                                                                     // 834\n                // 26.3.3.14                                                                                           // 835\n                set: function(name, module) {                                                                          // 836\n                    if (!(module instanceof Module))                                                                   // 837\n                        throw new TypeError('Loader.set(' + name + ', module) must be a module');                      // 838\n                    this._loader.modules[name] = {                                                                     // 839\n                        module: module                                                                                 // 840\n                    };                                                                                                 // 841\n                },                                                                                                     // 842\n                // 26.3.3.15 values not implemented                                                                    // 843\n                // 26.3.3.16 @@iterator not implemented                                                                // 844\n                // 26.3.3.17 @@toStringTag not implemented                                                             // 845\n                                                                                                                       // 846\n                // 26.3.3.18.1                                                                                         // 847\n                normalize: function(name, referrerName, referrerAddress) {                                             // 848\n                    return name;                                                                                       // 849\n                },                                                                                                     // 850\n                // 26.3.3.18.2                                                                                         // 851\n                locate: function(load) {                                                                               // 852\n                    return load.name;                                                                                  // 853\n                },                                                                                                     // 854\n                // 26.3.3.18.3                                                                                         // 855\n                fetch: function(load) {                                                                                // 856\n                },                                                                                                     // 857\n                // 26.3.3.18.4                                                                                         // 858\n                translate: function(load) {                                                                            // 859\n                    return load.source;                                                                                // 860\n                },                                                                                                     // 861\n                // 26.3.3.18.5                                                                                         // 862\n                instantiate: function(load) {                                                                          // 863\n                }                                                                                                      // 864\n            };                                                                                                         // 865\n                                                                                                                       // 866\n            var _newModule = Loader.prototype.newModule;                                                               // 867\n            /*                                                                                                         // 868\n             * ES6 Module Declarative Linking Code - Dev Build Only                                                    // 869\n             */                                                                                                        // 870\n            function link(linkSet, linkError) {                                                                        // 871\n                                                                                                                       // 872\n                var loader = linkSet.loader;                                                                           // 873\n                                                                                                                       // 874\n                if (!linkSet.loads.length)                                                                             // 875\n                    return;                                                                                            // 876\n                                                                                                                       // 877\n                var loads = linkSet.loads.concat([]);                                                                  // 878\n                                                                                                                       // 879\n                for (var i = 0; i < loads.length; i++) {                                                               // 880\n                    var load = loads[i];                                                                               // 881\n                                                                                                                       // 882\n                    var module = doDynamicExecute(linkSet, load, linkError);                                           // 883\n                    if (!module)                                                                                       // 884\n                        return;                                                                                        // 885\n                    load.module = {                                                                                    // 886\n                        name: load.name,                                                                               // 887\n                        module: module                                                                                 // 888\n                    };                                                                                                 // 889\n                    load.status = 'linked';                                                                            // 890\n                                                                                                                       // 891\n                    finishLoad(loader, load);                                                                          // 892\n                }                                                                                                      // 893\n            }                                                                                                          // 894\n                                                                                                                       // 895\n            function evaluateLoadedModule(loader, load) {                                                              // 896\n                console.assert(load.status == 'linked', 'is linked ' + load.name);                                     // 897\n                return load.module.module;                                                                             // 898\n            }                                                                                                          // 899\n                                                                                                                       // 900\n            function doEnsureEvaluated() {}                                                                            // 901\n                                                                                                                       // 902\n            function transpile() {                                                                                     // 903\n                throw new TypeError('ES6 transpilation is only provided in the dev module loader build.');             // 904\n            }                                                                                                          // 905\n        })();/*                                                                                                        // 906\n         *********************************************************************************************                 // 907\n                                                                                                                       // 908\n         System Loader Implementation                                                                                  // 909\n                                                                                                                       // 910\n         - Implemented to https://github.com/jorendorff/js-loaders/blob/master/browser-loader.js                       // 911\n                                                                                                                       // 912\n         - <script type=\"module\"> supported                                                                            // 913\n                                                                                                                       // 914\n         *********************************************************************************************                 // 915\n         */                                                                                                            // 916\n                                                                                                                       // 917\n        var System;                                                                                                    // 918\n                                                                                                                       // 919\n        function SystemLoader() {                                                                                      // 920\n            Loader.call(this);                                                                                         // 921\n            this.paths = {};                                                                                           // 922\n        }                                                                                                              // 923\n                                                                                                                       // 924\n// NB no specification provided for System.paths, used ideas discussed in https://github.com/jorendorff/js-loaders/issues/25\n        function applyPaths(paths, name) {                                                                             // 926\n            // most specific (most number of slashes in path) match wins                                               // 927\n            var pathMatch = '', wildcard, maxSlashCount = 0;                                                           // 928\n                                                                                                                       // 929\n            // check to see if we have a paths entry                                                                   // 930\n            for (var p in paths) {                                                                                     // 931\n                var pathParts = p.split('*');                                                                          // 932\n                if (pathParts.length > 2)                                                                              // 933\n                    throw new TypeError('Only one wildcard in a path is permitted');                                   // 934\n                                                                                                                       // 935\n                // exact path match                                                                                    // 936\n                if (pathParts.length == 1) {                                                                           // 937\n                    if (name == p) {                                                                                   // 938\n                        pathMatch = p;                                                                                 // 939\n                        break;                                                                                         // 940\n                    }                                                                                                  // 941\n                }                                                                                                      // 942\n                // wildcard path match                                                                                 // 943\n                else {                                                                                                 // 944\n                    var slashCount = p.split('/').length;                                                              // 945\n                    if (slashCount >= maxSlashCount &&                                                                 // 946\n                        name.substr(0, pathParts[0].length) == pathParts[0] &&                                         // 947\n                        name.substr(name.length - pathParts[1].length) == pathParts[1]) {                              // 948\n                        maxSlashCount = slashCount;                                                                    // 949\n                        pathMatch = p;                                                                                 // 950\n                        wildcard = name.substr(pathParts[0].length, name.length - pathParts[1].length - pathParts[0].length);\n                    }                                                                                                  // 952\n                }                                                                                                      // 953\n            }                                                                                                          // 954\n                                                                                                                       // 955\n            var outPath = paths[pathMatch] || name;                                                                    // 956\n            if (wildcard)                                                                                              // 957\n                outPath = outPath.replace('*', wildcard);                                                              // 958\n                                                                                                                       // 959\n            return outPath;                                                                                            // 960\n        }                                                                                                              // 961\n                                                                                                                       // 962\n// inline Object.create-style class extension                                                                          // 963\n        function LoaderProto() {}                                                                                      // 964\n        LoaderProto.prototype = Loader.prototype;                                                                      // 965\n        SystemLoader.prototype = new LoaderProto();                                                                    // 966\n        var fetchTextFromURL;                                                                                          // 967\n        if (typeof XMLHttpRequest != 'undefined') {                                                                    // 968\n            fetchTextFromURL = function(url, fulfill, reject) {                                                        // 969\n                // percent encode just '#' in urls                                                                     // 970\n                // according to https://github.com/jorendorff/js-loaders/blob/master/browser-loader.js#L238            // 971\n                // we should encode everything, but it breaks for servers that don't expect it                         // 972\n                // like in (https://github.com/systemjs/systemjs/issues/168)                                           // 973\n                if (isBrowser)                                                                                         // 974\n                    url = url.replace(/#/g, '%23');                                                                    // 975\n                                                                                                                       // 976\n                var xhr = new XMLHttpRequest();                                                                        // 977\n                var sameDomain = true;                                                                                 // 978\n                var doTimeout = false;                                                                                 // 979\n                if (!('withCredentials' in xhr)) {                                                                     // 980\n                    // check if same domain                                                                            // 981\n                    var domainCheck = /^(\\w+:)?\\/\\/([^\\/]+)/.exec(url);                                                // 982\n                    if (domainCheck) {                                                                                 // 983\n                        sameDomain = domainCheck[2] === window.location.host;                                          // 984\n                        if (domainCheck[1])                                                                            // 985\n                            sameDomain &= domainCheck[1] === window.location.protocol;                                 // 986\n                    }                                                                                                  // 987\n                }                                                                                                      // 988\n                if (!sameDomain && typeof XDomainRequest != 'undefined') {                                             // 989\n                    xhr = new XDomainRequest();                                                                        // 990\n                    xhr.onload = load;                                                                                 // 991\n                    xhr.onerror = error;                                                                               // 992\n                    xhr.ontimeout = error;                                                                             // 993\n                    xhr.onprogress = function() {};                                                                    // 994\n                    xhr.timeout = 0;                                                                                   // 995\n                    doTimeout = true;                                                                                  // 996\n                }                                                                                                      // 997\n                function load() {                                                                                      // 998\n                    fulfill(xhr.responseText);                                                                         // 999\n                }                                                                                                      // 1000\n                function error() {                                                                                     // 1001\n                    reject(xhr.statusText + ': ' + url || 'XHR error');                                                // 1002\n                }                                                                                                      // 1003\n                                                                                                                       // 1004\n                xhr.onreadystatechange = function () {                                                                 // 1005\n                    if (xhr.readyState === 4) {                                                                        // 1006\n                        if (xhr.status === 200 || (xhr.status == 0 && xhr.responseText)) {                             // 1007\n                            load();                                                                                    // 1008\n                        } else {                                                                                       // 1009\n                            error();                                                                                   // 1010\n                        }                                                                                              // 1011\n                    }                                                                                                  // 1012\n                };                                                                                                     // 1013\n                xhr.open(\"GET\", url, true);                                                                            // 1014\n                                                                                                                       // 1015\n                if (doTimeout)                                                                                         // 1016\n                    setTimeout(function() {                                                                            // 1017\n                        xhr.send();                                                                                    // 1018\n                    }, 0);                                                                                             // 1019\n                                                                                                                       // 1020\n                xhr.send(null);                                                                                        // 1021\n            };                                                                                                         // 1022\n        }                                                                                                              // 1023\n        else if (typeof require != 'undefined') {                                                                      // 1024\n            var fs;                                                                                                    // 1025\n            fetchTextFromURL = function(url, fulfill, reject) {                                                        // 1026\n                if (url.substr(0, 8) != 'file:///')                                                                    // 1027\n                    throw 'Only file URLs of the form file:/// allowed running in Node.';                              // 1028\n                fs = fs || require('fs');                                                                              // 1029\n                if (isWindows)                                                                                         // 1030\n                    url = url.replace(/\\//g, '\\\\').substr(8);                                                          // 1031\n                else                                                                                                   // 1032\n                    url = url.substr(7);                                                                               // 1033\n                return fs.readFile(url, function(err, data) {                                                          // 1034\n                    if (err)                                                                                           // 1035\n                        return reject(err);                                                                            // 1036\n                    else {                                                                                             // 1037\n                        // Strip Byte Order Mark out if it's the leading char                                          // 1038\n                        var dataString = data + '';                                                                    // 1039\n                        if (dataString[0] === '\\ufeff')                                                                // 1040\n                            dataString = dataString.substr(1);                                                         // 1041\n                                                                                                                       // 1042\n                        fulfill(dataString);                                                                           // 1043\n                    }                                                                                                  // 1044\n                });                                                                                                    // 1045\n            };                                                                                                         // 1046\n        }                                                                                                              // 1047\n        else {                                                                                                         // 1048\n            throw new TypeError('No environment fetch API available.');                                                // 1049\n        }                                                                                                              // 1050\n                                                                                                                       // 1051\n        SystemLoader.prototype.fetch = function(load) {                                                                // 1052\n            return new Promise(function(resolve, reject) {                                                             // 1053\n                fetchTextFromURL(load.address, resolve, reject);                                                       // 1054\n            });                                                                                                        // 1055\n        };/*                                                                                                           // 1056\n         * Traceur, Babel and TypeScript transpile hook for Loader                                                     // 1057\n         */                                                                                                            // 1058\n        var transpile = (function() {                                                                                  // 1059\n                                                                                                                       // 1060\n            // use Traceur by default                                                                                  // 1061\n            Loader.prototype.transpiler = 'traceur';                                                                   // 1062\n                                                                                                                       // 1063\n            function transpile(load) {                                                                                 // 1064\n                var self = this;                                                                                       // 1065\n                                                                                                                       // 1066\n                return Promise.resolve(__global[self.transpiler == 'typescript' ? 'ts' : self.transpiler]              // 1067\n                    || (self.pluginLoader || self)['import'](self.transpiler))                                         // 1068\n                    .then(function(transpiler) {                                                                       // 1069\n                        if (transpiler.__useDefault)                                                                   // 1070\n                            transpiler = transpiler['default'];                                                        // 1071\n                                                                                                                       // 1072\n                        var transpileFunction;                                                                         // 1073\n                        if (transpiler.Compiler)                                                                       // 1074\n                            transpileFunction = traceurTranspile;                                                      // 1075\n                        else if (transpiler.createLanguageService)                                                     // 1076\n                            transpileFunction = typescriptTranspile;                                                   // 1077\n                        else                                                                                           // 1078\n                            transpileFunction = babelTranspile;                                                        // 1079\n                                                                                                                       // 1080\n                        // note __moduleName will be part of the transformer meta in future when we have the spec for this\n                        return 'var __moduleName = \"' + load.name + '\";' + transpileFunction.call(self, load, transpiler) + '\\n//# sourceURL=' + load.address + '!transpiled';\n                    });                                                                                                // 1083\n            };                                                                                                         // 1084\n                                                                                                                       // 1085\n            function traceurTranspile(load, traceur) {                                                                 // 1086\n                var options = this.traceurOptions || {};                                                               // 1087\n                options.modules = 'instantiate';                                                                       // 1088\n                options.script = false;                                                                                // 1089\n                options.sourceMaps = 'inline';                                                                         // 1090\n                options.filename = load.address;                                                                       // 1091\n                options.inputSourceMap = load.metadata.sourceMap;                                                      // 1092\n                options.moduleName = false;                                                                            // 1093\n                                                                                                                       // 1094\n                var compiler = new traceur.Compiler(options);                                                          // 1095\n                                                                                                                       // 1096\n                return doTraceurCompile(load.source, compiler, options.filename);                                      // 1097\n            }                                                                                                          // 1098\n            function doTraceurCompile(source, compiler, filename) {                                                    // 1099\n                try {                                                                                                  // 1100\n                    return compiler.compile(source, filename);                                                         // 1101\n                }                                                                                                      // 1102\n                catch(e) {                                                                                             // 1103\n                    // traceur throws an error array                                                                   // 1104\n                    throw e[0];                                                                                        // 1105\n                }                                                                                                      // 1106\n            }                                                                                                          // 1107\n                                                                                                                       // 1108\n            function babelTranspile(load, babel) {                                                                     // 1109\n                var options = this.babelOptions || {};                                                                 // 1110\n                options.modules = 'system';                                                                            // 1111\n                options.sourceMap = 'inline';                                                                          // 1112\n                options.inputSourceMap = load.metadata.sourceMap;                                                      // 1113\n                options.filename = load.address;                                                                       // 1114\n                options.code = true;                                                                                   // 1115\n                options.ast = false;                                                                                   // 1116\n                                                                                                                       // 1117\n                return babel.transform(load.source, options).code;                                                     // 1118\n            }                                                                                                          // 1119\n                                                                                                                       // 1120\n            function typescriptTranspile(load, ts) {                                                                   // 1121\n                var options = this.typescriptOptions || {};                                                            // 1122\n                if (options.target === undefined) {                                                                    // 1123\n                    options.target = ts.ScriptTarget.ES5;                                                              // 1124\n                }                                                                                                      // 1125\n                options.module = ts.ModuleKind.System;                                                                 // 1126\n                options.inlineSourceMap = true;                                                                        // 1127\n                                                                                                                       // 1128\n                return ts.transpile(load.source, options, load.address);                                               // 1129\n            }                                                                                                          // 1130\n                                                                                                                       // 1131\n            return transpile;                                                                                          // 1132\n        })();                                                                                                          // 1133\n// we define a __exec for globally-scoped execution                                                                    // 1134\n// used by module format implementations                                                                               // 1135\n        var __exec;                                                                                                    // 1136\n                                                                                                                       // 1137\n        (function() {                                                                                                  // 1138\n                                                                                                                       // 1139\n            // System clobbering protection (mostly for Traceur)                                                       // 1140\n            var curSystem;                                                                                             // 1141\n            function preExec(loader) {                                                                                 // 1142\n                curSystem = __global.System;                                                                           // 1143\n                __global.System = loader;                                                                              // 1144\n            }                                                                                                          // 1145\n            function postExec() {                                                                                      // 1146\n                __global.System = curSystem;                                                                           // 1147\n            }                                                                                                          // 1148\n                                                                                                                       // 1149\n            var hasBtoa = typeof btoa != 'undefined';                                                                  // 1150\n                                                                                                                       // 1151\n            function getSource(load) {                                                                                 // 1152\n                var lastLineIndex = load.source.lastIndexOf('\\n');                                                     // 1153\n                                                                                                                       // 1154\n                return load.source                                                                                     // 1155\n                        // adds the sourceURL comment if not already present                                           // 1156\n                    + (load.source.substr(lastLineIndex, 15) != '\\n//# sourceURL='                                     // 1157\n                        ? '\\n//# sourceURL=' + load.address + (load.metadata.sourceMap ? '!transpiled' : '') : '')     // 1158\n                        // add sourceMappingURL if load.metadata.sourceMap is set                                      // 1159\n                    + (load.metadata.sourceMap && hasBtoa &&                                                           // 1160\n                    '\\n//# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(load.metadata.sourceMap))) || '')\n            }                                                                                                          // 1162\n                                                                                                                       // 1163\n            // Web Worker and Chrome Extensions use original ESML eval                                                 // 1164\n            // this may lead to some global module execution differences (eg var not defining onto global)             // 1165\n            if (isWorker || isBrowser && window.chrome && window.chrome.extension) {                                   // 1166\n                __exec = function(load) {                                                                              // 1167\n                    try {                                                                                              // 1168\n                        preExec(this);                                                                                 // 1169\n                        new Function(getSource(load)).call(__global);                                                  // 1170\n                        postExec();                                                                                    // 1171\n                    }                                                                                                  // 1172\n                    catch(e) {                                                                                         // 1173\n                        throw addToError(e, 'Evaluating ' + load.address);                                             // 1174\n                    }                                                                                                  // 1175\n                };                                                                                                     // 1176\n            }                                                                                                          // 1177\n                                                                                                                       // 1178\n            // use script injection eval to get identical global script behaviour                                      // 1179\n            else if (typeof document != 'undefined') {                                                                 // 1180\n                var head;                                                                                              // 1181\n                                                                                                                       // 1182\n                var scripts = document.getElementsByTagName('script');                                                 // 1183\n                $__curScript = scripts[scripts.length - 1];                                                            // 1184\n                                                                                                                       // 1185\n                __exec = function(load) {                                                                              // 1186\n                    if (!head)                                                                                         // 1187\n                        head = document.head || document.body || document.documentElement;                             // 1188\n                                                                                                                       // 1189\n                    var script = document.createElement('script');                                                     // 1190\n                    script.text = getSource(load);                                                                     // 1191\n                    var onerror = window.onerror;                                                                      // 1192\n                    var e;                                                                                             // 1193\n                    window.onerror = function(_e) {                                                                    // 1194\n                        e = addToError(_e, 'Evaluating ' + load.address);                                              // 1195\n                    }                                                                                                  // 1196\n                    preExec(this);                                                                                     // 1197\n                    head.appendChild(script);                                                                          // 1198\n                    head.removeChild(script);                                                                          // 1199\n                    postExec();                                                                                        // 1200\n                    window.onerror = onerror;                                                                          // 1201\n                    if (e)                                                                                             // 1202\n                        throw e;                                                                                       // 1203\n                }                                                                                                      // 1204\n            }                                                                                                          // 1205\n            else {                                                                                                     // 1206\n                // global scoped eval for node                                                                         // 1207\n                var vmModule = 'vm';                                                                                   // 1208\n                var vm = require(vmModule);                                                                            // 1209\n                __exec = function(load) {                                                                              // 1210\n                    try {                                                                                              // 1211\n                        preExec(this);                                                                                 // 1212\n                        vm.runInThisContext(getSource(load));                                                          // 1213\n                        postExec();                                                                                    // 1214\n                    }                                                                                                  // 1215\n                    catch(e) {                                                                                         // 1216\n                        throw addToError(e.toString(), 'Evaluating ' + load.address);                                  // 1217\n                    }                                                                                                  // 1218\n                };                                                                                                     // 1219\n            }                                                                                                          // 1220\n                                                                                                                       // 1221\n        })();// SystemJS Loader Class and Extension helpers                                                            // 1222\n                                                                                                                       // 1223\n        function SystemJSLoader() {                                                                                    // 1224\n            SystemLoader.call(this);                                                                                   // 1225\n                                                                                                                       // 1226\n            systemJSConstructor.call(this);                                                                            // 1227\n        }                                                                                                              // 1228\n                                                                                                                       // 1229\n// inline Object.create-style class extension                                                                          // 1230\n        function SystemProto() {};                                                                                     // 1231\n        SystemProto.prototype = SystemLoader.prototype;                                                                // 1232\n        SystemJSLoader.prototype = new SystemProto();                                                                  // 1233\n                                                                                                                       // 1234\n        var systemJSConstructor;                                                                                       // 1235\n                                                                                                                       // 1236\n        function hook(name, hook) {                                                                                    // 1237\n            SystemJSLoader.prototype[name] = hook(SystemJSLoader.prototype[name]);                                     // 1238\n        }                                                                                                              // 1239\n        function hookConstructor(hook) {                                                                               // 1240\n            systemJSConstructor = hook(systemJSConstructor || function() {});                                          // 1241\n        }                                                                                                              // 1242\n                                                                                                                       // 1243\n        function dedupe(deps) {                                                                                        // 1244\n            var newDeps = [];                                                                                          // 1245\n            for (var i = 0, l = deps.length; i < l; i++)                                                               // 1246\n                if (indexOf.call(newDeps, deps[i]) == -1)                                                              // 1247\n                    newDeps.push(deps[i])                                                                              // 1248\n            return newDeps;                                                                                            // 1249\n        }                                                                                                              // 1250\n                                                                                                                       // 1251\n        function extend(a, b, underwrite) {                                                                            // 1252\n            for (var p in b) {                                                                                         // 1253\n                if (!underwrite || !(p in a))                                                                          // 1254\n                    a[p] = b[p];                                                                                       // 1255\n            }                                                                                                          // 1256\n        }var absURLRegEx = /^[^\\/]+:\\/\\//;                                                                             // 1257\n                                                                                                                       // 1258\n        function readMemberExpression(p, value) {                                                                      // 1259\n            var pParts = p.split('.');                                                                                 // 1260\n            while (pParts.length)                                                                                      // 1261\n                value = value[pParts.shift()];                                                                         // 1262\n            return value;                                                                                              // 1263\n        }                                                                                                              // 1264\n                                                                                                                       // 1265\n        var baseURLCache = {};                                                                                         // 1266\n        function getBaseURLObj() {                                                                                     // 1267\n            if (baseURLCache[this.baseURL])                                                                            // 1268\n                return baseURLCache[this.baseURL];                                                                     // 1269\n                                                                                                                       // 1270\n            // normalize baseURL if not already                                                                        // 1271\n            if (this.baseURL[this.baseURL.length - 1] != '/')                                                          // 1272\n                this.baseURL += '/';                                                                                   // 1273\n                                                                                                                       // 1274\n            var baseURL = new URL(this.baseURL, baseURI);                                                              // 1275\n                                                                                                                       // 1276\n            this.baseURL = baseURL.href;                                                                               // 1277\n                                                                                                                       // 1278\n            return (baseURLCache[this.baseURL] = baseURL);                                                             // 1279\n        }                                                                                                              // 1280\n                                                                                                                       // 1281\n        var baseURIObj = new URL(baseURI);                                                                             // 1282\n                                                                                                                       // 1283\n        (function() {                                                                                                  // 1284\n                                                                                                                       // 1285\n            hookConstructor(function(constructor) {                                                                    // 1286\n                return function() {                                                                                    // 1287\n                    constructor.call(this);                                                                            // 1288\n                                                                                                                       // 1289\n                    // support baseURL                                                                                 // 1290\n                    this.baseURL = baseURI.substr(0, baseURI.lastIndexOf('/') + 1);                                    // 1291\n                                                                                                                       // 1292\n                    // support the empty module, as a concept                                                          // 1293\n                    this.set('@empty', this.newModule({}));                                                            // 1294\n                };                                                                                                     // 1295\n            });                                                                                                        // 1296\n                                                                                                                       // 1297\n            /*                                                                                                         // 1298\n             Normalization                                                                                             // 1299\n                                                                                                                       // 1300\n             If a name is relative, we apply URL normalization to the page                                             // 1301\n             If a name is an absolute URL, we leave it as-is                                                           // 1302\n                                                                                                                       // 1303\n             Plain names (neither of the above) run through the map and package                                        // 1304\n             normalization phases (applying before and after this one).                                                // 1305\n                                                                                                                       // 1306\n             The paths normalization phase applies last (paths extension), which                                       // 1307\n             defines the `normalizeSync` function and normalizes everything into                                       // 1308\n             a URL.                                                                                                    // 1309\n                                                                                                                       // 1310\n             The final normalization                                                                                   // 1311\n             */                                                                                                        // 1312\n            hook('normalize', function() {                                                                             // 1313\n                return function(name, parentName) {                                                                    // 1314\n                    // relative URL-normalization                                                                      // 1315\n                    if (name[0] == '.' || name[0] == '/')                                                              // 1316\n                        return new URL(name, parentName || baseURIObj).href;                                           // 1317\n                    return name;                                                                                       // 1318\n                };                                                                                                     // 1319\n            });                                                                                                        // 1320\n                                                                                                                       // 1321\n            /*                                                                                                         // 1322\n             __useDefault                                                                                              // 1323\n                                                                                                                       // 1324\n             When a module object looks like:                                                                          // 1325\n             newModule(                                                                                                // 1326\n             __useDefault: true,                                                                                       // 1327\n             default: 'some-module'                                                                                    // 1328\n             })                                                                                                        // 1329\n                                                                                                                       // 1330\n             Then importing that module provides the 'some-module'                                                     // 1331\n             result directly instead of the full module.                                                               // 1332\n                                                                                                                       // 1333\n             Useful for eg module.exports = function() {}                                                              // 1334\n             */                                                                                                        // 1335\n            hook('import', function(systemImport) {                                                                    // 1336\n                return function(name, parentName, parentAddress) {                                                     // 1337\n                    return systemImport.call(this, name, parentName, parentAddress).then(function(module) {            // 1338\n                        return module.__useDefault ? module['default'] : module;                                       // 1339\n                    });                                                                                                // 1340\n                };                                                                                                     // 1341\n            });                                                                                                        // 1342\n                                                                                                                       // 1343\n            /*                                                                                                         // 1344\n             Extend config merging one deep only                                                                       // 1345\n                                                                                                                       // 1346\n             loader.config({                                                                                           // 1347\n             some: 'random',                                                                                           // 1348\n             config: 'here',                                                                                           // 1349\n             deep: {                                                                                                   // 1350\n             config: { too: 'too' }                                                                                    // 1351\n             }                                                                                                         // 1352\n             });                                                                                                       // 1353\n                                                                                                                       // 1354\n             <=>                                                                                                       // 1355\n                                                                                                                       // 1356\n             loader.some = 'random';                                                                                   // 1357\n             loader.config = 'here'                                                                                    // 1358\n             loader.deep = loader.deep || {};                                                                          // 1359\n             loader.deep.config = { too: 'too' };                                                                      // 1360\n                                                                                                                       // 1361\n                                                                                                                       // 1362\n             Normalizes meta and package configs allowing for:                                                         // 1363\n                                                                                                                       // 1364\n             System.config({                                                                                           // 1365\n             meta: {                                                                                                   // 1366\n             './index.js': {}                                                                                          // 1367\n             }                                                                                                         // 1368\n             });                                                                                                       // 1369\n                                                                                                                       // 1370\n             To become                                                                                                 // 1371\n                                                                                                                       // 1372\n             System.meta['https://thissite.com/index.js'] = {};                                                        // 1373\n                                                                                                                       // 1374\n             For easy normalization canonicalization with latest URL support.                                          // 1375\n                                                                                                                       // 1376\n             */                                                                                                        // 1377\n            SystemJSLoader.prototype.config = function(cfg) {                                                          // 1378\n                                                                                                                       // 1379\n                // always configure baseURL first                                                                      // 1380\n                if (cfg.baseURL) {                                                                                     // 1381\n                    var hasConfig = false;                                                                             // 1382\n                    function checkHasConfig(obj) {                                                                     // 1383\n                        for (var p in obj)                                                                             // 1384\n                            return true;                                                                               // 1385\n                    }                                                                                                  // 1386\n                    if (checkHasConfig(this.packages) || checkHasConfig(this.meta) || checkHasConfig(this.depCache) || checkHasConfig(this.bundles))\n                        throw new TypeError('baseURL should only be configured once and must be configured first.');   // 1388\n                                                                                                                       // 1389\n                    this.baseURL = cfg.baseURL;                                                                        // 1390\n                                                                                                                       // 1391\n                    // sanitize baseURL                                                                                // 1392\n                    getBaseURLObj.call(this);                                                                          // 1393\n                }                                                                                                      // 1394\n                                                                                                                       // 1395\n                if (cfg.paths) {                                                                                       // 1396\n                    for (var p in cfg.paths)                                                                           // 1397\n                        this.paths[p] = cfg.paths[p];                                                                  // 1398\n                }                                                                                                      // 1399\n                                                                                                                       // 1400\n                if (cfg.map) {                                                                                         // 1401\n                    for (var p in cfg.map) {                                                                           // 1402\n                        var v = cfg.map[p];                                                                            // 1403\n                                                                                                                       // 1404\n                        // object map backwards-compat into packages configuration                                     // 1405\n                        if (typeof v !== 'string') {                                                                   // 1406\n                            var normalized = this.normalizeSync(p);                                                    // 1407\n                                                                                                                       // 1408\n                            // if doing default js extensions, undo to get package name                                // 1409\n                            if (this.defaultJSExtensions && p.substr(p.length - 3, 3) != '.js')                        // 1410\n                                normalized = normalized.substr(0, normalized.length - 3);                              // 1411\n                                                                                                                       // 1412\n                            // if a package main, revert it                                                            // 1413\n                            var pkgMatch = '';                                                                         // 1414\n                            for (var pkg in this.packages) {                                                           // 1415\n                                if (normalized.substr(0, pkg.length) == pkg                                            // 1416\n                                    && (!normalized[pkg.length] || normalized[pkg.length] == '/')                      // 1417\n                                    && pkgMatch.split('/').length < pkg.split('/').length)                             // 1418\n                                    pkgMatch = pkg;                                                                    // 1419\n                            }                                                                                          // 1420\n                            if (pkgMatch && this.packages[pkgMatch].main)                                              // 1421\n                                normalized = normalized.substr(0, normalized.length - this.packages[pkgMatch].main.length - 1);\n                                                                                                                       // 1423\n                            var pkg = this.packages[normalized] = this.packages[normalized] || {};                     // 1424\n                            pkg.map = v;                                                                               // 1425\n                        }                                                                                              // 1426\n                        else {                                                                                         // 1427\n                            this.map[p] = v;                                                                           // 1428\n                        }                                                                                              // 1429\n                    }                                                                                                  // 1430\n                }                                                                                                      // 1431\n                                                                                                                       // 1432\n                if (cfg.packages) {                                                                                    // 1433\n                    for (var p in cfg.packages) {                                                                      // 1434\n                        var prop = this.normalizeSync(p);                                                              // 1435\n                                                                                                                       // 1436\n                        // if doing default js extensions, undo to get package name                                    // 1437\n                        if (this.defaultJSExtensions && p.substr(p.length - 3, 3) != '.js')                            // 1438\n                            prop = prop.substr(0, prop.length - 3);                                                    // 1439\n                                                                                                                       // 1440\n                        this.packages[prop]= this.packages[prop] || {};                                                // 1441\n                        for (var q in cfg.packages[p])                                                                 // 1442\n                            this.packages[prop][q] = cfg.packages[p][q];                                               // 1443\n                    }                                                                                                  // 1444\n                }                                                                                                      // 1445\n                                                                                                                       // 1446\n                if (cfg.bundles) {                                                                                     // 1447\n                    for (var p in cfg.bundles) {                                                                       // 1448\n                        var bundle = [];                                                                               // 1449\n                        for (var i = 0; i < cfg.bundles[p].length; i++)                                                // 1450\n                            bundle.push(this.normalizeSync(cfg.bundles[p][i]));                                        // 1451\n                        this.bundles[p] = bundle;                                                                      // 1452\n                    }                                                                                                  // 1453\n                }                                                                                                      // 1454\n                                                                                                                       // 1455\n                for (var c in cfg) {                                                                                   // 1456\n                    var v = cfg[c];                                                                                    // 1457\n                    var normalizeProp = false, normalizeValArray = false;                                              // 1458\n                                                                                                                       // 1459\n                    if (c == 'baseURL' || c == 'map' || c == 'packages' || c == 'bundles' || c == 'paths')             // 1460\n                        continue;                                                                                      // 1461\n                                                                                                                       // 1462\n                    if (typeof v != 'object' || v instanceof Array) {                                                  // 1463\n                        this[c] = v;                                                                                   // 1464\n                    }                                                                                                  // 1465\n                    else {                                                                                             // 1466\n                        this[c] = this[c] || {};                                                                       // 1467\n                                                                                                                       // 1468\n                        if (c == 'meta' || c == 'depCache')                                                            // 1469\n                            normalizeProp = true;                                                                      // 1470\n                                                                                                                       // 1471\n                        for (var p in v) {                                                                             // 1472\n                            if (normalizeProp)                                                                         // 1473\n                                this[c][this.normalizeSync(p)] = v[p];                                                 // 1474\n                            else                                                                                       // 1475\n                                this[c][p] = v[p];                                                                     // 1476\n                        }                                                                                              // 1477\n                    }                                                                                                  // 1478\n                }                                                                                                      // 1479\n            };                                                                                                         // 1480\n                                                                                                                       // 1481\n        })();/*                                                                                                        // 1482\n         * Script tag fetch                                                                                            // 1483\n         *                                                                                                             // 1484\n         * When load.metadata.scriptLoad is true, we load via script tag injection.                                    // 1485\n         */                                                                                                            // 1486\n        (function() {                                                                                                  // 1487\n                                                                                                                       // 1488\n            if (typeof document != 'undefined')                                                                        // 1489\n                var head = document.getElementsByTagName('head')[0];                                                   // 1490\n                                                                                                                       // 1491\n            // call this functione everytime a wrapper executes                                                        // 1492\n            var curSystem;                                                                                             // 1493\n            // System clobbering protection for Traceur                                                                // 1494\n            SystemJSLoader.prototype.onScriptLoad = function() {                                                       // 1495\n                __global.System = curSystem;                                                                           // 1496\n            };                                                                                                         // 1497\n                                                                                                                       // 1498\n            function webWorkerImport(loader, load) {                                                                   // 1499\n                return new Promise(function(resolve, reject) {                                                         // 1500\n                    try {                                                                                              // 1501\n                        importScripts(load.address);                                                                   // 1502\n                    }                                                                                                  // 1503\n                    catch(e) {                                                                                         // 1504\n                        reject(e);                                                                                     // 1505\n                    }                                                                                                  // 1506\n                                                                                                                       // 1507\n                    loader.onScriptLoad(load);                                                                         // 1508\n                    // if nothing registered, then something went wrong                                                // 1509\n                    if (!load.metadata.registered)                                                                     // 1510\n                        reject(load.address + ' did not call System.register or AMD define');                          // 1511\n                                                                                                                       // 1512\n                    resolve('');                                                                                       // 1513\n                });                                                                                                    // 1514\n            }                                                                                                          // 1515\n                                                                                                                       // 1516\n            // override fetch to use script injection                                                                  // 1517\n            hook('fetch', function(fetch) {                                                                            // 1518\n                return function(load) {                                                                                // 1519\n                    var loader = this;                                                                                 // 1520\n                                                                                                                       // 1521\n                    if (!load.metadata.scriptLoad || (!isBrowser && !isWorker))                                        // 1522\n                        return fetch.call(this, load);                                                                 // 1523\n                                                                                                                       // 1524\n                    if (isWorker)                                                                                      // 1525\n                        return webWorkerImport(loader, load);                                                          // 1526\n                                                                                                                       // 1527\n                    return new Promise(function(resolve, reject) {                                                     // 1528\n                        var s = document.createElement('script');                                                      // 1529\n                        s.async = true;                                                                                // 1530\n                                                                                                                       // 1531\n                        function complete(evt) {                                                                       // 1532\n                            if (s.readyState && s.readyState != 'loaded' && s.readyState != 'complete')                // 1533\n                                return;                                                                                // 1534\n                            cleanup();                                                                                 // 1535\n                                                                                                                       // 1536\n                            // this runs synchronously after execution                                                 // 1537\n                            // we now need to tell the wrapper handlers that                                           // 1538\n                            // this load record has just executed                                                      // 1539\n                            loader.onScriptLoad(load);                                                                 // 1540\n                                                                                                                       // 1541\n                            // if nothing registered, then something went wrong                                        // 1542\n                            if (!load.metadata.registered)                                                             // 1543\n                                reject(load.address + ' did not call System.register or AMD define');                  // 1544\n                                                                                                                       // 1545\n                            resolve('');                                                                               // 1546\n                        }                                                                                              // 1547\n                                                                                                                       // 1548\n                        function error(evt) {                                                                          // 1549\n                            cleanup();                                                                                 // 1550\n                            reject(new Error('Unable to load script ' + load.address));                                // 1551\n                        }                                                                                              // 1552\n                                                                                                                       // 1553\n                        if (s.attachEvent) {                                                                           // 1554\n                            s.attachEvent('onreadystatechange', complete);                                             // 1555\n                        }                                                                                              // 1556\n                        else {                                                                                         // 1557\n                            s.addEventListener('load', complete, false);                                               // 1558\n                            s.addEventListener('error', error, false);                                                 // 1559\n                        }                                                                                              // 1560\n                                                                                                                       // 1561\n                        curSystem = __global.System;                                                                   // 1562\n                        __global.System = loader;                                                                      // 1563\n                        s.src = load.address;                                                                          // 1564\n                        head.appendChild(s);                                                                           // 1565\n                                                                                                                       // 1566\n                        function cleanup() {                                                                           // 1567\n                            if (s.detachEvent)                                                                         // 1568\n                                s.detachEvent('onreadystatechange', complete);                                         // 1569\n                            else {                                                                                     // 1570\n                                s.removeEventListener('load', complete, false);                                        // 1571\n                                s.removeEventListener('error', error, false);                                          // 1572\n                            }                                                                                          // 1573\n                            head.removeChild(s);                                                                       // 1574\n                        }                                                                                              // 1575\n                    });                                                                                                // 1576\n                };                                                                                                     // 1577\n            });                                                                                                        // 1578\n        })();                                                                                                          // 1579\n        /*                                                                                                             // 1580\n         * Instantiate registry extension                                                                              // 1581\n         *                                                                                                             // 1582\n         * Supports Traceur System.register 'instantiate' output for loading ES6 as ES5.                               // 1583\n         *                                                                                                             // 1584\n         * - Creates the loader.register function                                                                      // 1585\n         * - Also supports metadata.format = 'register' in instantiate for anonymous register modules                  // 1586\n         * - Also supports metadata.deps, metadata.execute and metadata.executingRequire                               // 1587\n         *     for handling dynamic modules alongside register-transformed ES6 modules                                 // 1588\n         *                                                                                                             // 1589\n         *                                                                                                             // 1590\n         * The code here replicates the ES6 linking groups algorithm to ensure that                                    // 1591\n         * circular ES6 compiled into System.register can work alongside circular AMD                                  // 1592\n         * and CommonJS, identically to the actual ES6 loader.                                                         // 1593\n         *                                                                                                             // 1594\n         */                                                                                                            // 1595\n        (function() {                                                                                                  // 1596\n                                                                                                                       // 1597\n            /*                                                                                                         // 1598\n             * There are two variations of System.register:                                                            // 1599\n             * 1. System.register for ES6 conversion (2-3 params) - System.register([name, ]deps, declare)             // 1600\n             *    see https://github.com/ModuleLoader/es6-module-loader/wiki/System.register-Explained                 // 1601\n             *                                                                                                         // 1602\n             * 2. System.registerDynamic for dynamic modules (3-4 params) - System.registerDynamic([name, ]deps, executingRequire, execute)\n             * the true or false statement                                                                             // 1604\n             *                                                                                                         // 1605\n             * this extension implements the linking algorithm for the two variations identical to the spec            // 1606\n             * allowing compiled ES6 circular references to work alongside AMD and CJS circular references.            // 1607\n             *                                                                                                         // 1608\n             */                                                                                                        // 1609\n            var anonRegister;                                                                                          // 1610\n            var calledRegister;                                                                                        // 1611\n            function doRegister(loader, name, register) {                                                              // 1612\n                calledRegister = true;                                                                                 // 1613\n                                                                                                                       // 1614\n                // named register                                                                                      // 1615\n                if (name) {                                                                                            // 1616\n                    name = loader.normalizeSync(name);                                                                 // 1617\n                    register.name = name;                                                                              // 1618\n                    if (!(name in loader.defined))                                                                     // 1619\n                        loader.defined[name] = register;                                                               // 1620\n                }                                                                                                      // 1621\n                // anonymous register                                                                                  // 1622\n                else if (register.declarative) {                                                                       // 1623\n                    if (anonRegister)                                                                                  // 1624\n                        throw new TypeError('Multiple anonymous System.register calls in the same module file.');      // 1625\n                    anonRegister = register;                                                                           // 1626\n                }                                                                                                      // 1627\n            }                                                                                                          // 1628\n            SystemJSLoader.prototype.register = function(name, deps, declare) {                                        // 1629\n                if (typeof name != 'string') {                                                                         // 1630\n                    declare = deps;                                                                                    // 1631\n                    deps = name;                                                                                       // 1632\n                    name = null;                                                                                       // 1633\n                }                                                                                                      // 1634\n                                                                                                                       // 1635\n                // dynamic backwards-compatibility                                                                     // 1636\n                // can be deprecated eventually                                                                        // 1637\n                if (typeof declare == 'boolean')                                                                       // 1638\n                    return this.registerDynamic.apply(this, arguments);                                                // 1639\n                                                                                                                       // 1640\n                doRegister(this, name, {                                                                               // 1641\n                    declarative: true,                                                                                 // 1642\n                    deps: deps,                                                                                        // 1643\n                    declare: declare                                                                                   // 1644\n                });                                                                                                    // 1645\n            };                                                                                                         // 1646\n            SystemJSLoader.prototype.registerDynamic = function(name, deps, declare, execute) {                        // 1647\n                if (typeof name != 'string') {                                                                         // 1648\n                    execute = declare;                                                                                 // 1649\n                    declare = deps;                                                                                    // 1650\n                    deps = name;                                                                                       // 1651\n                    name = null;                                                                                       // 1652\n                }                                                                                                      // 1653\n                                                                                                                       // 1654\n                // dynamic                                                                                             // 1655\n                doRegister(this, name, {                                                                               // 1656\n                    declarative: false,                                                                                // 1657\n                    deps: deps,                                                                                        // 1658\n                    execute: execute,                                                                                  // 1659\n                    executingRequire: declare                                                                          // 1660\n                });                                                                                                    // 1661\n            };                                                                                                         // 1662\n            /*                                                                                                         // 1663\n             * Registry side table - loader.defined                                                                    // 1664\n             * Registry Entry Contains:                                                                                // 1665\n             *    - name                                                                                               // 1666\n             *    - deps                                                                                               // 1667\n             *    - declare for declarative modules                                                                    // 1668\n             *    - execute for dynamic modules, different to declarative execute on module                            // 1669\n             *    - executingRequire indicates require drives execution for circularity of dynamic modules             // 1670\n             *    - declarative optional boolean indicating which of the above                                         // 1671\n             *                                                                                                         // 1672\n             * Can preload modules directly on System.defined['my/module'] = { deps, execute, executingRequire }       // 1673\n             *                                                                                                         // 1674\n             * Then the entry gets populated with derived information during processing:                               // 1675\n             *    - normalizedDeps derived from deps, created in instantiate                                           // 1676\n             *    - groupIndex used by group linking algorithm                                                         // 1677\n             *    - evaluated indicating whether evaluation has happend                                                // 1678\n             *    - module the module record object, containing:                                                       // 1679\n             *      - exports actual module exports                                                                    // 1680\n             *                                                                                                         // 1681\n             *    For dynamic we track the es module with:                                                             // 1682\n             *    - esModule actual es module value                                                                    // 1683\n             *                                                                                                         // 1684\n             *    Then for declarative only we track dynamic bindings with the 'module' records:                       // 1685\n             *      - name                                                                                             // 1686\n             *      - exports                                                                                          // 1687\n             *      - setters declarative setter functions                                                             // 1688\n             *      - dependencies, module records of dependencies                                                     // 1689\n             *      - importers, module records of dependents                                                          // 1690\n             *                                                                                                         // 1691\n             * After linked and evaluated, entries are removed, declarative module records remain in separate          // 1692\n             * module binding table                                                                                    // 1693\n             *                                                                                                         // 1694\n             */                                                                                                        // 1695\n            hookConstructor(function(constructor) {                                                                    // 1696\n                return function() {                                                                                    // 1697\n                    constructor.call(this);                                                                            // 1698\n                                                                                                                       // 1699\n                    this.defined = {};                                                                                 // 1700\n                    this._loader.moduleRecords = {};                                                                   // 1701\n                };                                                                                                     // 1702\n            });                                                                                                        // 1703\n                                                                                                                       // 1704\n            // script injection mode calls this function synchronously on load                                         // 1705\n            hook('onScriptLoad', function(onScriptLoad) {                                                              // 1706\n                return function(load) {                                                                                // 1707\n                    onScriptLoad.call(this, load);                                                                     // 1708\n                                                                                                                       // 1709\n                    // anonymous define                                                                                // 1710\n                    if (anonRegister)                                                                                  // 1711\n                        load.metadata.entry = anonRegister;                                                            // 1712\n                                                                                                                       // 1713\n                    if (calledRegister) {                                                                              // 1714\n                        load.metadata.format = load.metadata.format || 'defined';                                      // 1715\n                        load.metadata.registered = true;                                                               // 1716\n                        calledRegister = false;                                                                        // 1717\n                        anonRegister = null;                                                                           // 1718\n                    }                                                                                                  // 1719\n                };                                                                                                     // 1720\n            });                                                                                                        // 1721\n                                                                                                                       // 1722\n            function buildGroups(entry, loader, groups) {                                                              // 1723\n                groups[entry.groupIndex] = groups[entry.groupIndex] || [];                                             // 1724\n                                                                                                                       // 1725\n                if (indexOf.call(groups[entry.groupIndex], entry) != -1)                                               // 1726\n                    return;                                                                                            // 1727\n                                                                                                                       // 1728\n                groups[entry.groupIndex].push(entry);                                                                  // 1729\n                                                                                                                       // 1730\n                for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {                                         // 1731\n                    var depName = entry.normalizedDeps[i];                                                             // 1732\n                    var depEntry = loader.defined[depName];                                                            // 1733\n                                                                                                                       // 1734\n                    // not in the registry means already linked / ES6                                                  // 1735\n                    if (!depEntry || depEntry.evaluated)                                                               // 1736\n                        continue;                                                                                      // 1737\n                                                                                                                       // 1738\n                    // now we know the entry is in our unlinked linkage group                                          // 1739\n                    var depGroupIndex = entry.groupIndex + (depEntry.declarative != entry.declarative);                // 1740\n                                                                                                                       // 1741\n                    // the group index of an entry is always the maximum                                               // 1742\n                    if (depEntry.groupIndex === undefined || depEntry.groupIndex < depGroupIndex) {                    // 1743\n                                                                                                                       // 1744\n                        // if already in a group, remove from the old group                                            // 1745\n                        if (depEntry.groupIndex !== undefined) {                                                       // 1746\n                            groups[depEntry.groupIndex].splice(indexOf.call(groups[depEntry.groupIndex], depEntry), 1);\n                                                                                                                       // 1748\n                            // if the old group is empty, then we have a mixed depndency cycle                         // 1749\n                            if (groups[depEntry.groupIndex].length == 0)                                               // 1750\n                                throw new TypeError(\"Mixed dependency cycle detected\");                                // 1751\n                        }                                                                                              // 1752\n                                                                                                                       // 1753\n                        depEntry.groupIndex = depGroupIndex;                                                           // 1754\n                    }                                                                                                  // 1755\n                                                                                                                       // 1756\n                    buildGroups(depEntry, loader, groups);                                                             // 1757\n                }                                                                                                      // 1758\n            }                                                                                                          // 1759\n                                                                                                                       // 1760\n            function link(name, loader) {                                                                              // 1761\n                var startEntry = loader.defined[name];                                                                 // 1762\n                                                                                                                       // 1763\n                // skip if already linked                                                                              // 1764\n                if (startEntry.module)                                                                                 // 1765\n                    return;                                                                                            // 1766\n                                                                                                                       // 1767\n                startEntry.groupIndex = 0;                                                                             // 1768\n                                                                                                                       // 1769\n                var groups = [];                                                                                       // 1770\n                                                                                                                       // 1771\n                buildGroups(startEntry, loader, groups);                                                               // 1772\n                                                                                                                       // 1773\n                var curGroupDeclarative = !!startEntry.declarative == groups.length % 2;                               // 1774\n                for (var i = groups.length - 1; i >= 0; i--) {                                                         // 1775\n                    var group = groups[i];                                                                             // 1776\n                    for (var j = 0; j < group.length; j++) {                                                           // 1777\n                        var entry = group[j];                                                                          // 1778\n                                                                                                                       // 1779\n                        // link each group                                                                             // 1780\n                        if (curGroupDeclarative)                                                                       // 1781\n                            linkDeclarativeModule(entry, loader);                                                      // 1782\n                        else                                                                                           // 1783\n                            linkDynamicModule(entry, loader);                                                          // 1784\n                    }                                                                                                  // 1785\n                    curGroupDeclarative = !curGroupDeclarative;                                                        // 1786\n                }                                                                                                      // 1787\n            }                                                                                                          // 1788\n                                                                                                                       // 1789\n            // module binding records                                                                                  // 1790\n            function getOrCreateModuleRecord(name, moduleRecords) {                                                    // 1791\n                return moduleRecords[name] || (moduleRecords[name] = {                                                 // 1792\n                        name: name,                                                                                    // 1793\n                        dependencies: [],                                                                              // 1794\n                        exports: {}, // start from an empty module and extend                                          // 1795\n                        importers: []                                                                                  // 1796\n                    });                                                                                                // 1797\n            }                                                                                                          // 1798\n                                                                                                                       // 1799\n            function linkDeclarativeModule(entry, loader) {                                                            // 1800\n                // only link if already not already started linking (stops at circular)                                // 1801\n                if (entry.module)                                                                                      // 1802\n                    return;                                                                                            // 1803\n                                                                                                                       // 1804\n                var moduleRecords = loader._loader.moduleRecords;                                                      // 1805\n                var module = entry.module = getOrCreateModuleRecord(entry.name, moduleRecords);                        // 1806\n                var exports = entry.module.exports;                                                                    // 1807\n                                                                                                                       // 1808\n                var declaration = entry.declare.call(__global, function(name, value) {                                 // 1809\n                    module.locked = true;                                                                              // 1810\n                                                                                                                       // 1811\n                    if (typeof name == 'object') {                                                                     // 1812\n                        for (var p in name)                                                                            // 1813\n                            exports[p] = name[p];                                                                      // 1814\n                    }                                                                                                  // 1815\n                    else {                                                                                             // 1816\n                        exports[name] = value;                                                                         // 1817\n                    }                                                                                                  // 1818\n                                                                                                                       // 1819\n                    for (var i = 0, l = module.importers.length; i < l; i++) {                                         // 1820\n                        var importerModule = module.importers[i];                                                      // 1821\n                        if (!importerModule.locked) {                                                                  // 1822\n                            var importerIndex = indexOf.call(importerModule.dependencies, module);                     // 1823\n                            importerModule.setters[importerIndex](exports);                                            // 1824\n                        }                                                                                              // 1825\n                    }                                                                                                  // 1826\n                                                                                                                       // 1827\n                    module.locked = false;                                                                             // 1828\n                    return value;                                                                                      // 1829\n                });                                                                                                    // 1830\n                                                                                                                       // 1831\n                module.setters = declaration.setters;                                                                  // 1832\n                module.execute = declaration.execute;                                                                  // 1833\n                                                                                                                       // 1834\n                if (!module.setters || !module.execute) {                                                              // 1835\n                    throw new TypeError('Invalid System.register form for ' + entry.name);                             // 1836\n                }                                                                                                      // 1837\n                                                                                                                       // 1838\n                // now link all the module dependencies                                                                // 1839\n                for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {                                         // 1840\n                    var depName = entry.normalizedDeps[i];                                                             // 1841\n                    var depEntry = loader.defined[depName];                                                            // 1842\n                    var depModule = moduleRecords[depName];                                                            // 1843\n                                                                                                                       // 1844\n                    // work out how to set depExports based on scenarios...                                            // 1845\n                    var depExports;                                                                                    // 1846\n                                                                                                                       // 1847\n                    if (depModule) {                                                                                   // 1848\n                        depExports = depModule.exports;                                                                // 1849\n                    }                                                                                                  // 1850\n                    // dynamic, already linked in our registry                                                         // 1851\n                    else if (depEntry && !depEntry.declarative) {                                                      // 1852\n                        depExports = depEntry.esModule;                                                                // 1853\n                    }                                                                                                  // 1854\n                    // in the loader registry                                                                          // 1855\n                    else if (!depEntry) {                                                                              // 1856\n                        depExports = loader.get(depName);                                                              // 1857\n                    }                                                                                                  // 1858\n                    // we have an entry -> link                                                                        // 1859\n                    else {                                                                                             // 1860\n                        linkDeclarativeModule(depEntry, loader);                                                       // 1861\n                        depModule = depEntry.module;                                                                   // 1862\n                        depExports = depModule.exports;                                                                // 1863\n                    }                                                                                                  // 1864\n                                                                                                                       // 1865\n                    // only declarative modules have dynamic bindings                                                  // 1866\n                    if (depModule && depModule.importers) {                                                            // 1867\n                        depModule.importers.push(module);                                                              // 1868\n                        module.dependencies.push(depModule);                                                           // 1869\n                    }                                                                                                  // 1870\n                    else {                                                                                             // 1871\n                        module.dependencies.push(null);                                                                // 1872\n                    }                                                                                                  // 1873\n                                                                                                                       // 1874\n                    // run the setter for this dependency                                                              // 1875\n                    if (module.setters[i])                                                                             // 1876\n                        module.setters[i](depExports);                                                                 // 1877\n                }                                                                                                      // 1878\n            }                                                                                                          // 1879\n                                                                                                                       // 1880\n            // An analog to loader.get covering execution of all three layers (real declarative, simulated declarative, simulated dynamic)\n            function getModule(name, loader) {                                                                         // 1882\n                var exports;                                                                                           // 1883\n                var entry = loader.defined[name];                                                                      // 1884\n                                                                                                                       // 1885\n                if (!entry) {                                                                                          // 1886\n                    exports = loader.get(name);                                                                        // 1887\n                    if (!exports)                                                                                      // 1888\n                        throw new Error('Unable to load dependency ' + name + '.');                                    // 1889\n                }                                                                                                      // 1890\n                                                                                                                       // 1891\n                else {                                                                                                 // 1892\n                    if (entry.declarative)                                                                             // 1893\n                        ensureEvaluated(name, [], loader);                                                             // 1894\n                                                                                                                       // 1895\n                    else if (!entry.evaluated)                                                                         // 1896\n                        linkDynamicModule(entry, loader);                                                              // 1897\n                                                                                                                       // 1898\n                    exports = entry.module.exports;                                                                    // 1899\n                }                                                                                                      // 1900\n                                                                                                                       // 1901\n                if ((!entry || entry.declarative) && exports && exports.__useDefault)                                  // 1902\n                    return exports['default'];                                                                         // 1903\n                                                                                                                       // 1904\n                return exports;                                                                                        // 1905\n            }                                                                                                          // 1906\n                                                                                                                       // 1907\n            function linkDynamicModule(entry, loader) {                                                                // 1908\n                if (entry.module)                                                                                      // 1909\n                    return;                                                                                            // 1910\n                                                                                                                       // 1911\n                var exports = {};                                                                                      // 1912\n                                                                                                                       // 1913\n                var module = entry.module = { exports: exports, id: entry.name };                                      // 1914\n                                                                                                                       // 1915\n                // AMD requires execute the tree first                                                                 // 1916\n                if (!entry.executingRequire) {                                                                         // 1917\n                    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {                                     // 1918\n                        var depName = entry.normalizedDeps[i];                                                         // 1919\n                        // we know we only need to link dynamic due to linking algorithm                               // 1920\n                        var depEntry = loader.defined[depName];                                                        // 1921\n                        if (depEntry)                                                                                  // 1922\n                            linkDynamicModule(depEntry, loader);                                                       // 1923\n                    }                                                                                                  // 1924\n                }                                                                                                      // 1925\n                                                                                                                       // 1926\n                // now execute                                                                                         // 1927\n                entry.evaluated = true;                                                                                // 1928\n                var output = entry.execute.call(__global, function(name) {                                             // 1929\n                    for (var i = 0, l = entry.deps.length; i < l; i++) {                                               // 1930\n                        if (entry.deps[i] != name)                                                                     // 1931\n                            continue;                                                                                  // 1932\n                        return getModule(entry.normalizedDeps[i], loader);                                             // 1933\n                    }                                                                                                  // 1934\n                    throw new TypeError('Module ' + name + ' not declared as a dependency.');                          // 1935\n                }, exports, module);                                                                                   // 1936\n                                                                                                                       // 1937\n                if (output)                                                                                            // 1938\n                    module.exports = output;                                                                           // 1939\n                                                                                                                       // 1940\n                // create the esModule object, which allows ES6 named imports of dynamics                              // 1941\n                exports = module.exports;                                                                              // 1942\n                                                                                                                       // 1943\n                if (exports && exports.__esModule) {                                                                   // 1944\n                    entry.esModule = exports;                                                                          // 1945\n                }                                                                                                      // 1946\n                else {                                                                                                 // 1947\n                    entry.esModule = {};                                                                               // 1948\n                                                                                                                       // 1949\n                    // don't trigger getters/setters in environments that support them                                 // 1950\n                    if (typeof exports == 'object' || typeof exports == 'function') {                                  // 1951\n                        if (Object.getOwnPropertyDescriptor) {                                                         // 1952\n                            var d;                                                                                     // 1953\n                            for (var p in exports)                                                                     // 1954\n                                if (d = Object.getOwnPropertyDescriptor(exports, p))                                   // 1955\n                                    Object.defineProperty(entry.esModule, p, d);                                       // 1956\n                        }                                                                                              // 1957\n                        else {                                                                                         // 1958\n                            var hasOwnProperty = exports && exports.hasOwnProperty;                                    // 1959\n                            for (var p in exports) {                                                                   // 1960\n                                if (!hasOwnProperty || exports.hasOwnProperty(p))                                      // 1961\n                                    entry.esModule[p] = exports[p];                                                    // 1962\n                            }                                                                                          // 1963\n                        }                                                                                              // 1964\n                    }                                                                                                  // 1965\n                    entry.esModule['default'] = exports;                                                               // 1966\n                    defineProperty(entry.esModule, '__useDefault', {                                                   // 1967\n                        value: true                                                                                    // 1968\n                    });                                                                                                // 1969\n                }                                                                                                      // 1970\n            }                                                                                                          // 1971\n                                                                                                                       // 1972\n            /*                                                                                                         // 1973\n             * Given a module, and the list of modules for this current branch,                                        // 1974\n             *  ensure that each of the dependencies of this module is evaluated                                       // 1975\n             *  (unless one is a circular dependency already in the list of seen                                       // 1976\n             *  modules, in which case we execute it)                                                                  // 1977\n             *                                                                                                         // 1978\n             * Then we evaluate the module itself depth-first left to right                                            // 1979\n             * execution to match ES6 modules                                                                          // 1980\n             */                                                                                                        // 1981\n            function ensureEvaluated(moduleName, seen, loader) {                                                       // 1982\n                var entry = loader.defined[moduleName];                                                                // 1983\n                                                                                                                       // 1984\n                // if already seen, that means it's an already-evaluated non circular dependency                       // 1985\n                if (!entry || entry.evaluated || !entry.declarative)                                                   // 1986\n                    return;                                                                                            // 1987\n                                                                                                                       // 1988\n                // this only applies to declarative modules which late-execute                                         // 1989\n                                                                                                                       // 1990\n                seen.push(moduleName);                                                                                 // 1991\n                                                                                                                       // 1992\n                for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {                                         // 1993\n                    var depName = entry.normalizedDeps[i];                                                             // 1994\n                    if (indexOf.call(seen, depName) == -1) {                                                           // 1995\n                        if (!loader.defined[depName])                                                                  // 1996\n                            loader.get(depName);                                                                       // 1997\n                        else                                                                                           // 1998\n                            ensureEvaluated(depName, seen, loader);                                                    // 1999\n                    }                                                                                                  // 2000\n                }                                                                                                      // 2001\n                                                                                                                       // 2002\n                if (entry.evaluated)                                                                                   // 2003\n                    return;                                                                                            // 2004\n                                                                                                                       // 2005\n                entry.evaluated = true;                                                                                // 2006\n                entry.module.execute.call(__global);                                                                   // 2007\n            }                                                                                                          // 2008\n                                                                                                                       // 2009\n            // override the delete method to also clear the register caches                                            // 2010\n            hook('delete', function(del) {                                                                             // 2011\n                return function(name) {                                                                                // 2012\n                    delete this._loader.moduleRecords[name];                                                           // 2013\n                    delete this.defined[name];                                                                         // 2014\n                    return del.call(this, name);                                                                       // 2015\n                };                                                                                                     // 2016\n            });                                                                                                        // 2017\n                                                                                                                       // 2018\n            var registerRegEx = /^\\s*(\\/\\*.*\\*\\/\\s*|\\/\\/[^\\n]*\\s*)*System\\.register(Dynamic)?\\s*\\(/;                   // 2019\n                                                                                                                       // 2020\n            hook('fetch', function(fetch) {                                                                            // 2021\n                return function(load) {                                                                                // 2022\n                    if (this.defined[load.name]) {                                                                     // 2023\n                        load.metadata.format = 'defined';                                                              // 2024\n                        return '';                                                                                     // 2025\n                    }                                                                                                  // 2026\n                                                                                                                       // 2027\n                    // this is the synchronous chain for onScriptLoad                                                  // 2028\n                    anonRegister = null;                                                                               // 2029\n                    calledRegister = false;                                                                            // 2030\n                                                                                                                       // 2031\n                    if (load.metadata.format == 'register')                                                            // 2032\n                        load.metadata.scriptLoad = true;                                                               // 2033\n                                                                                                                       // 2034\n                    // NB remove when \"deps \" is deprecated                                                            // 2035\n                    load.metadata.deps = load.metadata.deps || [];                                                     // 2036\n                                                                                                                       // 2037\n                    return fetch.call(this, load);                                                                     // 2038\n                };                                                                                                     // 2039\n            });                                                                                                        // 2040\n                                                                                                                       // 2041\n            hook('translate', function(translate) {                                                                    // 2042\n                // we run the meta detection here (register is after meta)                                             // 2043\n                return function(load) {                                                                                // 2044\n                    return Promise.resolve(translate.call(this, load)).then(function(source) {                         // 2045\n                                                                                                                       // 2046\n                        if (typeof load.metadata.deps === 'string')                                                    // 2047\n                            load.metadata.deps = load.metadata.deps.split(',');                                        // 2048\n                        load.metadata.deps = load.metadata.deps || [];                                                 // 2049\n                                                                                                                       // 2050\n                        // run detection for register format                                                           // 2051\n                        if (load.metadata.format == 'register' || !load.metadata.format && load.source.match(registerRegEx))\n                            load.metadata.format = 'register';                                                         // 2053\n                        return source;                                                                                 // 2054\n                    });                                                                                                // 2055\n                };                                                                                                     // 2056\n            });                                                                                                        // 2057\n                                                                                                                       // 2058\n            hook('instantiate', function(instantiate) {                                                                // 2059\n                return function(load) {                                                                                // 2060\n                    var loader = this;                                                                                 // 2061\n                                                                                                                       // 2062\n                    var entry;                                                                                         // 2063\n                                                                                                                       // 2064\n                    // first we check if this module has already been defined in the registry                          // 2065\n                    if (loader.defined[load.name]) {                                                                   // 2066\n                        entry = loader.defined[load.name];                                                             // 2067\n                        entry.deps = entry.deps.concat(load.metadata.deps);                                            // 2068\n                    }                                                                                                  // 2069\n                                                                                                                       // 2070\n                    // picked up already by a script injection                                                         // 2071\n                    else if (load.metadata.entry)                                                                      // 2072\n                        entry = load.metadata.entry;                                                                   // 2073\n                                                                                                                       // 2074\n                    // otherwise check if it is dynamic                                                                // 2075\n                    else if (load.metadata.execute) {                                                                  // 2076\n                        entry = {                                                                                      // 2077\n                            declarative: false,                                                                        // 2078\n                            deps: load.metadata.deps || [],                                                            // 2079\n                            execute: load.metadata.execute,                                                            // 2080\n                            executingRequire: load.metadata.executingRequire // NodeJS-style requires or not           // 2081\n                        };                                                                                             // 2082\n                    }                                                                                                  // 2083\n                                                                                                                       // 2084\n                    // Contains System.register calls                                                                  // 2085\n                    else if (load.metadata.format == 'register' || load.metadata.format == 'esm' || load.metadata.format == 'es6') {\n                        anonRegister = null;                                                                           // 2087\n                        calledRegister = false;                                                                        // 2088\n                                                                                                                       // 2089\n                        __exec.call(loader, load);                                                                     // 2090\n                                                                                                                       // 2091\n                        if (anonRegister)                                                                              // 2092\n                            entry = anonRegister;                                                                      // 2093\n                        else                                                                                           // 2094\n                            load.metadata.bundle = true;                                                               // 2095\n                                                                                                                       // 2096\n                        if (!entry && loader.defined[load.name])                                                       // 2097\n                            entry = loader.defined[load.name];                                                         // 2098\n                                                                                                                       // 2099\n                        if (!calledRegister && !load.metadata.registered)                                              // 2100\n                            throw new TypeError(load.name + ' detected as System.register but didn\\'t execute.');      // 2101\n                    }                                                                                                  // 2102\n                                                                                                                       // 2103\n                    // named bundles are just an empty module                                                          // 2104\n                    if (!entry)                                                                                        // 2105\n                        entry = {                                                                                      // 2106\n                            declarative: false,                                                                        // 2107\n                            deps: load.metadata.deps,                                                                  // 2108\n                            execute: function() {                                                                      // 2109\n                                return loader.newModule({});                                                           // 2110\n                            }                                                                                          // 2111\n                        };                                                                                             // 2112\n                                                                                                                       // 2113\n                    // place this module onto defined for circular references                                          // 2114\n                    loader.defined[load.name] = entry;                                                                 // 2115\n                                                                                                                       // 2116\n                    entry.deps = dedupe(entry.deps);                                                                   // 2117\n                    entry.name = load.name;                                                                            // 2118\n                                                                                                                       // 2119\n                    // first, normalize all dependencies                                                               // 2120\n                    var normalizePromises = [];                                                                        // 2121\n                    for (var i = 0, l = entry.deps.length; i < l; i++)                                                 // 2122\n                        normalizePromises.push(Promise.resolve(loader.normalize(entry.deps[i], load.name)));           // 2123\n                                                                                                                       // 2124\n                    return Promise.all(normalizePromises).then(function(normalizedDeps) {                              // 2125\n                                                                                                                       // 2126\n                        entry.normalizedDeps = normalizedDeps;                                                         // 2127\n                                                                                                                       // 2128\n                        return {                                                                                       // 2129\n                            deps: entry.deps,                                                                          // 2130\n                            execute: function() {                                                                      // 2131\n                                // recursively ensure that the module and all its                                      // 2132\n                                // dependencies are linked (with dependency group handling)                            // 2133\n                                link(load.name, loader);                                                               // 2134\n                                                                                                                       // 2135\n                                // now handle dependency execution in correct order                                    // 2136\n                                ensureEvaluated(load.name, [], loader);                                                // 2137\n                                                                                                                       // 2138\n                                // remove from the registry                                                            // 2139\n                                loader.defined[load.name] = undefined;                                                 // 2140\n                                                                                                                       // 2141\n                                // return the defined module object                                                    // 2142\n                                return loader.newModule(entry.declarative ? entry.module.exports : entry.esModule);    // 2143\n                            }                                                                                          // 2144\n                        };                                                                                             // 2145\n                    });                                                                                                // 2146\n                };                                                                                                     // 2147\n            });                                                                                                        // 2148\n        })();                                                                                                          // 2149\n        /*                                                                                                             // 2150\n         * Extension to detect ES6 and auto-load Traceur or Babel for processing                                       // 2151\n         */                                                                                                            // 2152\n        (function() {                                                                                                  // 2153\n            // good enough ES6 module detection regex - format detections not designed to be accurate, but to handle the 99% use case\n            var esmRegEx = /(^\\s*|[}\\);\\n]\\s*)(import\\s+(['\"]|(\\*\\s+as\\s+)?[^\"'\\(\\)\\n;]+\\s+from\\s+['\"]|\\{)|export\\s+\\*\\s+from\\s+[\"']|export\\s+(\\{|default|function|class|var|const|let|async\\s+function))/;\n                                                                                                                       // 2156\n            var traceurRuntimeRegEx = /\\$traceurRuntime\\s*\\./;                                                         // 2157\n            var babelHelpersRegEx = /babelHelpers\\s*\\./;                                                               // 2158\n                                                                                                                       // 2159\n            hook('translate', function(translate) {                                                                    // 2160\n                return function(load) {                                                                                // 2161\n                    var loader = this;                                                                                 // 2162\n                    return translate.call(loader, load)                                                                // 2163\n                        .then(function(source) {                                                                       // 2164\n                            // detect & transpile ES6                                                                  // 2165\n                            if (load.metadata.format == 'esm' || load.metadata.format == 'es6' || !load.metadata.format && source.match(esmRegEx)) {\n                                load.metadata.format = 'esm';                                                          // 2167\n                                                                                                                       // 2168\n                                // setting _loadedTranspiler = false tells the next block to                           // 2169\n                                // do checks for setting transpiler metadata                                           // 2170\n                                loader._loadedTranspiler = loader._loadedTranspiler || false;                          // 2171\n                                if (loader.pluginLoader)                                                               // 2172\n                                    loader.pluginLoader._loadedTranspiler = loader._loadedTranspiler || false;         // 2173\n                                                                                                                       // 2174\n                                // defined in es6-module-loader/src/transpile.js                                       // 2175\n                                return transpile.call(loader, load)                                                    // 2176\n                                    .then(function(source) {                                                           // 2177\n                                        // clear sourceMap as transpiler embeds it                                     // 2178\n                                        load.metadata.sourceMap = undefined;                                           // 2179\n                                        return source;                                                                 // 2180\n                                    });                                                                                // 2181\n                            }                                                                                          // 2182\n                                                                                                                       // 2183\n                            // load the transpiler correctly                                                           // 2184\n                            if (loader._loadedTranspiler === false && load.name == loader.normalizeSync(loader.transpiler)) {\n                                // always load transpiler as a global                                                  // 2186\n                                if (source.length > 100) {                                                             // 2187\n                                    load.metadata.format = load.metadata.format || 'global';                           // 2188\n                                                                                                                       // 2189\n                                    if (loader.transpiler === 'traceur')                                               // 2190\n                                        load.metadata.exports = 'traceur';                                             // 2191\n                                    if (loader.transpiler === 'typescript')                                            // 2192\n                                        load.metadata.exports = 'ts';                                                  // 2193\n                                }                                                                                      // 2194\n                                                                                                                       // 2195\n                                loader._loadedTranspiler = true;                                                       // 2196\n                            }                                                                                          // 2197\n                                                                                                                       // 2198\n                            // load the transpiler runtime correctly                                                   // 2199\n                            if (loader._loadedTranspilerRuntime === false) {                                           // 2200\n                                if (load.name == loader.normalizeSync('traceur-runtime')                               // 2201\n                                    || load.name == loader.normalizeSync('babel/external-helpers*')) {                 // 2202\n                                    if (source.length > 100)                                                           // 2203\n                                        load.metadata.format = load.metadata.format || 'global';                       // 2204\n                                                                                                                       // 2205\n                                    loader._loadedTranspilerRuntime = true;                                            // 2206\n                                }                                                                                      // 2207\n                            }                                                                                          // 2208\n                                                                                                                       // 2209\n                            // detect transpiler runtime usage to load runtimes                                        // 2210\n                            if (load.metadata.format == 'register' && loader._loadedTranspilerRuntime !== true) {      // 2211\n                                if (!__global.$traceurRuntime && load.source.match(traceurRuntimeRegEx)) {             // 2212\n                                    loader._loadedTranspilerRuntime = loader._loadedTranspilerRuntime || false;        // 2213\n                                    return loader['import']('traceur-runtime').then(function() {                       // 2214\n                                        return source;                                                                 // 2215\n                                    });                                                                                // 2216\n                                }                                                                                      // 2217\n                                if (!__global.babelHelpers && load.source.match(babelHelpersRegEx)) {                  // 2218\n                                    loader._loadedTranspilerRuntime = loader._loadedTranspilerRuntime || false;        // 2219\n                                    return loader['import']('babel/external-helpers').then(function() {                // 2220\n                                        return source;                                                                 // 2221\n                                    });                                                                                // 2222\n                                }                                                                                      // 2223\n                            }                                                                                          // 2224\n                                                                                                                       // 2225\n                            return source;                                                                             // 2226\n                        });                                                                                            // 2227\n                };                                                                                                     // 2228\n            });                                                                                                        // 2229\n                                                                                                                       // 2230\n        })();                                                                                                          // 2231\n        /*                                                                                                             // 2232\n         SystemJS Global Format                                                                                        // 2233\n                                                                                                                       // 2234\n         Supports                                                                                                      // 2235\n         metadata.deps                                                                                                 // 2236\n         metadata.globals                                                                                              // 2237\n         metadata.exports                                                                                              // 2238\n                                                                                                                       // 2239\n         Without metadata.exports, detects writes to the global object.                                                // 2240\n         */                                                                                                            // 2241\n        var __globalName = typeof self != 'undefined' ? 'self' : 'global';                                             // 2242\n                                                                                                                       // 2243\n        hook('onScriptLoad', function(onScriptLoad) {                                                                  // 2244\n            return function(load) {                                                                                    // 2245\n                if (load.metadata.format == 'global') {                                                                // 2246\n                    load.metadata.registered = true;                                                                   // 2247\n                    var globalValue = readMemberExpression(load.metadata.exports, __global);                           // 2248\n                    load.metadata.execute = function() {                                                               // 2249\n                        return globalValue;                                                                            // 2250\n                    }                                                                                                  // 2251\n                }                                                                                                      // 2252\n                return onScriptLoad.call(this, load);                                                                  // 2253\n            };                                                                                                         // 2254\n        });                                                                                                            // 2255\n                                                                                                                       // 2256\n        hook('fetch', function(fetch) {                                                                                // 2257\n            return function(load) {                                                                                    // 2258\n                if (load.metadata.exports)                                                                             // 2259\n                    load.metadata.format = 'global';                                                                   // 2260\n                                                                                                                       // 2261\n                // A global with exports, no globals and no deps                                                       // 2262\n                // can be loaded via a script tag                                                                      // 2263\n                if (load.metadata.format == 'global'                                                                   // 2264\n                    && load.metadata.exports && !load.metadata.globals                                                 // 2265\n                    && (!load.metadata.deps || load.metadata.deps.length == 0))                                        // 2266\n                    load.metadata.scriptLoad = true;                                                                   // 2267\n                                                                                                                       // 2268\n                return fetch.call(this, load);                                                                         // 2269\n            };                                                                                                         // 2270\n        });                                                                                                            // 2271\n                                                                                                                       // 2272\n// ideally we could support script loading for globals, but the issue with that is that                                // 2273\n// we can't do it with AMD support side-by-side since AMD support means defining the                                   // 2274\n// global define, and global support means not definining it, yet we don't have any hook                               // 2275\n// into the \"pre-execution\" phase of a script tag being loaded to handle both cases                                    // 2276\n                                                                                                                       // 2277\n                                                                                                                       // 2278\n        hook('instantiate', function(instantiate) {                                                                    // 2279\n            return function(load) {                                                                                    // 2280\n                var loader = this;                                                                                     // 2281\n                                                                                                                       // 2282\n                if (!load.metadata.format)                                                                             // 2283\n                    load.metadata.format = 'global';                                                                   // 2284\n                                                                                                                       // 2285\n                // add globals as dependencies                                                                         // 2286\n                if (load.metadata.globals)                                                                             // 2287\n                    for (var g in load.metadata.globals)                                                               // 2288\n                        load.metadata.deps.push(load.metadata.globals[g]);                                             // 2289\n                                                                                                                       // 2290\n                // global is a fallback module format                                                                  // 2291\n                if (load.metadata.format == 'global' && !load.metadata.registered) {                                   // 2292\n                    load.metadata.execute = function(require, exports, module) {                                       // 2293\n                                                                                                                       // 2294\n                        var globals;                                                                                   // 2295\n                        if (load.metadata.globals) {                                                                   // 2296\n                            globals = {};                                                                              // 2297\n                            for (var g in load.metadata.globals)                                                       // 2298\n                                globals[g] = require(load.metadata.globals[g]);                                        // 2299\n                        }                                                                                              // 2300\n                                                                                                                       // 2301\n                        var exportName = load.metadata.exports;                                                        // 2302\n                        var retrieveGlobal = loader.get('@@global-helpers').prepareGlobal(module.id, exportName, globals);\n                                                                                                                       // 2304\n                        if (exportName)                                                                                // 2305\n                            load.source += '\\n' + __globalName + '[\"' + exportName + '\"] = ' + exportName + ';';       // 2306\n                                                                                                                       // 2307\n                        // disable module detection                                                                    // 2308\n                        var define = __global.define;                                                                  // 2309\n                        var cRequire = __global.require;                                                               // 2310\n                                                                                                                       // 2311\n                        __global.define = undefined;                                                                   // 2312\n                        __global.module = undefined;                                                                   // 2313\n                        __global.exports = undefined;                                                                  // 2314\n                                                                                                                       // 2315\n                        __exec.call(loader, load);                                                                     // 2316\n                                                                                                                       // 2317\n                        __global.require = cRequire;                                                                   // 2318\n                        __global.define = define;                                                                      // 2319\n                                                                                                                       // 2320\n                        return retrieveGlobal();                                                                       // 2321\n                    }                                                                                                  // 2322\n                }                                                                                                      // 2323\n                return instantiate.call(this, load);                                                                   // 2324\n            };                                                                                                         // 2325\n        });                                                                                                            // 2326\n        hookConstructor(function(constructor) {                                                                        // 2327\n            return function() {                                                                                        // 2328\n                var loader = this;                                                                                     // 2329\n                constructor.call(loader);                                                                              // 2330\n                                                                                                                       // 2331\n                var hasOwnProperty = Object.prototype.hasOwnProperty;                                                  // 2332\n                                                                                                                       // 2333\n                // bare minimum ignores for IE8                                                                        // 2334\n                var ignoredGlobalProps = ['_g', 'sessionStorage', 'localStorage', 'clipboardData', 'frames', 'external'];\n                                                                                                                       // 2336\n                var globalSnapshot;                                                                                    // 2337\n                                                                                                                       // 2338\n                function forEachGlobal(callback) {                                                                     // 2339\n                    if (Object.keys)                                                                                   // 2340\n                        Object.keys(__global).forEach(callback);                                                       // 2341\n                    else                                                                                               // 2342\n                        for (var g in __global) {                                                                      // 2343\n                            if (!hasOwnProperty.call(__global, g))                                                     // 2344\n                                continue;                                                                              // 2345\n                            callback(g);                                                                               // 2346\n                        }                                                                                              // 2347\n                }                                                                                                      // 2348\n                                                                                                                       // 2349\n                function forEachGlobalValue(callback) {                                                                // 2350\n                    forEachGlobal(function(globalName) {                                                               // 2351\n                        if (indexOf.call(ignoredGlobalProps, globalName) != -1)                                        // 2352\n                            return;                                                                                    // 2353\n                        try {                                                                                          // 2354\n                            var value = __global[globalName];                                                          // 2355\n                        }                                                                                              // 2356\n                        catch (e) {                                                                                    // 2357\n                            ignoredGlobalProps.push(globalName);                                                       // 2358\n                        }                                                                                              // 2359\n                        callback(globalName, value);                                                                   // 2360\n                    });                                                                                                // 2361\n                }                                                                                                      // 2362\n                                                                                                                       // 2363\n                loader.set('@@global-helpers', loader.newModule({                                                      // 2364\n                    prepareGlobal: function(moduleName, exportName, globals) {                                         // 2365\n                        // set globals                                                                                 // 2366\n                        var oldGlobals;                                                                                // 2367\n                        if (globals) {                                                                                 // 2368\n                            oldGlobals = {};                                                                           // 2369\n                            for (var g in globals) {                                                                   // 2370\n                                oldGlobals[g] = globals[g];                                                            // 2371\n                                __global[g] = globals[g];                                                              // 2372\n                            }                                                                                          // 2373\n                        }                                                                                              // 2374\n                                                                                                                       // 2375\n                        // store a complete copy of the global object in order to detect changes                       // 2376\n                        if (!exportName) {                                                                             // 2377\n                            globalSnapshot = {};                                                                       // 2378\n                                                                                                                       // 2379\n                            forEachGlobalValue(function(name, value) {                                                 // 2380\n                                globalSnapshot[name] = value;                                                          // 2381\n                            });                                                                                        // 2382\n                        }                                                                                              // 2383\n                                                                                                                       // 2384\n                        // return function to retrieve global                                                          // 2385\n                        return function() {                                                                            // 2386\n                            var globalValue;                                                                           // 2387\n                                                                                                                       // 2388\n                            if (exportName) {                                                                          // 2389\n                                globalValue = readMemberExpression(exportName, __global);                              // 2390\n                            }                                                                                          // 2391\n                            else {                                                                                     // 2392\n                                var singleGlobal;                                                                      // 2393\n                                var multipleExports;                                                                   // 2394\n                                var exports = {};                                                                      // 2395\n                                                                                                                       // 2396\n                                forEachGlobalValue(function(name, value) {                                             // 2397\n                                    if (globalSnapshot[name] === value)                                                // 2398\n                                        return;                                                                        // 2399\n                                    if (typeof value == 'undefined')                                                   // 2400\n                                        return;                                                                        // 2401\n                                    exports[name] = value;                                                             // 2402\n                                                                                                                       // 2403\n                                    if (typeof singleGlobal != 'undefined') {                                          // 2404\n                                        if (!multipleExports && singleGlobal !== value)                                // 2405\n                                            multipleExports = true;                                                    // 2406\n                                    }                                                                                  // 2407\n                                    else {                                                                             // 2408\n                                        singleGlobal = value;                                                          // 2409\n                                    }                                                                                  // 2410\n                                });                                                                                    // 2411\n                                globalValue = multipleExports ? exports : singleGlobal;                                // 2412\n                            }                                                                                          // 2413\n                                                                                                                       // 2414\n                            // revert globals                                                                          // 2415\n                            if (oldGlobals) {                                                                          // 2416\n                                for (var g in oldGlobals)                                                              // 2417\n                                    __global[g] = oldGlobals[g];                                                       // 2418\n                            }                                                                                          // 2419\n                                                                                                                       // 2420\n                            return globalValue;                                                                        // 2421\n                        };                                                                                             // 2422\n                    }                                                                                                  // 2423\n                }));                                                                                                   // 2424\n            };                                                                                                         // 2425\n        });/*                                                                                                          // 2426\n         SystemJS CommonJS Format                                                                                      // 2427\n         */                                                                                                            // 2428\n        (function() {                                                                                                  // 2429\n            // CJS Module Format                                                                                       // 2430\n            // require('...') || exports[''] = ... || exports.asd = ... || module.exports = ...                        // 2431\n            var cjsExportsRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.]|module\\.)exports\\s*(\\[['\"]|\\.)|(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])module\\.exports\\s*[=,]/;\n            // RegEx adjusted from https://github.com/jbrantly/yabble/blob/master/lib/yabble.js#L339                   // 2433\n            var cjsRequireRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.\"'])require\\s*\\(\\s*(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')\\s*\\)/g;\n            var commentRegEx = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg;                                             // 2435\n                                                                                                                       // 2436\n            function getCJSDeps(source) {                                                                              // 2437\n                cjsRequireRegEx.lastIndex = 0;                                                                         // 2438\n                                                                                                                       // 2439\n                var deps = [];                                                                                         // 2440\n                                                                                                                       // 2441\n                // remove comments from the source first, if not minified                                              // 2442\n                if (source.length / source.split('\\n').length < 200)                                                   // 2443\n                    source = source.replace(commentRegEx, '');                                                         // 2444\n                                                                                                                       // 2445\n                var match;                                                                                             // 2446\n                                                                                                                       // 2447\n                while (match = cjsRequireRegEx.exec(source))                                                           // 2448\n                    deps.push(match[1].substr(1, match[1].length - 2));                                                // 2449\n                                                                                                                       // 2450\n                return deps;                                                                                           // 2451\n            }                                                                                                          // 2452\n                                                                                                                       // 2453\n            if (typeof window != 'undefined' && typeof document != 'undefined' && window.location)                     // 2454\n                var windowOrigin = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');\n                                                                                                                       // 2456\n            hookConstructor(function(constructor) {                                                                    // 2457\n                return function() {                                                                                    // 2458\n                    constructor.call(this);                                                                            // 2459\n                                                                                                                       // 2460\n                    // include the node require since we're overriding it                                              // 2461\n                    if (typeof require != 'undefined' && require.resolve && typeof process != 'undefined')             // 2462\n                        this._nodeRequire = require;                                                                   // 2463\n                };                                                                                                     // 2464\n            });                                                                                                        // 2465\n                                                                                                                       // 2466\n            hook('instantiate', function(instantiate) {                                                                // 2467\n                return function(load) {                                                                                // 2468\n                    var loader = this;                                                                                 // 2469\n                    if (!load.metadata.format) {                                                                       // 2470\n                        cjsExportsRegEx.lastIndex = 0;                                                                 // 2471\n                        cjsRequireRegEx.lastIndex = 0;                                                                 // 2472\n                        if (cjsRequireRegEx.exec(load.source) || cjsExportsRegEx.exec(load.source))                    // 2473\n                            load.metadata.format = 'cjs';                                                              // 2474\n                    }                                                                                                  // 2475\n                                                                                                                       // 2476\n                    if (load.metadata.format == 'cjs') {                                                               // 2477\n                        var metaDeps = load.metadata.deps || [];                                                       // 2478\n                        load.metadata.deps = metaDeps.concat(getCJSDeps(load.source));                                 // 2479\n                                                                                                                       // 2480\n                        load.metadata.executingRequire = true;                                                         // 2481\n                                                                                                                       // 2482\n                        load.metadata.execute = function(require, exports, module) {                                   // 2483\n                            // ensure meta deps execute first                                                          // 2484\n                            for (var i = 0; i < metaDeps.length; i++)                                                  // 2485\n                                require(metaDeps[i]);                                                                  // 2486\n                            var address = load.address || '';                                                          // 2487\n                                                                                                                       // 2488\n                            var dirname = address.split('/');                                                          // 2489\n                            dirname.pop();                                                                             // 2490\n                            dirname = dirname.join('/');                                                               // 2491\n                                                                                                                       // 2492\n                            if (windowOrigin && address.substr(0, windowOrigin.length) === windowOrigin) {             // 2493\n                                address = address.substr(windowOrigin.length);                                         // 2494\n                                dirname = dirname.substr(windowOrigin.length);                                         // 2495\n                            }                                                                                          // 2496\n                            else if (address.substr(0, 8) == 'file:///') {                                             // 2497\n                                address = address.substr(7);                                                           // 2498\n                                dirname = dirname.substr(7);                                                           // 2499\n                                                                                                                       // 2500\n                                // on windows remove leading '/'                                                       // 2501\n                                if (isWindows) {                                                                       // 2502\n                                    address = address.substr(1);                                                       // 2503\n                                    dirname = dirname.substr(1);                                                       // 2504\n                                }                                                                                      // 2505\n                            }                                                                                          // 2506\n                                                                                                                       // 2507\n                            // disable AMD detection                                                                   // 2508\n                            var define = __global.define;                                                              // 2509\n                            __global.define = undefined;                                                               // 2510\n                                                                                                                       // 2511\n                            __global.__cjsWrapper = {                                                                  // 2512\n                                exports: exports,                                                                      // 2513\n                                args: [require, exports, module, address, dirname, __global]                           // 2514\n                            };                                                                                         // 2515\n                                                                                                                       // 2516\n                            load.source = \"(function(require, exports, module, __filename, __dirname, global) {\"       // 2517\n                                + load.source + \"\\n}).apply(__cjsWrapper.exports, __cjsWrapper.args);\";                // 2518\n                                                                                                                       // 2519\n                            __exec.call(loader, load);                                                                 // 2520\n                                                                                                                       // 2521\n                            __global.__cjsWrapper = undefined;                                                         // 2522\n                            __global.define = define;                                                                  // 2523\n                        };                                                                                             // 2524\n                    }                                                                                                  // 2525\n                                                                                                                       // 2526\n                    return instantiate.call(loader, load);                                                             // 2527\n                };                                                                                                     // 2528\n            });                                                                                                        // 2529\n        })();                                                                                                          // 2530\n        /*                                                                                                             // 2531\n         * AMD Helper function module                                                                                  // 2532\n         * Separated into its own file as this is the part needed for full AMD support in SFX builds                   // 2533\n         *                                                                                                             // 2534\n         */                                                                                                            // 2535\n        hookConstructor(function(constructor) {                                                                        // 2536\n            return function() {                                                                                        // 2537\n                var loader = this;                                                                                     // 2538\n                constructor.call(this);                                                                                // 2539\n                                                                                                                       // 2540\n                var commentRegEx = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg;                                         // 2541\n                var cjsRequirePre = \"(?:^|[^$_a-zA-Z\\\\xA0-\\\\uFFFF.])\";                                                 // 2542\n                var cjsRequirePost = \"\\\\s*\\\\(\\\\s*(\\\"([^\\\"]+)\\\"|'([^']+)')\\\\s*\\\\)\";                                     // 2543\n                var fnBracketRegEx = /\\(([^\\)]*)\\)/;                                                                   // 2544\n                var wsRegEx = /^\\s+|\\s+$/g;                                                                            // 2545\n                                                                                                                       // 2546\n                var requireRegExs = {};                                                                                // 2547\n                                                                                                                       // 2548\n                function getCJSDeps(source, requireIndex) {                                                            // 2549\n                                                                                                                       // 2550\n                    // remove comments                                                                                 // 2551\n                    source = source.replace(commentRegEx, '');                                                         // 2552\n                                                                                                                       // 2553\n                    // determine the require alias                                                                     // 2554\n                    var params = source.match(fnBracketRegEx);                                                         // 2555\n                    var requireAlias = (params[1].split(',')[requireIndex] || 'require').replace(wsRegEx, '');         // 2556\n                                                                                                                       // 2557\n                    // find or generate the regex for this requireAlias                                                // 2558\n                    var requireRegEx = requireRegExs[requireAlias] || (requireRegExs[requireAlias] = new RegExp(cjsRequirePre + requireAlias + cjsRequirePost, 'g'));\n                                                                                                                       // 2560\n                    requireRegEx.lastIndex = 0;                                                                        // 2561\n                                                                                                                       // 2562\n                    var deps = [];                                                                                     // 2563\n                                                                                                                       // 2564\n                    var match;                                                                                         // 2565\n                    while (match = requireRegEx.exec(source))                                                          // 2566\n                        deps.push(match[2] || match[3]);                                                               // 2567\n                                                                                                                       // 2568\n                    return deps;                                                                                       // 2569\n                }                                                                                                      // 2570\n                                                                                                                       // 2571\n                /*                                                                                                     // 2572\n                 AMD-compatible require                                                                                // 2573\n                 To copy RequireJS, set window.require = window.requirejs = loader.amdRequire                          // 2574\n                 */                                                                                                    // 2575\n                function require(names, callback, errback, referer) {                                                  // 2576\n                    // in amd, first arg can be a config object... we just ignore                                      // 2577\n                    if (typeof names == 'object' && !(names instanceof Array))                                         // 2578\n                        return require.apply(null, Array.prototype.splice.call(arguments, 1, arguments.length - 1));   // 2579\n                                                                                                                       // 2580\n                    // amd require                                                                                     // 2581\n                    if (typeof names == 'string' && typeof callback == 'function')                                     // 2582\n                        names = [names];                                                                               // 2583\n                    if (names instanceof Array) {                                                                      // 2584\n                        var dynamicRequires = [];                                                                      // 2585\n                        for (var i = 0; i < names.length; i++)                                                         // 2586\n                            dynamicRequires.push(loader['import'](names[i], referer));                                 // 2587\n                        Promise.all(dynamicRequires).then(function(modules) {                                          // 2588\n                            if (callback)                                                                              // 2589\n                                callback.apply(null, modules);                                                         // 2590\n                        }, errback);                                                                                   // 2591\n                    }                                                                                                  // 2592\n                                                                                                                       // 2593\n                    // commonjs require                                                                                // 2594\n                    else if (typeof names == 'string') {                                                               // 2595\n                        var module = loader.get(names);                                                                // 2596\n                        return module.__useDefault ? module['default'] : module;                                       // 2597\n                    }                                                                                                  // 2598\n                                                                                                                       // 2599\n                    else                                                                                               // 2600\n                        throw new TypeError('Invalid require');                                                        // 2601\n                };                                                                                                     // 2602\n                                                                                                                       // 2603\n                function define(name, deps, factory) {                                                                 // 2604\n                    if (typeof name != 'string') {                                                                     // 2605\n                        factory = deps;                                                                                // 2606\n                        deps = name;                                                                                   // 2607\n                        name = null;                                                                                   // 2608\n                    }                                                                                                  // 2609\n                    if (!(deps instanceof Array)) {                                                                    // 2610\n                        factory = deps;                                                                                // 2611\n                        deps = ['require', 'exports', 'module'].splice(0, factory.length);                             // 2612\n                    }                                                                                                  // 2613\n                                                                                                                       // 2614\n                    if (typeof factory != 'function')                                                                  // 2615\n                        factory = (function(factory) {                                                                 // 2616\n                            return function() { return factory; }                                                      // 2617\n                        })(factory);                                                                                   // 2618\n                                                                                                                       // 2619\n                    // in IE8, a trailing comma becomes a trailing undefined entry                                     // 2620\n                    if (deps[deps.length - 1] === undefined)                                                           // 2621\n                        deps.pop();                                                                                    // 2622\n                                                                                                                       // 2623\n                    // remove system dependencies                                                                      // 2624\n                    var requireIndex, exportsIndex, moduleIndex;                                                       // 2625\n                                                                                                                       // 2626\n                    if ((requireIndex = indexOf.call(deps, 'require')) != -1) {                                        // 2627\n                                                                                                                       // 2628\n                        deps.splice(requireIndex, 1);                                                                  // 2629\n                                                                                                                       // 2630\n                        // only trace cjs requires for non-named                                                       // 2631\n                        // named defines assume the trace has already been done                                        // 2632\n                        if (!name)                                                                                     // 2633\n                            deps = deps.concat(getCJSDeps(factory.toString(), requireIndex));                          // 2634\n                    }                                                                                                  // 2635\n                                                                                                                       // 2636\n                    if ((exportsIndex = indexOf.call(deps, 'exports')) != -1)                                          // 2637\n                        deps.splice(exportsIndex, 1);                                                                  // 2638\n                                                                                                                       // 2639\n                    if ((moduleIndex = indexOf.call(deps, 'module')) != -1)                                            // 2640\n                        deps.splice(moduleIndex, 1);                                                                   // 2641\n                                                                                                                       // 2642\n                    var define = {                                                                                     // 2643\n                        name: name,                                                                                    // 2644\n                        deps: deps,                                                                                    // 2645\n                        execute: function(req, exports, module) {                                                      // 2646\n                                                                                                                       // 2647\n                            var depValues = [];                                                                        // 2648\n                            for (var i = 0; i < deps.length; i++)                                                      // 2649\n                                depValues.push(req(deps[i]));                                                          // 2650\n                                                                                                                       // 2651\n                            module.uri = module.id;                                                                    // 2652\n                                                                                                                       // 2653\n                            module.config = function() {};                                                             // 2654\n                                                                                                                       // 2655\n                            // add back in system dependencies                                                         // 2656\n                            if (moduleIndex != -1)                                                                     // 2657\n                                depValues.splice(moduleIndex, 0, module);                                              // 2658\n                                                                                                                       // 2659\n                            if (exportsIndex != -1)                                                                    // 2660\n                                depValues.splice(exportsIndex, 0, exports);                                            // 2661\n                                                                                                                       // 2662\n                            if (requireIndex != -1) {                                                                  // 2663\n                                function contextualRequire(names, callback, errback) {                                 // 2664\n                                    if (typeof names == 'string' && typeof callback != 'function')                     // 2665\n                                        return req(names);                                                             // 2666\n                                    return require.call(loader, names, callback, errback, module.id);                  // 2667\n                                }                                                                                      // 2668\n                                contextualRequire.toUrl = function(name) {                                             // 2669\n                                    // normalize without defaultJSExtensions                                           // 2670\n                                    var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';\n                                    var url = loader.normalizeSync(name, module.id);                                   // 2672\n                                    if (defaultJSExtension && url.substr(url.length - 3, 3) == '.js')                  // 2673\n                                        url = url.substr(0, url.length - 3);                                           // 2674\n                                    return url;                                                                        // 2675\n                                };                                                                                     // 2676\n                                depValues.splice(requireIndex, 0, contextualRequire);                                  // 2677\n                            }                                                                                          // 2678\n                                                                                                                       // 2679\n                            // set global require to AMD require                                                       // 2680\n                            var curRequire = __global.require;                                                         // 2681\n                            __global.require = require;                                                                // 2682\n                                                                                                                       // 2683\n                            var output = factory.apply(exportsIndex == -1 ? __global : exports, depValues);            // 2684\n                                                                                                                       // 2685\n                            __global.require = curRequire;                                                             // 2686\n                                                                                                                       // 2687\n                            if (typeof output == 'undefined' && module)                                                // 2688\n                                output = module.exports;                                                               // 2689\n                                                                                                                       // 2690\n                            if (typeof output != 'undefined')                                                          // 2691\n                                return output;                                                                         // 2692\n                        }                                                                                              // 2693\n                    };                                                                                                 // 2694\n                                                                                                                       // 2695\n                    // anonymous define                                                                                // 2696\n                    if (!name) {                                                                                       // 2697\n                        // already defined anonymously -> throw                                                        // 2698\n                        if (lastModule.anonDefine)                                                                     // 2699\n                            throw new TypeError('Multiple defines for anonymous module');                              // 2700\n                        lastModule.anonDefine = define;                                                                // 2701\n                    }                                                                                                  // 2702\n                    // named define                                                                                    // 2703\n                    else {                                                                                             // 2704\n                        // if it has no dependencies and we don't have any other                                       // 2705\n                        // defines, then let this be an anonymous define                                               // 2706\n                        // this is just to support single modules of the form:                                         // 2707\n                        // define('jquery')                                                                            // 2708\n                        // still loading anonymously                                                                   // 2709\n                        // because it is done widely enough to be useful                                               // 2710\n                        if (deps.length == 0 && !lastModule.anonDefine && !lastModule.isBundle) {                      // 2711\n                            lastModule.anonDefine = define;                                                            // 2712\n                        }                                                                                              // 2713\n                        // otherwise its a bundle only                                                                 // 2714\n                        else {                                                                                         // 2715\n                            // if there is an anonDefine already (we thought it could have had a single named define)  // 2716\n                            // then we define it now                                                                   // 2717\n                            // this is to avoid defining named defines when they are actually anonymous                // 2718\n                            if (lastModule.anonDefine && lastModule.anonDefine.name)                                   // 2719\n                                loader.registerDynamic(lastModule.anonDefine.name, lastModule.anonDefine.deps, false, lastModule.anonDefine.execute);\n                                                                                                                       // 2721\n                            lastModule.anonDefine = null;                                                              // 2722\n                        }                                                                                              // 2723\n                                                                                                                       // 2724\n                        // note this is now a bundle                                                                   // 2725\n                        lastModule.isBundle = true;                                                                    // 2726\n                                                                                                                       // 2727\n                        // define the module through the register registry                                             // 2728\n                        loader.registerDynamic(name, define.deps, false, define.execute);                              // 2729\n                    }                                                                                                  // 2730\n                }                                                                                                      // 2731\n                define.amd = {};                                                                                       // 2732\n                                                                                                                       // 2733\n                // adds define as a global (potentially just temporarily)                                              // 2734\n                function createDefine(loader) {                                                                        // 2735\n                    lastModule.anonDefine = null;                                                                      // 2736\n                    lastModule.isBundle = false;                                                                       // 2737\n                                                                                                                       // 2738\n                    // ensure no NodeJS environment detection                                                          // 2739\n                    var oldModule = __global.module;                                                                   // 2740\n                    var oldExports = __global.exports;                                                                 // 2741\n                    var oldDefine = __global.define;                                                                   // 2742\n                                                                                                                       // 2743\n                    __global.module = undefined;                                                                       // 2744\n                    __global.exports = undefined;                                                                      // 2745\n                    __global.define = define;                                                                          // 2746\n                                                                                                                       // 2747\n                    return function() {                                                                                // 2748\n                        __global.define = oldDefine;                                                                   // 2749\n                        __global.module = oldModule;                                                                   // 2750\n                        __global.exports = oldExports;                                                                 // 2751\n                    };                                                                                                 // 2752\n                }                                                                                                      // 2753\n                                                                                                                       // 2754\n                var lastModule = {                                                                                     // 2755\n                    isBundle: false,                                                                                   // 2756\n                    anonDefine: null                                                                                   // 2757\n                };                                                                                                     // 2758\n                                                                                                                       // 2759\n                loader.set('@@amd-helpers', loader.newModule({                                                         // 2760\n                    createDefine: createDefine,                                                                        // 2761\n                    require: require,                                                                                  // 2762\n                    define: define,                                                                                    // 2763\n                    lastModule: lastModule                                                                             // 2764\n                }));                                                                                                   // 2765\n                loader.amdDefine = define;                                                                             // 2766\n                loader.amdRequire = require;                                                                           // 2767\n            };                                                                                                         // 2768\n        });/*                                                                                                          // 2769\n         SystemJS AMD Format                                                                                           // 2770\n         Provides the AMD module format definition at System.format.amd                                                // 2771\n         as well as a RequireJS-style require on System.require                                                        // 2772\n         */                                                                                                            // 2773\n        (function() {                                                                                                  // 2774\n            // AMD Module Format Detection RegEx                                                                       // 2775\n            // define([.., .., ..], ...)                                                                               // 2776\n            // define(varName); || define(function(require, exports) {}); || define({})                                // 2777\n            var amdRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])define\\s*\\(\\s*(\"[^\"]+\"\\s*,\\s*|'[^']+'\\s*,\\s*)?\\s*(\\[(\\s*((\"[^\"]+\"|'[^']+')\\s*,|\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*(\\s*(\"[^\"]+\"|'[^']+')\\s*,?)?(\\s*(\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*\\s*\\]|function\\s*|{|[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*\\))/;\n                                                                                                                       // 2779\n            // script injection mode calls this function synchronously on load                                         // 2780\n            hook('onScriptLoad', function(onScriptLoad) {                                                              // 2781\n                return function(load) {                                                                                // 2782\n                    onScriptLoad.call(this, load);                                                                     // 2783\n                                                                                                                       // 2784\n                    var lastModule = this.get('@@amd-helpers').lastModule;                                             // 2785\n                    if (lastModule.anonDefine || lastModule.isBundle) {                                                // 2786\n                        load.metadata.format = 'defined';                                                              // 2787\n                        load.metadata.registered = true;                                                               // 2788\n                        lastModule.isBundle = false;                                                                   // 2789\n                    }                                                                                                  // 2790\n                                                                                                                       // 2791\n                    if (lastModule.anonDefine) {                                                                       // 2792\n                        load.metadata.deps = load.metadata.deps ? load.metadata.deps.concat(lastModule.anonDefine.deps) : lastModule.anonDefine.deps;\n                        load.metadata.execute = lastModule.anonDefine.execute;                                         // 2794\n                        lastModule.anonDefine = null;                                                                  // 2795\n                    }                                                                                                  // 2796\n                };                                                                                                     // 2797\n            });                                                                                                        // 2798\n                                                                                                                       // 2799\n            hook('fetch', function(fetch) {                                                                            // 2800\n                return function(load) {                                                                                // 2801\n                    if (load.metadata.format === 'amd')                                                                // 2802\n                        load.metadata.scriptLoad = true;                                                               // 2803\n                    if (load.metadata.scriptLoad)                                                                      // 2804\n                        this.get('@@amd-helpers').createDefine(this);                                                  // 2805\n                    return fetch.call(this, load);                                                                     // 2806\n                };                                                                                                     // 2807\n            });                                                                                                        // 2808\n                                                                                                                       // 2809\n            hook('instantiate', function(instantiate) {                                                                // 2810\n                return function(load) {                                                                                // 2811\n                    var loader = this;                                                                                 // 2812\n                                                                                                                       // 2813\n                    if (load.metadata.format == 'amd' || !load.metadata.format && load.source.match(amdRegEx)) {       // 2814\n                        load.metadata.format = 'amd';                                                                  // 2815\n                                                                                                                       // 2816\n                        if (loader.execute !== false) {                                                                // 2817\n                            var removeDefine = this.get('@@amd-helpers').createDefine(loader);                         // 2818\n                                                                                                                       // 2819\n                            __exec.call(loader, load);                                                                 // 2820\n                                                                                                                       // 2821\n                            removeDefine(loader);                                                                      // 2822\n                                                                                                                       // 2823\n                            var lastModule = this.get('@@amd-helpers').lastModule;                                     // 2824\n                                                                                                                       // 2825\n                            if (!lastModule.anonDefine && !lastModule.isBundle)                                        // 2826\n                                throw new TypeError('AMD module ' + load.name + ' did not define');                    // 2827\n                                                                                                                       // 2828\n                            if (lastModule.anonDefine) {                                                               // 2829\n                                load.metadata.deps = load.metadata.deps ? load.metadata.deps.concat(lastModule.anonDefine.deps) : lastModule.anonDefine.deps;\n                                load.metadata.execute = lastModule.anonDefine.execute;                                 // 2831\n                            }                                                                                          // 2832\n                                                                                                                       // 2833\n                            lastModule.isBundle = false;                                                               // 2834\n                            lastModule.anonDefine = null;                                                              // 2835\n                        }                                                                                              // 2836\n                                                                                                                       // 2837\n                        return instantiate.call(loader, load);                                                         // 2838\n                    }                                                                                                  // 2839\n                                                                                                                       // 2840\n                    return instantiate.call(loader, load);                                                             // 2841\n                };                                                                                                     // 2842\n            });                                                                                                        // 2843\n                                                                                                                       // 2844\n        })();                                                                                                          // 2845\n        /*                                                                                                             // 2846\n         SystemJS map support                                                                                          // 2847\n                                                                                                                       // 2848\n         Provides map configuration through                                                                            // 2849\n         System.map['jquery'] = 'some/module/map'                                                                      // 2850\n                                                                                                                       // 2851\n         Note that this applies for subpaths, just like RequireJS:                                                     // 2852\n                                                                                                                       // 2853\n         jquery      -> 'some/module/map'                                                                              // 2854\n         jquery/path -> 'some/module/map/path'                                                                         // 2855\n         bootstrap   -> 'bootstrap'                                                                                    // 2856\n                                                                                                                       // 2857\n         The most specific map is always taken, as longest path length                                                 // 2858\n         */                                                                                                            // 2859\n        hookConstructor(function(constructor) {                                                                        // 2860\n            return function() {                                                                                        // 2861\n                constructor.call(this);                                                                                // 2862\n                this.map = {};                                                                                         // 2863\n            };                                                                                                         // 2864\n        });                                                                                                            // 2865\n                                                                                                                       // 2866\n        hook('normalize', function(normalize) {                                                                        // 2867\n            return function(name, parentName, parentAddress) {                                                         // 2868\n                if (name.substr(0, 1) != '.' && name.substr(0, 1) != '/' && !name.match(absURLRegEx)) {                // 2869\n                    var bestMatch, bestMatchLength = 0;                                                                // 2870\n                                                                                                                       // 2871\n                    // now do the global map                                                                           // 2872\n                    for (var p in this.map) {                                                                          // 2873\n                        if (name.substr(0, p.length) == p && (name.length == p.length || name[p.length] == '/')) {     // 2874\n                            var curMatchLength = p.split('/').length;                                                  // 2875\n                            if (curMatchLength <= bestMatchLength)                                                     // 2876\n                                continue;                                                                              // 2877\n                            bestMatch = p;                                                                             // 2878\n                            bestMatchLength = curMatchLength;                                                          // 2879\n                        }                                                                                              // 2880\n                    }                                                                                                  // 2881\n                                                                                                                       // 2882\n                    if (bestMatch)                                                                                     // 2883\n                        name = this.map[bestMatch] + name.substr(bestMatch.length);                                    // 2884\n                }                                                                                                      // 2885\n                                                                                                                       // 2886\n                return normalize.call(this, name, parentName, parentAddress);                                          // 2887\n            };                                                                                                         // 2888\n        });                                                                                                            // 2889\n        /*                                                                                                             // 2890\n         * Paths extension                                                                                             // 2891\n         *                                                                                                             // 2892\n         * Applies paths and normalizes to a full URL                                                                  // 2893\n         */                                                                                                            // 2894\n        hook('normalize', function(normalize) {                                                                        // 2895\n                                                                                                                       // 2896\n            return function(name, parentName) {                                                                        // 2897\n                var normalized = normalize.call(this, name, parentName);                                               // 2898\n                                                                                                                       // 2899\n                // if the module is in the registry already, use that                                                  // 2900\n                if (this.has(normalized))                                                                              // 2901\n                    return normalized;                                                                                 // 2902\n                                                                                                                       // 2903\n                if (normalized.match(absURLRegEx)) {                                                                   // 2904\n                    // defaultJSExtensions backwards compatibility                                                     // 2905\n                    if (this.defaultJSExtensions && normalized.substr(normalized.length - 3, 3) != '.js')              // 2906\n                        normalized += '.js';                                                                           // 2907\n                    return normalized;                                                                                 // 2908\n                }                                                                                                      // 2909\n                                                                                                                       // 2910\n                // applyPaths implementation provided from ModuleLoader system.js source                               // 2911\n                normalized = applyPaths(this.paths, normalized) || normalized;                                         // 2912\n                                                                                                                       // 2913\n                // defaultJSExtensions backwards compatibility                                                         // 2914\n                if (this.defaultJSExtensions && normalized.substr(normalized.length - 3, 3) != '.js')                  // 2915\n                    normalized += '.js';                                                                               // 2916\n                                                                                                                       // 2917\n                // ./x, /x -> page-relative                                                                            // 2918\n                if (normalized[0] == '.' || normalized[0] == '/')                                                      // 2919\n                    return new URL(normalized, baseURIObj).href;                                                       // 2920\n                // x -> baseURL-relative                                                                               // 2921\n                else                                                                                                   // 2922\n                    return new URL(normalized, getBaseURLObj.call(this)).href;                                         // 2923\n            };                                                                                                         // 2924\n        });/*                                                                                                          // 2925\n         * Package Configuration Extension                                                                             // 2926\n         *                                                                                                             // 2927\n         * Example:                                                                                                    // 2928\n         *                                                                                                             // 2929\n         * System.packages = {                                                                                         // 2930\n         *   jquery: {                                                                                                 // 2931\n         *     main: 'index.js', // when not set, package name is requested directly                                   // 2932\n         *     format: 'amd',                                                                                          // 2933\n         *     defaultExtension: 'js',                                                                                 // 2934\n         *     meta: {                                                                                                 // 2935\n         *       '*.ts': {                                                                                             // 2936\n         *         loader: 'typescript'                                                                                // 2937\n         *       },                                                                                                    // 2938\n         *       'vendor/sizzle.js': {                                                                                 // 2939\n         *         format: 'global'                                                                                    // 2940\n         *       }                                                                                                     // 2941\n         *     },                                                                                                      // 2942\n         *     map: {                                                                                                  // 2943\n         *        // map internal require('sizzle') to local require('./vendor/sizzle')                                // 2944\n         *        sizzle: './vendor/sizzle.js',                                                                        // 2945\n         *        // map any internal or external require of 'jquery/vendor/another' to 'another/index.js'             // 2946\n         *        './vendor/another.js': './another/index.js',                                                         // 2947\n         *        // test.js / test -> lib/test.js                                                                     // 2948\n         *        './test.js': './lib/test.js',                                                                        // 2949\n         *     },                                                                                                      // 2950\n         *     env: {                                                                                                  // 2951\n         *       'browser': {                                                                                          // 2952\n         *         main: 'browser.js'                                                                                  // 2953\n         *       }                                                                                                     // 2954\n         *     }                                                                                                       // 2955\n         *   }                                                                                                         // 2956\n         * };                                                                                                          // 2957\n         *                                                                                                             // 2958\n         * Then:                                                                                                       // 2959\n         *   import 'jquery'                       -> jquery/index.js                                                  // 2960\n         *   import 'jquery/submodule'             -> jquery/submodule.js                                              // 2961\n         *   import 'jquery/submodule.ts'          -> jquery/submodule.ts loaded as typescript                         // 2962\n         *   import 'jquery/vendor/another'        -> another/index.js                                                 // 2963\n         *                                                                                                             // 2964\n         * Detailed Behaviours                                                                                         // 2965\n         * - main is the only property where a leading \"./\" can be added optionally                                    // 2966\n         * - map and defaultExtension are applied to the main                                                          // 2967\n         * - defaultExtension adds the extension only if no other extension is present                                 // 2968\n         * - defaultJSExtensions applies after map when defaultExtension is not set                                    // 2969\n         * - if a meta value is available for a module, map and defaultExtension are skipped                           // 2970\n         * - like global map, package map also applies to subpaths (sizzle/x, ./vendor/another/sub)                    // 2971\n         *                                                                                                             // 2972\n         * In addition, the following meta properties will be allowed to be package                                    // 2973\n         * -relative as well in the package meta config:                                                               // 2974\n         *                                                                                                             // 2975\n         *   - loader                                                                                                  // 2976\n         *   - alias                                                                                                   // 2977\n         *                                                                                                             // 2978\n         */                                                                                                            // 2979\n        (function() {                                                                                                  // 2980\n                                                                                                                       // 2981\n            hookConstructor(function(constructor) {                                                                    // 2982\n                return function() {                                                                                    // 2983\n                    constructor.call(this);                                                                            // 2984\n                    this.packages = {};                                                                                // 2985\n                };                                                                                                     // 2986\n            });                                                                                                        // 2987\n                                                                                                                       // 2988\n            function getPackage(name) {                                                                                // 2989\n                for (var p in this.packages) {                                                                         // 2990\n                    if (name.substr(0, p.length) === p && (name.length === p.length || name[p.length] === '/'))        // 2991\n                        return p;                                                                                      // 2992\n                }                                                                                                      // 2993\n            }                                                                                                          // 2994\n                                                                                                                       // 2995\n            function getPackageConfig(loader, pkgName) {                                                               // 2996\n                var pkgConfig = loader.packages[pkgName];                                                              // 2997\n                                                                                                                       // 2998\n                if (!pkgConfig.env)                                                                                    // 2999\n                    return Promise.resolve(pkgConfig);                                                                 // 3000\n                                                                                                                       // 3001\n                // check environment conditions                                                                        // 3002\n                // default environment condition is '@env' in package or '@system-env' globally                        // 3003\n                return loader['import'](pkgConfig.map['@env'] || '@system-env', pkgName)                               // 3004\n                    .then(function(env) {                                                                              // 3005\n                        // derived config object                                                                       // 3006\n                        var pkg = {};                                                                                  // 3007\n                        for (var p in pkgConfig)                                                                       // 3008\n                            if (p !== 'map' & p !== 'env')                                                             // 3009\n                                pkg[p] = pkgConfig[p];                                                                 // 3010\n                                                                                                                       // 3011\n                        pkg.map = {};                                                                                  // 3012\n                        for (var p in pkgConfig.map)                                                                   // 3013\n                            pkg.map[p] = pkgConfig.map[p];                                                             // 3014\n                                                                                                                       // 3015\n                        for (var e in pkgConfig.env) {                                                                 // 3016\n                            if (env[e]) {                                                                              // 3017\n                                var envConfig = pkgConfig.env[e];                                                      // 3018\n                                if (envConfig.main)                                                                    // 3019\n                                    pkg.main = envConfig.main;                                                         // 3020\n                                for (var m in envConfig.map)                                                           // 3021\n                                    pkg.map[m] = envConfig.map[m];                                                     // 3022\n                            }                                                                                          // 3023\n                        }                                                                                              // 3024\n                                                                                                                       // 3025\n                        // store the derived environment config so we have this cached for next time                   // 3026\n                        loader.packages[pkgName] = pkg;                                                                // 3027\n                                                                                                                       // 3028\n                        return pkg;                                                                                    // 3029\n                    });                                                                                                // 3030\n            }                                                                                                          // 3031\n                                                                                                                       // 3032\n            function applyMap(map, name) {                                                                             // 3033\n                var bestMatch, bestMatchLength = 0;                                                                    // 3034\n                                                                                                                       // 3035\n                for (var p in map) {                                                                                   // 3036\n                    if (name.substr(0, p.length) == p && (name.length == p.length || name[p.length] == '/')) {         // 3037\n                        var curMatchLength = p.split('/').length;                                                      // 3038\n                        if (curMatchLength <= bestMatchLength)                                                         // 3039\n                            continue;                                                                                  // 3040\n                        bestMatch = p;                                                                                 // 3041\n                        bestMatchLength = curMatchLength;                                                              // 3042\n                    }                                                                                                  // 3043\n                }                                                                                                      // 3044\n                if (bestMatch)                                                                                         // 3045\n                    return map[bestMatch] + name.substr(bestMatch.length);                                             // 3046\n            }                                                                                                          // 3047\n                                                                                                                       // 3048\n            SystemJSLoader.prototype.normalizeSync = SystemJSLoader.prototype.normalize;                               // 3049\n                                                                                                                       // 3050\n            hook('normalize', function(normalize) {                                                                    // 3051\n                return function(name, parentName) {                                                                    // 3052\n                    // apply contextual package map first                                                              // 3053\n                    if (parentName) {                                                                                  // 3054\n                        var parentPackage = getPackage.call(this, parentName) ||                                       // 3055\n                            this.defaultJSExtensions && parentName.substr(parentName.length - 3, 3) == '.js' &&        // 3056\n                            getPackage.call(this, parentName.substr(0, parentName.length - 3));                        // 3057\n                    }                                                                                                  // 3058\n                                                                                                                       // 3059\n                    if (parentPackage && name[0] !== '.') {                                                            // 3060\n                        var parentMap = this.packages[parentPackage].map;                                              // 3061\n                        if (parentMap) {                                                                               // 3062\n                            name = applyMap(parentMap, name) || name;                                                  // 3063\n                                                                                                                       // 3064\n                            // relative maps are package-relative                                                      // 3065\n                            if (name[0] === '.')                                                                       // 3066\n                                parentName = parentPackage + '/';                                                      // 3067\n                        }                                                                                              // 3068\n                    }                                                                                                  // 3069\n                                                                                                                       // 3070\n                    var defaultJSExtension = this.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';     // 3071\n                                                                                                                       // 3072\n                    // apply global map, relative normalization                                                        // 3073\n                    var normalized = normalize.call(this, name, parentName);                                           // 3074\n                                                                                                                       // 3075\n                    // undo defaultJSExtension                                                                         // 3076\n                    if (normalized.substr(normalized.length - 3, 3) != '.js')                                          // 3077\n                        defaultJSExtension = false;                                                                    // 3078\n                    if (defaultJSExtension)                                                                            // 3079\n                        normalized = normalized.substr(0, normalized.length - 3);                                      // 3080\n                                                                                                                       // 3081\n                    // check if we are inside a package                                                                // 3082\n                    var pkgName = getPackage.call(this, normalized);                                                   // 3083\n                                                                                                                       // 3084\n                    if (pkgName) {                                                                                     // 3085\n                        return getPackageConfig(this, pkgName)                                                         // 3086\n                            .then(function(pkg) {                                                                      // 3087\n                                // main                                                                                // 3088\n                                if (pkgName === normalized && pkg.main)                                                // 3089\n                                    normalized += '/' + (pkg.main.substr(0, 2) == './' ? pkg.main.substr(2) : pkg.main);\n                                                                                                                       // 3091\n                                if (normalized.substr(pkgName.length) == '/')                                          // 3092\n                                    return normalized;                                                                 // 3093\n                                                                                                                       // 3094\n                                // defaultExtension & defaultJSExtension                                               // 3095\n                                // if we have meta for this package, don't do defaultExtensions                        // 3096\n                                var defaultExtension = '';                                                             // 3097\n                                if (!pkg.meta || !pkg.meta[normalized.substr(pkgName.length + 1)]) {                   // 3098\n                                    // apply defaultExtension                                                          // 3099\n                                                                                                                       // 3100\n                                    if ('defaultExtension' in pkg) {                                                   // 3101\n                                        if (pkg.defaultExtension !== false && normalized.split('/').pop().indexOf('.') == -1)\n                                            defaultExtension = '.' + pkg.defaultExtension;                             // 3103\n                                    }                                                                                  // 3104\n                                    // apply defaultJSExtensions if defaultExtension not set                           // 3105\n                                    else if (defaultJSExtension) {                                                     // 3106\n                                        defaultExtension = '.js';                                                      // 3107\n                                    }                                                                                  // 3108\n                                }                                                                                      // 3109\n                                                                                                                       // 3110\n                                // apply submap checking without then with defaultExtension                            // 3111\n                                var subPath = '.' + normalized.substr(pkgName.length);                                 // 3112\n                                var mapped = applyMap(pkg.map, subPath) || defaultExtension && applyMap(pkg.map, subPath + defaultExtension);\n                                if (mapped)                                                                            // 3114\n                                    normalized = mapped.substr(0, 2) == './' ? pkgName + mapped.substr(1) : mapped;    // 3115\n                                else                                                                                   // 3116\n                                    normalized += defaultExtension;                                                    // 3117\n                                                                                                                       // 3118\n                                                                                                                       // 3119\n                                return normalized;                                                                     // 3120\n                            });                                                                                        // 3121\n                    }                                                                                                  // 3122\n                                                                                                                       // 3123\n                    // add back defaultJSExtension if not a package                                                    // 3124\n                    if (defaultJSExtension)                                                                            // 3125\n                        normalized += '.js';                                                                           // 3126\n                                                                                                                       // 3127\n                    return normalized;                                                                                 // 3128\n                };                                                                                                     // 3129\n            });                                                                                                        // 3130\n                                                                                                                       // 3131\n            hook('locate', function(locate) {                                                                          // 3132\n                return function(load) {                                                                                // 3133\n                    var loader = this;                                                                                 // 3134\n                    return Promise.resolve(locate.call(this, load))                                                    // 3135\n                        .then(function(address) {                                                                      // 3136\n                            var pkgName = getPackage.call(loader, load.name);                                          // 3137\n                            if (pkgName) {                                                                             // 3138\n                                var pkg = loader.packages[pkgName];                                                    // 3139\n                                                                                                                       // 3140\n                                // format                                                                              // 3141\n                                if (pkg.format)                                                                        // 3142\n                                    load.metadata.format = load.metadata.format || pkg.format;                         // 3143\n                                                                                                                       // 3144\n                                // loader                                                                              // 3145\n                                if (pkg.loader)                                                                        // 3146\n                                    load.metadata.loader = load.metadata.loader || pkg.loader;                         // 3147\n                                                                                                                       // 3148\n                                if (pkg.meta) {                                                                        // 3149\n                                    // wildcard meta                                                                   // 3150\n                                    var meta = {};                                                                     // 3151\n                                    var bestDepth = 0;                                                                 // 3152\n                                    var wildcardIndex;                                                                 // 3153\n                                    for (var module in pkg.meta) {                                                     // 3154\n                                        wildcardIndex = module.indexOf('*');                                           // 3155\n                                        if (wildcardIndex === -1)                                                      // 3156\n                                            continue;                                                                  // 3157\n                                        if (module.substr(0, wildcardIndex) === load.name.substr(0, wildcardIndex)     // 3158\n                                            && module.substr(wildcardIndex + 1) === load.name.substr(load.name.length - module.length + wildcardIndex + 1)) {\n                                            var depth = module.split('/').length;                                      // 3160\n                                            if (depth > bestDepth)                                                     // 3161\n                                                bestDetph = depth;                                                     // 3162\n                                            extend(meta, pkg.meta[module], bestDepth != depth);                        // 3163\n                                        }                                                                              // 3164\n                                    }                                                                                  // 3165\n                                    // exact meta                                                                      // 3166\n                                    var exactMeta = pkg.meta[load.name.substr(pkgName.length + 1)];                    // 3167\n                                    if (exactMeta)                                                                     // 3168\n                                        extend(meta, exactMeta);                                                       // 3169\n                                                                                                                       // 3170\n                                    // allow alias and loader to be package-relative                                   // 3171\n                                    if (meta.alias && meta.alias.substr(0, 2) == './')                                 // 3172\n                                        meta.alias = pkgName + meta.alias.substr(1);                                   // 3173\n                                    if (meta.loader && meta.loader.substr(0, 2) == './')                               // 3174\n                                        meta.loader = pkgName + meta.loader.substr(1);                                 // 3175\n                                                                                                                       // 3176\n                                    extend(load.metadata, meta);                                                       // 3177\n                                }                                                                                      // 3178\n                            }                                                                                          // 3179\n                                                                                                                       // 3180\n                            return address;                                                                            // 3181\n                        });                                                                                            // 3182\n                };                                                                                                     // 3183\n            });                                                                                                        // 3184\n                                                                                                                       // 3185\n        })();/*                                                                                                        // 3186\n         SystemJS Loader Plugin Support                                                                                // 3187\n                                                                                                                       // 3188\n         Supports plugin loader syntax with \"!\", or via metadata.loader                                                // 3189\n                                                                                                                       // 3190\n         The plugin name is loaded as a module itself, and can override standard loader hooks                          // 3191\n         for the plugin resource. See the plugin section of the systemjs readme.                                       // 3192\n         */                                                                                                            // 3193\n        (function() {                                                                                                  // 3194\n                                                                                                                       // 3195\n            // sync or async plugin normalize function                                                                 // 3196\n            function normalizePlugin(normalize, name, parentName, sync) {                                              // 3197\n                var loader = this;                                                                                     // 3198\n                // if parent is a plugin, normalize against the parent plugin argument only                            // 3199\n                var parentPluginIndex;                                                                                 // 3200\n                if (parentName && (parentPluginIndex = parentName.indexOf('!')) != -1)                                 // 3201\n                    parentName = parentName.substr(0, parentPluginIndex);                                              // 3202\n                                                                                                                       // 3203\n                // if this is a plugin, normalize the plugin name and the argument                                     // 3204\n                var pluginIndex = name.lastIndexOf('!');                                                               // 3205\n                if (pluginIndex != -1) {                                                                               // 3206\n                    var argumentName = name.substr(0, pluginIndex);                                                    // 3207\n                    var pluginName = name.substr(pluginIndex + 1) || argumentName.substr(argumentName.lastIndexOf('.') + 1);\n                                                                                                                       // 3209\n                    // note if normalize will add a default js extension                                               // 3210\n                    // if so, remove for backwards compat                                                              // 3211\n                    // this is strange and sucks, but will be deprecated                                               // 3212\n                    var defaultExtension = loader.defaultJSExtensions && argumentName.substr(argumentName.length - 3, 3) != '.js';\n                                                                                                                       // 3214\n                    if (sync) {                                                                                        // 3215\n                        argumentName = loader.normalizeSync(argumentName, parentName);                                 // 3216\n                        pluginName = loader.normalizeSync(pluginName, parentName);                                     // 3217\n                                                                                                                       // 3218\n                        if (defaultExtension && argumentName.substr(argumentName.length - 3, 3) == '.js')              // 3219\n                            argumentName = argumentName.substr(0, argumentName.length - 3);                            // 3220\n                                                                                                                       // 3221\n                        return argumentName + '!' + pluginName;                                                        // 3222\n                    }                                                                                                  // 3223\n                    else {                                                                                             // 3224\n                        return Promise.all([                                                                           // 3225\n                            loader.normalize(argumentName, parentName),                                                // 3226\n                            loader.normalize(pluginName, parentName)                                                   // 3227\n                        ])                                                                                             // 3228\n                            .then(function(normalized) {                                                               // 3229\n                                argumentName = normalized[0];                                                          // 3230\n                                if (defaultExtension && argumentName.substr(argumentName.length - 3, 3) == '.js')      // 3231\n                                    argumentName = argumentName.substr(0, argumentName.length - 3);                    // 3232\n                                return argumentName + '!' + normalized[1];                                             // 3233\n                            });                                                                                        // 3234\n                    }                                                                                                  // 3235\n                }                                                                                                      // 3236\n                else {                                                                                                 // 3237\n                    return normalize.call(loader, name, parentName);                                                   // 3238\n                }                                                                                                      // 3239\n            }                                                                                                          // 3240\n                                                                                                                       // 3241\n            // async plugin normalize                                                                                  // 3242\n            hook('normalize', function(normalize) {                                                                    // 3243\n                return function(name, parentName) {                                                                    // 3244\n                    return normalizePlugin.call(this, normalize, name, parentName, false);                             // 3245\n                };                                                                                                     // 3246\n            });                                                                                                        // 3247\n                                                                                                                       // 3248\n            hook('normalizeSync', function(normalizeSync) {                                                            // 3249\n                return function(name, parentName) {                                                                    // 3250\n                    return normalizePlugin.call(this, normalizeSync, name, parentName, true);                          // 3251\n                };                                                                                                     // 3252\n            });                                                                                                        // 3253\n                                                                                                                       // 3254\n            hook('locate', function(locate) {                                                                          // 3255\n                return function(load) {                                                                                // 3256\n                    var loader = this;                                                                                 // 3257\n                                                                                                                       // 3258\n                    var name = load.name;                                                                              // 3259\n                                                                                                                       // 3260\n                    // plugin syntax                                                                                   // 3261\n                    var pluginSyntaxIndex = name.lastIndexOf('!');                                                     // 3262\n                    if (pluginSyntaxIndex != -1) {                                                                     // 3263\n                        load.metadata.loader = name.substr(pluginSyntaxIndex + 1);                                     // 3264\n                        load.name = name.substr(0, pluginSyntaxIndex);                                                 // 3265\n                    }                                                                                                  // 3266\n                                                                                                                       // 3267\n                    return locate.call(loader, load)                                                                   // 3268\n                        .then(function(address) {                                                                      // 3269\n                            var plugin = load.metadata.loader;                                                         // 3270\n                                                                                                                       // 3271\n                            if (!plugin)                                                                               // 3272\n                                return address;                                                                        // 3273\n                                                                                                                       // 3274\n                            // only fetch the plugin itself if this name isn't defined                                 // 3275\n                            if (loader.defined && loader.defined[name])                                                // 3276\n                                return address;                                                                        // 3277\n                                                                                                                       // 3278\n                            var pluginLoader = loader.pluginLoader || loader;                                          // 3279\n                                                                                                                       // 3280\n                            // load the plugin module and run standard locate                                          // 3281\n                            return pluginLoader['import'](plugin)                                                      // 3282\n                                .then(function(loaderModule) {                                                         // 3283\n                                    // store the plugin module itself on the metadata                                  // 3284\n                                    load.metadata.loaderModule = loaderModule;                                         // 3285\n                                    load.metadata.loaderArgument = name;                                               // 3286\n                                                                                                                       // 3287\n                                    load.address = address;                                                            // 3288\n                                    if (loaderModule.locate)                                                           // 3289\n                                        return loaderModule.locate.call(loader, load);                                 // 3290\n                                                                                                                       // 3291\n                                    return address;                                                                    // 3292\n                                });                                                                                    // 3293\n                        });                                                                                            // 3294\n                };                                                                                                     // 3295\n            });                                                                                                        // 3296\n                                                                                                                       // 3297\n            hook('fetch', function(fetch) {                                                                            // 3298\n                return function(load) {                                                                                // 3299\n                    var loader = this;                                                                                 // 3300\n                    if (load.metadata.loaderModule && load.metadata.loaderModule.fetch) {                              // 3301\n                        load.metadata.scriptLoad = false;                                                              // 3302\n                        return load.metadata.loaderModule.fetch.call(loader, load, function(load) {                    // 3303\n                            return fetch.call(loader, load);                                                           // 3304\n                        });                                                                                            // 3305\n                    }                                                                                                  // 3306\n                    else {                                                                                             // 3307\n                        return fetch.call(loader, load);                                                               // 3308\n                    }                                                                                                  // 3309\n                };                                                                                                     // 3310\n            });                                                                                                        // 3311\n                                                                                                                       // 3312\n            hook('translate', function(translate) {                                                                    // 3313\n                return function(load) {                                                                                // 3314\n                    var loader = this;                                                                                 // 3315\n                    if (load.metadata.loaderModule && load.metadata.loaderModule.translate)                            // 3316\n                        return Promise.resolve(load.metadata.loaderModule.translate.call(loader, load)).then(function(result) {\n                            if (typeof result == 'string')                                                             // 3318\n                                load.source = result;                                                                  // 3319\n                            return translate.call(loader, load);                                                       // 3320\n                        });                                                                                            // 3321\n                    else                                                                                               // 3322\n                        return translate.call(loader, load);                                                           // 3323\n                };                                                                                                     // 3324\n            });                                                                                                        // 3325\n                                                                                                                       // 3326\n            hook('instantiate', function(instantiate) {                                                                // 3327\n                return function(load) {                                                                                // 3328\n                    var loader = this;                                                                                 // 3329\n                    if (load.metadata.loaderModule && load.metadata.loaderModule.instantiate)                          // 3330\n                        return Promise.resolve(load.metadata.loaderModule.instantiate.call(loader, load)).then(function(result) {\n                            load.metadata.format = 'defined';                                                          // 3332\n                            load.metadata.execute = function() {                                                       // 3333\n                                return result;                                                                         // 3334\n                            };                                                                                         // 3335\n                            return instantiate.call(loader, load);                                                     // 3336\n                        });                                                                                            // 3337\n                    else                                                                                               // 3338\n                        return instantiate.call(loader, load);                                                         // 3339\n                };                                                                                                     // 3340\n            });                                                                                                        // 3341\n                                                                                                                       // 3342\n        })();                                                                                                          // 3343\n        /*                                                                                                             // 3344\n         * Alias Extension                                                                                             // 3345\n         *                                                                                                             // 3346\n         * Allows a module to be a plain copy of another module by module name                                         // 3347\n         *                                                                                                             // 3348\n         * System.meta['mybootstrapalias'] = { alias: 'bootstrap' };                                                   // 3349\n         *                                                                                                             // 3350\n         */                                                                                                            // 3351\n        (function() {                                                                                                  // 3352\n            // aliases                                                                                                 // 3353\n            hook('fetch', function(fetch) {                                                                            // 3354\n                return function(load) {                                                                                // 3355\n                    var alias = load.metadata.alias;                                                                   // 3356\n                    if (alias) {                                                                                       // 3357\n                        load.metadata.format = 'defined';                                                              // 3358\n                        this.defined[load.name] = {                                                                    // 3359\n                            declarative: true,                                                                         // 3360\n                            deps: [alias],                                                                             // 3361\n                            declare: function(_export) {                                                               // 3362\n                                return {                                                                               // 3363\n                                    setters: [function(module) {                                                       // 3364\n                                        for (var p in module)                                                          // 3365\n                                            _export(p, module[p]);                                                     // 3366\n                                    }],                                                                                // 3367\n                                    execute: function() {}                                                             // 3368\n                                };                                                                                     // 3369\n                            }                                                                                          // 3370\n                        };                                                                                             // 3371\n                        return '';                                                                                     // 3372\n                    }                                                                                                  // 3373\n                                                                                                                       // 3374\n                    return fetch.call(this, load);                                                                     // 3375\n                };                                                                                                     // 3376\n            });                                                                                                        // 3377\n        })();/*                                                                                                        // 3378\n         * Meta Extension                                                                                              // 3379\n         *                                                                                                             // 3380\n         * Sets default metadata on a load record (load.metadata) from                                                 // 3381\n         * loader.metadata via System.meta function.                                                                   // 3382\n         *                                                                                                             // 3383\n         *                                                                                                             // 3384\n         * Also provides an inline meta syntax for module meta in source.                                              // 3385\n         *                                                                                                             // 3386\n         * Eg:                                                                                                         // 3387\n         *                                                                                                             // 3388\n         * loader.meta({                                                                                               // 3389\n         *   'my/module': { deps: ['jquery'] }                                                                         // 3390\n         *   'my/*': { format: 'amd' }                                                                                 // 3391\n         * });                                                                                                         // 3392\n         *                                                                                                             // 3393\n         * Which in turn populates loader.metadata.                                                                    // 3394\n         *                                                                                                             // 3395\n         * load.metadata.deps and load.metadata.format will then be set                                                // 3396\n         * for 'my/module'                                                                                             // 3397\n         *                                                                                                             // 3398\n         * The same meta could be set with a my/module.js file containing:                                             // 3399\n         *                                                                                                             // 3400\n         * my/module.js                                                                                                // 3401\n         *   \"format amd\";                                                                                             // 3402\n         *   \"deps[] jquery\";                                                                                          // 3403\n         *   \"globals.some value\"                                                                                      // 3404\n         *   console.log('this is my/module');                                                                         // 3405\n         *                                                                                                             // 3406\n         * Configuration meta always takes preference to inline meta.                                                  // 3407\n         *                                                                                                             // 3408\n         * Multiple matches in wildcards are supported and ammend the meta.                                            // 3409\n         *                                                                                                             // 3410\n         *                                                                                                             // 3411\n         * The benefits of the function form is that paths are URL-normalized                                          // 3412\n         * supporting say                                                                                              // 3413\n         *                                                                                                             // 3414\n         * loader.meta({ './app': { format: 'cjs' } });                                                                // 3415\n         *                                                                                                             // 3416\n         * Instead of needing to set against the absolute URL (https://site.com/app.js)                                // 3417\n         *                                                                                                             // 3418\n         */                                                                                                            // 3419\n                                                                                                                       // 3420\n        (function() {                                                                                                  // 3421\n                                                                                                                       // 3422\n            hookConstructor(function(constructor) {                                                                    // 3423\n                return function() {                                                                                    // 3424\n                    this.meta = {};                                                                                    // 3425\n                    constructor.call(this);                                                                            // 3426\n                };                                                                                                     // 3427\n            });                                                                                                        // 3428\n                                                                                                                       // 3429\n            hook('locate', function(locate) {                                                                          // 3430\n                return function(load) {                                                                                // 3431\n                    var meta = this.meta;                                                                              // 3432\n                    var name = load.name;                                                                              // 3433\n                                                                                                                       // 3434\n                    // NB for perf, maybe introduce a fast-path wildcard lookup cache here                             // 3435\n                    // which is checked first                                                                          // 3436\n                                                                                                                       // 3437\n                    // apply wildcard metas                                                                            // 3438\n                    var bestDepth = 0;                                                                                 // 3439\n                    var wildcardIndex;                                                                                 // 3440\n                    for (var module in meta) {                                                                         // 3441\n                        wildcardIndex = indexOf.call(module, '*');                                                     // 3442\n                        if (wildcardIndex === -1)                                                                      // 3443\n                            continue;                                                                                  // 3444\n                        if (module.substr(0, wildcardIndex) === name.substr(0, wildcardIndex)                          // 3445\n                            && module.substr(wildcardIndex + 1) === name.substr(name.length - module.length + wildcardIndex + 1)) {\n                            var depth = module.split('/').length;                                                      // 3447\n                            if (depth > bestDepth)                                                                     // 3448\n                                bestDetph = depth;                                                                     // 3449\n                            extend(load.metadata, meta[module], bestDepth != depth);                                   // 3450\n                        }                                                                                              // 3451\n                    }                                                                                                  // 3452\n                                                                                                                       // 3453\n                    // apply exact meta                                                                                // 3454\n                    if (meta[name])                                                                                    // 3455\n                        extend(load.metadata, meta[name]);                                                             // 3456\n                                                                                                                       // 3457\n                    return locate.call(this, load);                                                                    // 3458\n                };                                                                                                     // 3459\n            });                                                                                                        // 3460\n                                                                                                                       // 3461\n            // detect any meta header syntax                                                                           // 3462\n            // only set if not already set                                                                             // 3463\n            var metaRegEx = /^(\\s*\\/\\*.*\\*\\/|\\s*\\/\\/[^\\n]*|\\s*\"[^\"]+\"\\s*;?|\\s*'[^']+'\\s*;?)+/;                         // 3464\n            var metaPartRegEx = /\\/\\*.*\\*\\/|\\/\\/[^\\n]*|\"[^\"]+\"\\s*;?|'[^']+'\\s*;?/g;                                    // 3465\n                                                                                                                       // 3466\n            function setMetaProperty(target, p, value) {                                                               // 3467\n                var pParts = p.split('.');                                                                             // 3468\n                var curPart;                                                                                           // 3469\n                while (pParts.length > 1) {                                                                            // 3470\n                    curPart = pParts.shift();                                                                          // 3471\n                    target = target[curPart] = target[curPart] || {};                                                  // 3472\n                }                                                                                                      // 3473\n                curPart = pParts.shift();                                                                              // 3474\n                if (!(curPart in target))                                                                              // 3475\n                    target[curPart] = value;                                                                           // 3476\n            }                                                                                                          // 3477\n                                                                                                                       // 3478\n            hook('translate', function(translate) {                                                                    // 3479\n                return function(load) {                                                                                // 3480\n                    // NB meta will be post-translate pending transpiler conversion to plugins                         // 3481\n                    var meta = load.source.match(metaRegEx);                                                           // 3482\n                    if (meta) {                                                                                        // 3483\n                        var metaParts = meta[0].match(metaPartRegEx);                                                  // 3484\n                                                                                                                       // 3485\n                        for (var i = 0; i < metaParts.length; i++) {                                                   // 3486\n                            var curPart = metaParts[i];                                                                // 3487\n                            var len = curPart.length;                                                                  // 3488\n                                                                                                                       // 3489\n                            var firstChar = curPart.substr(0, 1);                                                      // 3490\n                            if (curPart.substr(len - 1, 1) == ';')                                                     // 3491\n                                len--;                                                                                 // 3492\n                                                                                                                       // 3493\n                            if (firstChar != '\"' && firstChar != \"'\")                                                  // 3494\n                                continue;                                                                              // 3495\n                                                                                                                       // 3496\n                            var metaString = curPart.substr(1, curPart.length - 3);                                    // 3497\n                            var metaName = metaString.substr(0, metaString.indexOf(' '));                              // 3498\n                                                                                                                       // 3499\n                            if (metaName) {                                                                            // 3500\n                                var metaValue = metaString.substr(metaName.length + 1, metaString.length - metaName.length - 1);\n                                                                                                                       // 3502\n                                if (metaName.substr(metaName.length - 2, 2) == '[]') {                                 // 3503\n                                    metaName = metaName.substr(0, metaName.length - 2);                                // 3504\n                                    load.metadata[metaName] = load.metadata[metaName] || [];                           // 3505\n                                }                                                                                      // 3506\n                                                                                                                       // 3507\n                                // temporary backwards compat for previous \"deps\" syntax                               // 3508\n                                if (load.metadata[metaName] instanceof Array)                                          // 3509\n                                    load.metadata[metaName].push(metaValue);                                           // 3510\n                                else                                                                                   // 3511\n                                    setMetaProperty(load.metadata, metaName, metaValue);                               // 3512\n                            }                                                                                          // 3513\n                        }                                                                                              // 3514\n                    }                                                                                                  // 3515\n                                                                                                                       // 3516\n                    return translate.call(this, load);                                                                 // 3517\n                };                                                                                                     // 3518\n            });                                                                                                        // 3519\n        })();/*                                                                                                        // 3520\n         System bundles                                                                                                // 3521\n                                                                                                                       // 3522\n         Allows a bundle module to be specified which will be dynamically                                              // 3523\n         loaded before trying to load a given module.                                                                  // 3524\n                                                                                                                       // 3525\n         For example:                                                                                                  // 3526\n         System.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']                                             // 3527\n                                                                                                                       // 3528\n         Will result in a load to \"mybundle\" whenever a load to \"jquery\"                                               // 3529\n         or \"bootstrap/js/bootstrap\" is made.                                                                          // 3530\n                                                                                                                       // 3531\n         In this way, the bundle becomes the request that provides the module                                          // 3532\n         */                                                                                                            // 3533\n                                                                                                                       // 3534\n        (function() {                                                                                                  // 3535\n            // bundles support (just like RequireJS)                                                                   // 3536\n            // bundle name is module name of bundle itself                                                             // 3537\n            // bundle is array of modules defined by the bundle                                                        // 3538\n            // when a module in the bundle is requested, the bundle is loaded instead                                  // 3539\n            // of the form System.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']                           // 3540\n            hookConstructor(function(constructor) {                                                                    // 3541\n                return function() {                                                                                    // 3542\n                    constructor.call(this);                                                                            // 3543\n                    this.bundles = {};                                                                                 // 3544\n                    this.loadedBundles_ = {};                                                                          // 3545\n                };                                                                                                     // 3546\n            });                                                                                                        // 3547\n                                                                                                                       // 3548\n            function loadFromBundle(loader, bundle) {                                                                  // 3549\n                return Promise.resolve(loader.normalize(bundle))                                                       // 3550\n                    .then(function(normalized) {                                                                       // 3551\n                        loader.loadedBundles_[normalized] = true;                                                      // 3552\n                        loader.bundles[normalized] = loader.bundles[normalized] || loader.bundles[bundle];             // 3553\n                        return loader.load(normalized);                                                                // 3554\n                    })                                                                                                 // 3555\n                    .then(function() {                                                                                 // 3556\n                        return '';                                                                                     // 3557\n                    });                                                                                                // 3558\n            }                                                                                                          // 3559\n                                                                                                                       // 3560\n            // assign bundle metadata for bundle loads                                                                 // 3561\n            hook('locate', function(locate) {                                                                          // 3562\n                return function(load) {                                                                                // 3563\n                    if (load.name in this.loadedBundles_ || load.name in this.bundles)                                 // 3564\n                        load.metadata.bundle = true;                                                                   // 3565\n                                                                                                                       // 3566\n                    return locate.call(this, load);                                                                    // 3567\n                };                                                                                                     // 3568\n            });                                                                                                        // 3569\n                                                                                                                       // 3570\n            hook('fetch', function(fetch) {                                                                            // 3571\n                return function(load) {                                                                                // 3572\n                    var loader = this;                                                                                 // 3573\n                    if (loader.trace)                                                                                  // 3574\n                        return fetch.call(loader, load);                                                               // 3575\n                                                                                                                       // 3576\n                    // if already defined, no need to load a bundle                                                    // 3577\n                    if (load.name in loader.defined)                                                                   // 3578\n                        return '';                                                                                     // 3579\n                                                                                                                       // 3580\n                    // check if it is in an already-loaded bundle                                                      // 3581\n                    for (var b in loader.loadedBundles_) {                                                             // 3582\n                        if (indexOf.call(loader.bundles[b], load.name) != -1)                                          // 3583\n                            return loadFromBundle(loader, b);                                                          // 3584\n                    }                                                                                                  // 3585\n                                                                                                                       // 3586\n                    // check if it is a new bundle                                                                     // 3587\n                    for (var b in loader.bundles) {                                                                    // 3588\n                        if (indexOf.call(loader.bundles[b], load.name) != -1)                                          // 3589\n                            return loadFromBundle(loader, b);                                                          // 3590\n                    }                                                                                                  // 3591\n                                                                                                                       // 3592\n                    return fetch.call(loader, load);                                                                   // 3593\n                };                                                                                                     // 3594\n            });                                                                                                        // 3595\n        })();                                                                                                          // 3596\n        /*                                                                                                             // 3597\n         * Dependency Tree Cache                                                                                       // 3598\n         *                                                                                                             // 3599\n         * Allows a build to pre-populate a dependency trace tree on the loader of                                     // 3600\n         * the expected dependency tree, to be loaded upfront when requesting the                                      // 3601\n         * module, avoinding the n round trips latency of module loading, where                                        // 3602\n         * n is the dependency tree depth.                                                                             // 3603\n         *                                                                                                             // 3604\n         * eg:                                                                                                         // 3605\n         * System.depCache = {                                                                                         // 3606\n         *  'app': ['normalized', 'deps'],                                                                             // 3607\n         *  'normalized': ['another'],                                                                                 // 3608\n         *  'deps': ['tree']                                                                                           // 3609\n         * };                                                                                                          // 3610\n         *                                                                                                             // 3611\n         * System.import('app')                                                                                        // 3612\n         * // simultaneously starts loading all of:                                                                    // 3613\n         * // 'normalized', 'deps', 'another', 'tree'                                                                  // 3614\n         * // before \"app\" source is even loaded                                                                       // 3615\n         */                                                                                                            // 3616\n                                                                                                                       // 3617\n        (function() {                                                                                                  // 3618\n            hookConstructor(function(constructor) {                                                                    // 3619\n                return function() {                                                                                    // 3620\n                    constructor.call(this);                                                                            // 3621\n                    this.depCache = {};                                                                                // 3622\n                }                                                                                                      // 3623\n            });                                                                                                        // 3624\n                                                                                                                       // 3625\n            hook('locate', function(locate) {                                                                          // 3626\n                return function(load) {                                                                                // 3627\n                    var loader = this;                                                                                 // 3628\n                    // load direct deps, in turn will pick up their trace trees                                        // 3629\n                    var deps = loader.depCache[load.name];                                                             // 3630\n                    if (deps)                                                                                          // 3631\n                        for (var i = 0; i < deps.length; i++)                                                          // 3632\n                            loader['import'](deps[i]);                                                                 // 3633\n                                                                                                                       // 3634\n                    return locate.call(loader, load);                                                                  // 3635\n                };                                                                                                     // 3636\n            });                                                                                                        // 3637\n        })();                                                                                                          // 3638\n                                                                                                                       // 3639\n        /*                                                                                                             // 3640\n         * Conditions Extension                                                                                        // 3641\n         *                                                                                                             // 3642\n         *   Allows a condition module to alter the resolution of an import via syntax:                                // 3643\n         *                                                                                                             // 3644\n         *     import $ from 'jquery/#{browser}';                                                                      // 3645\n         *                                                                                                             // 3646\n         *   Will first load the module 'browser' via `System.import('browser')` and                                   // 3647\n         *   take the default export of that module.                                                                   // 3648\n         *   If the default export is not a string, an error is thrown.                                                // 3649\n         *                                                                                                             // 3650\n         *   We then substitute the string into the require to get the conditional resolution                          // 3651\n         *   enabling environment-specific variations like:                                                            // 3652\n         *                                                                                                             // 3653\n         *     import $ from 'jquery/ie'                                                                               // 3654\n         *     import $ from 'jquery/firefox'                                                                          // 3655\n         *     import $ from 'jquery/chrome'                                                                           // 3656\n         *     import $ from 'jquery/safari'                                                                           // 3657\n         *                                                                                                             // 3658\n         *   It can be useful for a condition module to define multiple conditions.                                    // 3659\n         *   This can be done via the `.` modifier to specify a member expression:                                     // 3660\n         *                                                                                                             // 3661\n         *     import 'jquery/#{browser.grade}'                                                                        // 3662\n         *                                                                                                             // 3663\n         *   Where the `grade` export of the `browser` module is taken for substitution.                               // 3664\n         *                                                                                                             // 3665\n         *   Note that `/` and a leading `.` are not permitted within conditional modules                              // 3666\n         *   so that this syntax can be well-defined.                                                                  // 3667\n         *                                                                                                             // 3668\n         *                                                                                                             // 3669\n         * Boolean Conditionals                                                                                        // 3670\n         *                                                                                                             // 3671\n         *   For polyfill modules, that are used as imports but have no module value,                                  // 3672\n         *   a binary conditional allows a module not to be loaded at all if not needed:                               // 3673\n         *                                                                                                             // 3674\n         *     import 'es5-shim#?conditions.needs-es5shim'                                                             // 3675\n         *                                                                                                             // 3676\n         */                                                                                                            // 3677\n        (function() {                                                                                                  // 3678\n                                                                                                                       // 3679\n            var conditionalRegEx = /#\\{[^\\}]+\\}|#\\?.+$/;                                                               // 3680\n                                                                                                                       // 3681\n            hookConstructor(function(constructor) {                                                                    // 3682\n                return function() {                                                                                    // 3683\n                    constructor.call(this);                                                                            // 3684\n                                                                                                                       // 3685\n                    // standard environment module, starting small as backwards-compat matters!                        // 3686\n                    this.set('@system-env', this.newModule({                                                           // 3687\n                        browser: isBrowser                                                                             // 3688\n                    }));                                                                                               // 3689\n                };                                                                                                     // 3690\n            });                                                                                                        // 3691\n                                                                                                                       // 3692\n            hook('normalize', function(normalize) {                                                                    // 3693\n                return function(name, parentName, parentAddress) {                                                     // 3694\n                    var loader = this;                                                                                 // 3695\n                    var conditionalMatch = name.match(conditionalRegEx);                                               // 3696\n                    if (conditionalMatch) {                                                                            // 3697\n                        var substitution = conditionalMatch[0][1] != '?';                                              // 3698\n                                                                                                                       // 3699\n                        var conditionModule = substitution ? conditionalMatch[0].substr(2, conditionalMatch[0].length - 3) : conditionalMatch[0].substr(2);\n                                                                                                                       // 3701\n                        if (conditionModule[0] == '.' || conditionModule.indexOf('/') != -1)                           // 3702\n                            throw new TypeError('Invalid condition ' + conditionalMatch[0] + '\\n\\tCondition modules cannot contain . or / in the name.');\n                                                                                                                       // 3704\n                        var conditionExport = 'default';                                                               // 3705\n                        var conditionExportIndex = conditionModule.indexOf('.');                                       // 3706\n                        if (conditionExportIndex != -1) {                                                              // 3707\n                            conditionExport = conditionModule.substr(conditionExportIndex + 1);                        // 3708\n                            conditionModule = conditionModule.substr(0, conditionExportIndex);                         // 3709\n                        }                                                                                              // 3710\n                                                                                                                       // 3711\n                        var booleanNegation = !substitution && conditionModule[0] == '~';                              // 3712\n                        if (booleanNegation)                                                                           // 3713\n                            conditionModule = conditionModule.substr(1);                                               // 3714\n                                                                                                                       // 3715\n                        return loader['import'](conditionModule, parentName, parentAddress)                            // 3716\n                            .then(function(m) {                                                                        // 3717\n                                var conditionValue = readMemberExpression(conditionExport, m);                         // 3718\n                                                                                                                       // 3719\n                                if (substitution) {                                                                    // 3720\n                                    if (typeof conditionValue !== 'string')                                            // 3721\n                                        throw new TypeError('The condition value for ' + conditionalMatch[0] + ' doesn\\'t resolving to a string.');\n                                    name = name.replace(conditionalRegEx, conditionValue);                             // 3723\n                                }                                                                                      // 3724\n                                else {                                                                                 // 3725\n                                    if (typeof conditionValue !== 'boolean')                                           // 3726\n                                        throw new TypeError('The condition value for ' + conditionalMatch[0] + ' isn\\'t resolving to a boolean.');\n                                    if (booleanNegation)                                                               // 3728\n                                        conditionValue = !conditionValue;                                              // 3729\n                                    if (!conditionValue)                                                               // 3730\n                                        name = '@empty';                                                               // 3731\n                                    else                                                                               // 3732\n                                        name = name.replace(conditionalRegEx, '');                                     // 3733\n                                }                                                                                      // 3734\n                                return normalize.call(loader, name, parentName, parentAddress);                        // 3735\n                            });                                                                                        // 3736\n                    }                                                                                                  // 3737\n                                                                                                                       // 3738\n                    return Promise.resolve(normalize.call(loader, name, parentName, parentAddress));                   // 3739\n                };                                                                                                     // 3740\n            });                                                                                                        // 3741\n                                                                                                                       // 3742\n        })();System = new SystemJSLoader();                                                                            // 3743\n        System.constructor = SystemJSLoader;  // -- exporting --                                                       // 3744\n                                                                                                                       // 3745\n        if (typeof exports === 'object')                                                                               // 3746\n            module.exports = Loader;                                                                                   // 3747\n                                                                                                                       // 3748\n        __global.Reflect = __global.Reflect || {};                                                                     // 3749\n        __global.Reflect.Loader = __global.Reflect.Loader || Loader;                                                   // 3750\n        __global.Reflect.global = __global.Reflect.global || __global;                                                 // 3751\n        __global.LoaderPolyfill = Loader;                                                                              // 3752\n                                                                                                                       // 3753\n        if (!System) {                                                                                                 // 3754\n            System = new SystemLoader();                                                                               // 3755\n            System.constructor = SystemLoader;                                                                         // 3756\n        }                                                                                                              // 3757\n                                                                                                                       // 3758\n        if (typeof exports === 'object')                                                                               // 3759\n            module.exports = System;                                                                                   // 3760\n                                                                                                                       // 3761\n        __global.System = System;                                                                                      // 3762\n                                                                                                                       // 3763\n    })(typeof self != 'undefined' ? self : global);}                                                                   // 3764\n                                                                                                                       // 3765\n// auto-load Promise and URL polyfills if needed in the browser                                                        // 3766\n    try {                                                                                                              // 3767\n        var hasURL = typeof URLPolyfill != 'undefined' || new URL('test:///').protocol == 'test:';                     // 3768\n    }                                                                                                                  // 3769\n    catch(e) {}                                                                                                        // 3770\n                                                                                                                       // 3771\n    if (typeof Promise === 'undefined' || !hasURL) {                                                                   // 3772\n        // document.write                                                                                              // 3773\n        if (typeof document !== 'undefined') {                                                                         // 3774\n            var scripts = document.getElementsByTagName('script');                                                     // 3775\n            $__curScript = scripts[scripts.length - 1];                                                                // 3776\n            var curPath = $__curScript.src;                                                                            // 3777\n            var basePath = curPath.substr(0, curPath.lastIndexOf('/') + 1);                                            // 3778\n            window.systemJSBootstrap = bootstrap;                                                                      // 3779\n            document.write(                                                                                            // 3780\n                '<' + 'script type=\"text/javascript\" src=\"' + basePath + 'system-polyfills.js\">' + '<' + '/script>'    // 3781\n            );                                                                                                         // 3782\n        }                                                                                                              // 3783\n        // importScripts                                                                                               // 3784\n        else if (typeof importScripts !== 'undefined') {                                                               // 3785\n            var basePath = '';                                                                                         // 3786\n            try {                                                                                                      // 3787\n                throw new Error('_');                                                                                  // 3788\n            } catch (e) {                                                                                              // 3789\n                e.stack.replace(/(?:at|@).*(http.+):[\\d]+:[\\d]+/, function(m, url) {                                   // 3790\n                    basePath = url.replace(/\\/[^\\/]*$/, '/');                                                          // 3791\n                });                                                                                                    // 3792\n            }                                                                                                          // 3793\n            importScripts(basePath + 'system-polyfills.js');                                                           // 3794\n            bootstrap();                                                                                               // 3795\n        }                                                                                                              // 3796\n        else {                                                                                                         // 3797\n            bootstrap();                                                                                               // 3798\n        }                                                                                                              // 3799\n    }                                                                                                                  // 3800\n    else {                                                                                                             // 3801\n        bootstrap();                                                                                                   // 3802\n    }                                                                                                                  // 3803\n                                                                                                                       // 3804\n                                                                                                                       // 3805\n})();                                                                                                                  // 3806\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/universe:modules/system-config.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Backup original SystemJS methods                                                                                    // 1\nvar _System = {                                                                                                        // 2\n    normalize: System.normalize,                                                                                       // 3\n    normalizeSync: System.normalizeSync,                                                                               // 4\n    locate: System.locate,                                                                                             // 5\n    fetch: System.fetch,                                                                                               // 6\n    translate: System.translate,                                                                                       // 7\n    instantiate: System.instantiate                                                                                    // 8\n};                                                                                                                     // 9\n                                                                                                                       // 10\n// Make `register` the default module format                                                                           // 11\nSystem.config({                                                                                                        // 12\n    meta: {                                                                                                            // 13\n        '*': {                                                                                                         // 14\n            format: 'register'                                                                                         // 15\n        }                                                                                                              // 16\n    }                                                                                                                  // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n// Regular expressions for Meteor package import syntax                                                                // 20\nvar appRegex = /^\\{}\\//;                                                                                               // 21\nvar packageRegex = /^{([\\w-]*?):?([\\w-]+)}/;                                                                           // 22\nvar packageRegexBC = /^([\\w-]+):([\\w-]+)/;                                                                             // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Convert Meteor package syntax to System.normalize friendly string.                                                  // 26\n * The `__author_package/foo` syntax in an internal implementation that is subject to change.                          // 27\n * You should never rely on it! Instead pass all your module names through System.normalizeSync                        // 28\n * @param {string} name - unnormalized module name with Meteor package syntax                                          // 29\n * @returns {string} - unnormalized module name without Meteor package syntax                                          // 30\n */                                                                                                                    // 31\nvar normalizeMeteorPackageName = function (name) {                                                                     // 32\n    name = name                                                                                                        // 33\n        .replace(appRegex, '') // {}/foo -> foo                                                                        // 34\n        .replace(packageRegex, '__$1_$2'); // {author:package}/foo -> __author_package/foo                             // 35\n                                                                                                                       // 36\n    if (packageRegexBC.test(name)) {                                                                                   // 37\n        // provide temporary backward compatibility for versions < 0.4 package syntax                                  // 38\n        console.warn([                                                                                                 // 39\n            '[Universe Modules]',                                                                                      // 40\n            'You are using deprecated syntax for importing modules from a package.',                                   // 41\n            'Instead of', name, 'you should use', name.replace(packageRegexBC, '{$1:$2}')                              // 42\n        ].join(' '));                                                                                                  // 43\n        return name.replace(packageRegexBC, '__$1_$2'); // author:package/foo -> __author_package/foo                  // 44\n    }                                                                                                                  // 45\n    return name;                                                                                                       // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\n/*                                                                                                                     // 49\n * name: the unnormalized module name                                                                                  // 50\n * parentName: the canonical module name for the requesting module                                                     // 51\n * parentAddress: the address of the requesting module                                                                 // 52\n */                                                                                                                    // 53\nSystem.normalize = function (name, parentName, parentAddress) {                                                        // 54\n                                                                                                                       // 55\n    // Allow foomodule.import syntax in import name (TypeScript support)                                               // 56\n    if (name.slice(-7) === '.import') {                                                                                // 57\n        name = name.slice(0, -7);                                                                                      // 58\n    }                                                                                                                  // 59\n                                                                                                                       // 60\n    // Load original normalize                                                                                         // 61\n    return _System.normalize.call(this, normalizeMeteorPackageName(name), parentName, parentAddress);                  // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\n/*                                                                                                                     // 65\n * name: the unnormalized module name                                                                                  // 66\n * parentName: the canonical module name for the requesting module                                                     // 67\n */                                                                                                                    // 68\nSystem.normalizeSync = function (name, parentName) {                                                                   // 69\n    return _System.normalizeSync.call(this, normalizeMeteorPackageName(name), parentName);                             // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\n/*                                                                                                                     // 73\n * load.name the canonical module name                                                                                 // 74\n * load.metadata a metadata object that can be used to store                                                           // 75\n *   derived metadata for reference in other hooks                                                                     // 76\n */                                                                                                                    // 77\n//System.locate = function (load) {                                                                                    // 78\n//    return _System.locate.call(this, load);                                                                          // 79\n//};                                                                                                                   // 80\n                                                                                                                       // 81\n/*                                                                                                                     // 82\n * load.name: the canonical module name                                                                                // 83\n * load.address: the URL returned from locate                                                                          // 84\n * load.metadata: the same metadata object by reference, which                                                         // 85\n *   can be modified                                                                                                   // 86\n */                                                                                                                    // 87\nSystem.fetch = function (load) {                                                                                       // 88\n    var promise = _System.fetch.call(this, load);                                                                      // 89\n                                                                                                                       // 90\n    if (!promise) {                                                                                                    // 91\n        // not really a promise                                                                                        // 92\n        return promise;                                                                                                // 93\n    }                                                                                                                  // 94\n                                                                                                                       // 95\n    // Add our warning                                                                                                 // 96\n    return promise.catch(function () {                                                                                 // 97\n        console.warn('[Universe Modules]: Module ' + load.name.replace(System.baseURL, '') + ' does not exist! You will probably see other errors in the console because of that.');\n                                                                                                                       // 99\n    });                                                                                                                // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\n/*                                                                                                                     // 103\n * load.name                                                                                                           // 104\n * load.address                                                                                                        // 105\n * load.metadata                                                                                                       // 106\n * load.source: the fetched source                                                                                     // 107\n */                                                                                                                    // 108\n//System.translate = function (load) {                                                                                 // 109\n//    return _System.translate.call(this, load);                                                                       // 110\n//};                                                                                                                   // 111\n                                                                                                                       // 112\n/*                                                                                                                     // 113\n * load identical to previous hooks, but load.source                                                                   // 114\n * is now the translated source                                                                                        // 115\n */                                                                                                                    // 116\n//System.instantiate = function (load) {                                                                               // 117\n//    return _System.instantiate.call(this, load);                                                                     // 118\n//};                                                                                                                   // 119\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/universe:modules/package-level-vars.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Following script, adds possibility of import of exported variables from packages                                    // 2\n * @example import {UniCollection, UniUsers} from '{vazco:universe-collection}!vars'                                   // 3\n * import {DDP} from '{ddp}!vars'                                                                                      // 4\n */                                                                                                                    // 5\nvar packageRegex = /^{((?:[\\w-]*?):?(?:[\\w-]+))}!vars$/;                                                               // 6\nvar _normalize = System.normalize;                                                                                     // 7\n                                                                                                                       // 8\nSystem.normalize = function (name) {                                                                                   // 9\n    var packageName;                                                                                                   // 10\n    if (packageRegex.test(name)) {                                                                                     // 11\n        packageName = name.replace(packageRegex, '$1');                                                                // 12\n        if (Package[packageName]) {                                                                                    // 13\n            //Getting access for exported variables by meteor package                                                  // 14\n            System.registerDynamic(name, [], true, function (require, exports, module) {                               // 15\n                module.exports = Package[packageName];                                                                 // 16\n            });                                                                                                        // 17\n        }                                                                                                              // 18\n    }                                                                                                                  // 19\n    return _normalize.apply(this, arguments);                                                                          // 20\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}