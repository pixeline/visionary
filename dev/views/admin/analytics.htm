<h1>Analytics</h1>


<h2>Questions</h2>

<h3>Diagnostique</h3>
<ul>
    <li>Nombre de testes protanope : {{ @protan_count }}</li>
    <li>Nombre de testes deuteranope : {{ @deutan_count }}</li>
    <li>Nombre de testes tritanope : {{ @tritan_count }}</li>
    <li>Nombre de testes réussi : {{ @succeed_count }}</li>
</ul>

<h3>Données</h3>
<ul>
    <li>Nombre total de testes effectués : {{ @tests_count }}</li>
    <li>Nombre d'utilisateurs ayant effectué le test : {{ @distinct_users_count }}</li>
    <li>Nombre de testes ayant été fini : {{ @finished_count }}</li>
    <li>Nombre de testes ayant été abandoné : {{ @tests_count - @finished_count }} </li>
    <li>Nombre de testes ayant été sure de la réponse : {{ @is_sure_count }}</li>
</ul>

<h3>Temps</h3>
<ul>
    <li>Temps minimum pour réaliser le teste : {{ @min_time }} </li>
    <li>Temps maximum pour réaliser le teste : {{ @max_time }}</li>
</ul>

<h3>Taux</h3>
<ul>
    <li>Taux de testes ayant été fini : {{ round((100/@tests_count) * @finished_count, 2) . " / 100%" }} </li>
    <li>Taux d'abandon : {{ round((100/@tests_count) * (@tests_count - $finished_count), 2) . " / 100%" }} </li>

    <li>[work in progress] : Est-ce qu'il y a une pattern d'ordre des tiles par type de daltonisme ?</li>
    <li>[work in progress] : Est-ce qu'il y a une pattern d'ordre des tiles par degré de daltonisme ?</li>
</ul>

<h3>Combien de fois par personne ?</h3>
<ul>
    <repeat group="{{ @distinct_users_trials }}" value="{{ @user }}" counter="{{ @key }}">
        <li>{{ @user["username"] }}, {{ @user["test_count"] }}</li>
    </repeat>
</ul>


<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg" version="1.1">
    <defs>
        <pattern id="Dot" x="0" y="0" width="100" height="100">
          <rect x="0" y="0" width="50" height="50" fill="skyblue"/>
        </pattern>

        <pattern id="Lines" x="0" y="0" width="0.1" height="0.1">
          <line x1="0" y1="0" x2="100" y2="100" stroke="green" stroke-width="1" />
        </pattern>
  </defs>
</svg>

<div class="charts-container">

</div>


<script src="assets/js/d3.min.js"></script>
<script>


var tests_total_count = parseInt("{{ @tests_count }}");
var distinct_users_count = parseInt("{{ @distinct_users_count }}");

var protan_count = parseInt("{{ @protan_count }}");
var deutan_count = parseInt("{{ @deutan_count }}");
var tritan_count = parseInt("{{ @tritan_count }}");
var succeed_count = parseInt("{{ @succeed_count }}");

var finished_count = parseInt("{{ @finished_count }}");
var abandon_count = parseInt("{{ @tests_count - @finished_count }}");

var finished_ratio = parseFloat("{{ (100/@tests_count) * @finished_count }}");
var abandon_ratio = parseFloat("{{ (100/@tests_count) * (@tests_count - $finished_count) }}");
var min_time = "{{ @min_time }}";
var max_time = "{{ @max_time }}";
var is_sure_count =  parseInt(" {{ @is_sure_count }} ");

//console.log( d3 )

var chart = function (dataSet, question) {
    var width = 320, //960,
        height = 320, //500,
        radius = Math.min(width, height) / 2;

    var pie = d3.pie()
        .value(function(d) { return d.count; })
        .sort(null);

    var arc = d3.arc()
        .innerRadius(radius - 100)
        .outerRadius(radius - 20);

    var svg = d3.select(".charts-container").append("svg")
        .attr("width", width)
        .attr("height", height)
      .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var g = svg.datum(dataSet).selectAll(".arc")
      .data(pie)
    .enter().append("g")
      .attr("class", "arc");

    g.append("path")
          //.attr("fill", "url(#Lines)")
          .attr("fill", function(d, i) { return d3.schemeCategory10[i]; })
          .attr("d", arc)

    g.append("text")
      .attr("transform", function(d) {
         return "translate(" + arc.centroid(d) +")"; 
      })
      .text(function(d) { return d.data.type; });
}

var daltonism = [
    { "type" : "normal", "count" : succeed_count },
    { "type" : "protan", "count" : protan_count },
    { "type" : "deutan", "count" : deutan_count },
    { "type" : "tritan", "count" : tritan_count }
]

var tests_counting = [
    { "type" : "Total", "count" : tests_total_count },
    { "type" : "Distinct", "count" : distinct_users_count }
]

var abandon = [
    { "type" : "finished", "count" : finished_count },
    { "type" : "abandoned", "count" : abandon_count }
]

var conviction = [
    { "type" : "sure", "count" : is_sure_count },
    { "type" : "not sure", "count" : tests_total_count-is_sure_count }
]

// protan sure ?
// deutan sure ?
// tritan sure ?
// normal sure ?

chart(daltonism);
chart(tests_counting);
chart(abandon);
chart(conviction);

</script>