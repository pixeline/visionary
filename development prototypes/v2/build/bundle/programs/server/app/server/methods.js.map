{"version":3,"sources":["meteor://ðŸ’»app/server/methods.js"],"names":[],"mappings":"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","file":"/server/methods.js","sourcesContent":["  /********************************************************************\\\n  |  Data-access and process in MongoDB (pattern Method-call and DAO)  |\n  \\********************************************************************/\n\n\n/* Insert, Update, Delete in mongoDB */\nMeteor.methods({\n  \n    /*******************\n    * PROFILER SYSTEM *\n    *******************/\n \n\t/* Insert Data of User and his Correction Profiles */ \n\t'insertUserAndProfiles': function(User, correctionProfilesPicture, surveyName, correctionProfilesResult){ \n\t\t\n        //Check server-side\n\t\tcheck(User, {\n            name : String,\n            firstname: String, \n            email: String, \n            age: Number,\n            sex: Boolean, //true if Male, false if Female\n            date_created: Number //millisecond since 1970\n\t\t});\n        \n        //check unique email\n        var usr = user.findOne( { \"email\": User.email }, { fields: { \"email\": 1 } } );\n        if(usr) {\n            throw new Meteor.Error(\"Unauthorized\", \"Email dÃ©jÃ  existant\");\n        }\n        \n        var survey_id = survey.find().fetch()[0]._id;\n        //add the survey foreign key\n        User = _.extend(User, {\n                survey_id: survey_id\n        });\n        \n        //Insert User Data and return user_id, useful for foreign keys\n        user_id = user.insert(User);\n        \n        //Insert each correction_profile of user and the picture in relation\n        correctionProfilesResult.forEach(function (result) {\n            var filters_result = result.filter;\n            delete result.filter;\n            check(result, {\n                type : String\n            });\n            //add the user foreign key\n            result = _.extend(result, {\n                    user_id: user_id\n            });\n            //Insert correction_profile_picture Data and return id\n            var correc_result_id = correction_profile_result.insert(result);\n            \n            //insert each filter of correction_profile_picture\n            filters_result.forEach(function (filter_result) {\n                    check(filter_result, {\n                        parameter : String,\n                        value: Number\n                    });\n                    //extend the collection to add foreign key\n                    filter_result = _.extend(filter_result, {\n                        correction_profile_result_id: correc_result_id\n                    });\n                    //Insert each filter\n                    filter.insert(filter_result);\n            });\n        });\n        \n        \n        //insert each correction_profile of user and the picture in relation\n        correctionProfilesPicture.forEach(function (correc) {\n            //if the user have seen the picture\n            if(correc.picture.length != 0 && typeof correc.filter_type != \"undefined\" ) {\n                var picture_correc = correc.picture;\n                var filters_correc = correc.filter;\n                delete correc.picture;\n                delete correc.filter;\n                check(correc, {\n                    filter_type : String,\n                    reset_counter : Number\n                });\n                //add the user foreign key\n                correc = _.extend(correc, {\n                    user_id: user_id\n                });\n                //Insert correction_profile_picture Data and return id\n                var correc_id = correction_profile_picture.insert(correc);\n                \n                delete picture_correc.instruction;\n                check(picture_correc, {\n                    order : Number,\n                    title : String,\n                    type : String,\n                    file_name : String\n                });\n                //add the correc foreign key\n                picture_correc = _.extend(picture_correc, {\n                    correction_profile_picture_id: correc_id\n                });\n                picture.insert(picture_correc);\n                \n                //if there were a correction on the picture\n                if(correc.filter_type != \"undefined\") {\n                    //insert each filter of correction_profile_picture\n                    filters_correc.forEach(function (filter_correc) {\n                        //if it's the filter chosen lastly\n                        if(typeof filter_correc.value != \"undefined\" && (filter_correc.parameter == correc.filter_type || \n                            (filter_correc.parameter == \"hue\" && correc.filter_type == \"saturation\") ||\n                            (filter_correc.parameter.split(\"_\")[1] == correc.filter_type.split(\"_\")[1]))) {\n                                check(filter_correc, {\n                                    parameter : String,\n                                    value: Number\n                                });\n                                //extend the collection to add foreign key\n                                filter_correc = _.extend(filter_correc, {\n                                    correction_profile_picture_id: correc_id\n                                });\n                                //Insert each filter\n                                filter.insert(filter_correc);\n                        }\n                    });\n                }\n            }\n        }); \n        \n        return user_id;\n        \n\t},\n    \n    /* Remove User and every collections associated */  \n    'removeUser': function(userId){ \n        check(userId, String);\n        \n        var results = correction_profile_result.find({user_id:userId}, {fields: {_id: 1}});          \n        //Call to remove each correc profile result associated\n        results.forEach(function (result) {\n            Meteor.call('removeCorrecResult', result._id);\n        }); \n        \n        var picCorrecProfiles = correction_profile_picture.find({user_id:userId}, {fields: {_id: 1}});\n        //Call to remove each correc profile picture associated\n        picCorrecProfiles.forEach(function (correcProfile) {\n            Meteor.call('removeCorrecPicture', correcProfile._id);\n        }); \n            \n        //remove user\n        user.remove({_id: userId});\n    },\n    \n    /* Remove the correction profile result and every collections associated */  \n    'removeCorrecResult': function(resultId){ \n        check(resultId, String);\n        \n        var filters = filter.find({correction_profile_result_id:resultId}, {fields: {_id: 1}});          \n        //Call to remove each filters associated\n        filters.forEach(function (filter) {\n            Meteor.call('removeFilter', filter._id);\n        }); \n            \n        correction_profile_result.remove({_id: resultId});\n    },\n    \n    /* Remove the correction profile picture and every collections associated */  \n    'removeCorrecPicture': function(correcProfileId){ \n        check(correcProfileId, String);\n        \n        var filters = filter.find({correction_profile_picture_id:correcProfileId}, {fields: {_id: 1}});          \n        //Call to remove each filter associated\n        filters.forEach(function (filter) {\n            Meteor.call('removeFilter', filter._id);\n        }); \n        var pictures = picture.find({correction_profile_picture_id:correcProfileId}, {fields: {_id: 1}});          \n        //Call to remove each picture associated\n        pictures.forEach(function (picture) {\n            Meteor.call('removePicture', picture._id);\n        }); \n            \n        correction_profile_picture.remove({_id: correcProfileId});\n    },\n    \n    /* Remove the picture */  \n    'removePicture': function(pictureId){ \n        check(pictureId, String);\n        picture.remove({_id: pictureId});\n    },\n    \n    /* Remove the filter */  \n    'removeFilter': function(filterId){ \n        check(filterId, String);\n        filter.remove({_id: filterId});\n    },\n    \n    \n    /***************\n    * ADMIN PANEL *\n    ***************/\n    \n    /* Insert Survey */ \n    'insertSurvey': function(surveyObj) { \n        //Check server-side\n        check(surveyObj, {\n              name : String,\n              root_url : String,\n              max_reset_counter : Number,\n              max_satis : Number,\n              state : Boolean,      //activated (online) or not\n              date_created: Number, //millisecond since 1970\n              module_survey : Array,\n              picture_admin : Array\n        });\n        //Insert survey data's in MongoDB and return id (+ verification of admin)\n        if(isAdmin()){\n            return survey.insert(surveyObj);\n        }\n    },\n    \n    /* Update Survey's state ; active or disable */ \n    'updateStateSurvey': function(surveyId, stateToPut) { \n        check(surveyId, String);\n        check(stateToPut, Boolean);\n        // Set the state of survey to true\n        survey.update(surveyId, {\n            $set: {state: stateToPut}\n        });\n    },\n    \n    /* Remove Survey and every collections associated */  \n    'removeSurvey': function(surveyId){ \n        check(surveyId, String);\n        //Remove survey data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            var modules = module_survey.find({survey_id:surveyId}, {fields: {_id: 1}});          \n            //Call to remove each modules associated\n            modules.forEach(function (moduleSurvey) {\n                Meteor.call('removeModuleSurvey', moduleSurvey._id);\n            }); \n            \n            var pictures = picture_admin.find({survey_id:surveyId}, {fields: {_id: 1}});\n            //Call to remove each pictures associated\n            pictures.forEach(function (pictureAdmin) {\n                Meteor.call('removePictureAdmin', pictureAdmin._id);\n            }); \n            \n            //remove survey\n            survey.remove({_id: surveyId});\n        }\n    },\n    \n    /* Insert ModuleSurvey of survey surveyId*/ \n    'insertModuleSurvey': function(moduleSurveyObj, surveyId) { \n        //Check server-side\n        check(moduleSurveyObj, {\n              order : Number,\n              title : String,\n              instruction : Array,\n              info_txt : Array,\n              filter_admin : Array,\n              sorted_color_admin : Array,\n              field_form : Array\n        });\n        \n        //extend the collection to join with survey associated\n        moduleSurveyObj = _.extend(moduleSurveyObj, {\n            survey_id: surveyId\n        });\n        \n        //Insert module data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            return module_survey.insert(moduleSurveyObj);\n        }   \n    },\n    \n    /* Remove Module Survey and collections associated */  \n    'removeModuleSurvey': function(moduleId){ \n        check(moduleId, String);\n        //Remove module_survey data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            var instructions = instruction.find({module_survey_id:moduleId}, {fields: {_id: 1}});\n            //Call to remove each instructions associated\n            instructions.forEach(function (instr) {\n                Meteor.call('removeInstruction', instr._id);\n            });\n            \n            var infoTxts = info_txt.find({module_survey_id:moduleId}, {fields: {_id: 1}});\n            //Call to remove each infoTxts associated\n            infoTxts.forEach(function (infoTxt) {\n                Meteor.call('removeInfoTxt', infoTxt._id);\n            });\n            \n            var colors = sorted_color_admin.find({module_survey_id:moduleId}, {fields: {_id: 1}});\n            //Call to remove each colors associated\n            colors.forEach(function (color) {\n                Meteor.call('removeSortedColorAdmin', color._id);\n            });\n            \n            var filters = filter_admin.find({module_survey_id:moduleId}, {fields: {_id: 1}});\n            //Call to remove each filters associated\n            filters.forEach(function (filter) {\n                Meteor.call('removeFilterAdmin', filter._id);\n            });\n            \n            var fields = field_form.find({module_survey_id:moduleId}, {fields: {_id: 1}});\n            //Call to remove each fields associated\n            fields.forEach(function (field) {\n                Meteor.call('removeFieldForm', field._id);\n            });\n            \n            module_survey.remove({_id: moduleId});\n        }\n    },\n    \n    /* Insert PictureAdmin of survey surveyId */ \n    'insertPictureAdmin': function(pictureAdmin, surveyId) { \n        //Check server-side\n        check(pictureAdmin, {\n              order : Number,\n              title : String,\n              type : String,\n              file_name : String,\n              instruction : Array\n        });\n        \n        //extend the collection to join with survey associated\n        pictureAdmin = _.extend(pictureAdmin, {\n            survey_id: surveyId\n        });\n        \n        //Insert picture data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            return picture_admin.insert(pictureAdmin);\n        } \n    },\n    \n    /* Remove Picture Admin and collections associated */  \n    'removePictureAdmin': function(pictureId){ \n        check(pictureId, String);\n        //Remove picture_admin data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            var instructions = instruction.find({picture_id:pictureId}, {fields: {_id: 1}});\n            //Call to remove each instructions associated\n            instructions.forEach(function (instr) {\n                Meteor.call('removeInstruction', instr._id);\n            });\n            picture_admin.remove({_id: pictureId});\n        }\n    },\n    \n    /* Insert Instruction of picture pictureId and module moduleId */ \n    'insertInstruction': function(Instruction, pictureId, moduleId) { \n        //Check server-side\n        check(Instruction, {\n              txt : String,\n              module_order : Match.Optional(Number),\n              picture_order : Match.Optional(Number)\n        });\n        \n        //extend the collection to join with picture and module associated\n        Instruction = _.extend(Instruction, {\n            picture_admin_id: pictureId,\n            module_survey_id: moduleId\n        });\n        \n        //Insert instruction data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            return instruction.insert(Instruction);\n        }  \n    },\n    \n    /* Remove Instruction */  \n    'removeInstruction': function(instrId){ \n        check(instrId, String);\n        //Remove instruction data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            instruction.remove({_id: instrId});\n        }\n    },\n    \n    /* Insert InfoTxt of module moduleId */ \n    'insertInfoTxt': function(infoTxtObj, moduleId) { \n        //Check server-side\n        check(infoTxtObj, {\n              title : String,\n              txt : String\n        });\n        \n        //extend the collection to join with module associated\n        infoTxtObj = _.extend(infoTxtObj, {\n            module_survey_id: moduleId\n        });\n        \n        //Insert info_txt data's in MongoDB (+ verification of admin)     \n        if(isAdmin()){\n            return info_txt.insert(infoTxtObj);\n        }\n    },\n    \n    /* Remove InfoTxt */  \n    'removeInfoTxt': function(infoTxtId){ \n        check(infoTxtId, String);\n        //Remove info_txt data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            info_txt.remove({_id: infoTxtId});\n        }\n    },\n    \n    /* Insert SortedColorAdmin of module moduleId */ \n    'insertSortedColorAdmin': function(SortedColorObj, moduleId) { \n        //Check server-side\n        check(SortedColorObj, {\n              order : Number,\n              color : String\n        });\n        \n        //extend the collection to join with module associated\n        SortedColorObj = _.extend(SortedColorObj, {\n            module_survey_id: moduleId\n        });\n        \n        //Insert sorted_color_admin data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            return sorted_color_admin.insert(SortedColorObj);\n        } \n    },\n    \n    /* Remove SortedColorAdmin */  \n    'removeSortedColorAdmin': function(sortedColorId){ \n        check(sortedColorId, String);\n        //Remove sorted_color_admin data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            sorted_color_admin.remove({_id: sortedColorId});\n        }\n    },\n    \n    /* Insert FilterAdmin of module moduleId */ \n    'insertFilterAdmin': function(filterObj, moduleId) { \n        //Check server-side\n        check(filterObj, {\n            order : Number,\n            parameter : String,\n            init_value : Number,\n            min : Number,\n            max : Number,\n            conversion : Number,\n            step : Number\n        });\n        \n        //extend the collection to join with module associated\n        filterObj = _.extend(filterObj, {\n            module_survey_id: moduleId\n        });\n        \n        //Insert filter_admin data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            return filter_admin.insert(filterObj);\n        }  \n    },\n    \n    /* Remove FilterAdmin */  \n    'removeFilterAdmin': function(filterId){ \n        check(filterId, String);\n        //Remove filer_admin data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            filter_admin.remove({_id: filterId});\n        }\n    },\n    \n    /* Insert FieldForm of module moduleId */ \n    'insertFieldForm': function(fieldObj, moduleId) { \n        //Check server-side\n        check(fieldObj, {\n            order : Number,\n            type : String,\n            label : [String],\n            name : String,\n            placeholder : String,\n            required : Boolean\n        });\n        \n        //extend the collection to join with module associated\n        fieldObj = _.extend(fieldObj, {\n            module_survey_id: moduleId\n        });\n        \n        //Insert filter_admin data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            return field_form.insert(fieldObj);\n        } \n    },\n    \n    /* Remove FieldForm */  \n    'removeFieldForm': function(fieldId){ \n        check(fieldId, String);\n        //Remove field_form data's in MongoDB (+ verification of admin)\n        if(isAdmin()){\n            field_form.remove({_id: fieldId});\n        }\n    },\n    \n    //know if user is admin or not\n    'isAdmin': function () {\n        return isAdmin();\n    }\n    \n});\n\n/* function of verification to be an Admin */\nfunction isAdmin () {\n    var currentUser = Meteor.user();\n    if(currentUser && currentUser.username === \"admin\"){\n        return true;\n    } else {\n        throw new Meteor.Error(\"Unauthorized\", \"Insertion non-autorisÃ©e\");\n    } \n}"]}