{"version":3,"sources":["meteor://ðŸ’»app/packages/cfs_filesystem/packages/cfs_filesystem.js"],"names":[],"mappingsyH","file":"/packages/cfs_filesystem.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/cfs:filesystem/filesystem.server.js                                                             //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nvar fs = Npm.require('fs');                                                                                 // 1\nvar path = Npm.require('path');                                                                             // 2\nvar mkdirp = Npm.require('mkdirp');                                                                         // 3\n//var chokidar = Npm.require('chokidar');                                                                   // 4\n                                                                                                            // 5\nFS.Store.FileSystem = function(name, options) {                                                             // 6\n  var self = this;                                                                                          // 7\n  if (!(self instanceof FS.Store.FileSystem))                                                               // 8\n    throw new Error('FS.Store.FileSystem missing keyword \"new\"');                                           // 9\n                                                                                                            // 10\n  // We allow options to be string/path empty or options.path                                               // 11\n  options = (options !== ''+options) ? options || {} : { path: options };                                   // 12\n                                                                                                            // 13\n  // Provide a default FS directory one level up from the build/bundle directory                            // 14\n  var pathname = options.path;                                                                              // 15\n  if (!pathname && __meteor_bootstrap__ && __meteor_bootstrap__.serverDir) {                                // 16\n    pathname = path.join(__meteor_bootstrap__.serverDir, '../../../cfs/files/' + name);                     // 17\n  }                                                                                                         // 18\n                                                                                                            // 19\n  if (!pathname)                                                                                            // 20\n    throw new Error('FS.Store.FileSystem unable to determine path');                                        // 21\n                                                                                                            // 22\n  // Check if we have '~/foo/bar'                                                                           // 23\n  if (pathname.split(path.sep)[0] === '~') {                                                                // 24\n    var homepath = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;                     // 25\n    if (homepath) {                                                                                         // 26\n      pathname = pathname.replace('~', homepath);                                                           // 27\n    } else {                                                                                                // 28\n      throw new Error('FS.Store.FileSystem unable to resolve \"~\" in path');                                 // 29\n    }                                                                                                       // 30\n  }                                                                                                         // 31\n                                                                                                            // 32\n  // Set absolute path                                                                                      // 33\n  var absolutePath = path.resolve(pathname);                                                                // 34\n                                                                                                            // 35\n  // Ensure the path exists                                                                                 // 36\n  mkdirp.sync(absolutePath);                                                                                // 37\n  FS.debug && console.log(name + ' FileSystem mounted on: ' + absolutePath);                                // 38\n                                                                                                            // 39\n  return new FS.StorageAdapter(name, options, {                                                             // 40\n    typeName: 'storage.filesystem',                                                                         // 41\n    fileKey: function(fileObj) {                                                                            // 42\n      // Lookup the copy                                                                                    // 43\n      var store = fileObj && fileObj._getInfo(name);                                                        // 44\n      // If the store and key is found return the key                                                       // 45\n      if (store && store.key) return store.key;                                                             // 46\n                                                                                                            // 47\n      var filename = fileObj.name();                                                                        // 48\n      var filenameInStore = fileObj.name({store: name});                                                    // 49\n                                                                                                            // 50\n      // If no store key found we resolve / generate a key                                                  // 51\n      return fileObj.collectionName + '-' + fileObj._id + '-' + (filenameInStore || filename);              // 52\n    },                                                                                                      // 53\n    createReadStream: function(fileKey, options) {                                                          // 54\n      // this is the Storage adapter scope                                                                  // 55\n      var filepath = path.join(absolutePath, fileKey);                                                      // 56\n                                                                                                            // 57\n      // return the read stream - Options allow { start, end }                                              // 58\n      return fs.createReadStream(filepath, options);                                                        // 59\n    },                                                                                                      // 60\n    createWriteStream: function(fileKey, options) {                                                         // 61\n      options = options || {};                                                                              // 62\n                                                                                                            // 63\n      // this is the Storage adapter scope                                                                  // 64\n      var filepath = path.join(absolutePath, fileKey);                                                      // 65\n                                                                                                            // 66\n      // Return the stream handle                                                                           // 67\n      var writeStream = fs.createWriteStream(filepath, options);                                            // 68\n                                                                                                            // 69\n      // The filesystem does not emit the \"end\" event only close - so we                                    // 70\n      // manually send the end event                                                                        // 71\n      writeStream.on('close', function() {                                                                  // 72\n        if (FS.debug) console.log('SA FileSystem - DONE!! fileKey: \"' + fileKey + '\"');                     // 73\n                                                                                                            // 74\n        // Get the exact size of the stored file, so that we can pass it to onEnd/onStored.                 // 75\n        // Since stream transforms might have altered the size, this is the best way to                     // 76\n        // ensure we update the fileObj.copies with the correct size.                                       // 77\n        try {                                                                                               // 78\n          // Get the stats of the file                                                                      // 79\n          var stats = fs.statSync(filepath);                                                                // 80\n                                                                                                            // 81\n          // Emit end and return the fileKey, size, and updated date                                        // 82\n          writeStream.emit('stored', {                                                                      // 83\n            fileKey: fileKey,                                                                               // 84\n            size: stats.size,                                                                               // 85\n            storedAt: stats.mtime                                                                           // 86\n          });                                                                                               // 87\n                                                                                                            // 88\n        } catch(err) {                                                                                      // 89\n          // On error we emit the error on                                                                  // 90\n          writeStream.emit('error', err);                                                                   // 91\n        }                                                                                                   // 92\n      });                                                                                                   // 93\n                                                                                                            // 94\n      return writeStream;                                                                                   // 95\n    },                                                                                                      // 96\n    remove: function(fileKey, callback) {                                                                   // 97\n      // this is the Storage adapter scope                                                                  // 98\n      var filepath = path.join(absolutePath, fileKey);                                                      // 99\n                                                                                                            // 100\n      // Call node unlink file                                                                              // 101\n      fs.unlink(filepath, function (error, result) {                                                        // 102\n        if (error && error.errno === 34) {                                                                  // 103\n          console.warn(\"SA FileSystem: Could not delete \" + filepath + \" because the file was not found.\"); // 104\n          callback && callback(null);                                                                       // 105\n        } else {                                                                                            // 106\n          callback && callback(error, result);                                                              // 107\n        }                                                                                                   // 108\n      });                                                                                                   // 109\n    },                                                                                                      // 110\n    stats: function(fileKey, callback) {                                                                    // 111\n      // this is the Storage adapter scope                                                                  // 112\n      var filepath = path.join(absolutePath, fileKey);                                                      // 113\n      if (typeof callback === 'function') {                                                                 // 114\n        fs.stat(filepath, callback);                                                                        // 115\n      } else {                                                                                              // 116\n        return fs.statSync(filepath);                                                                       // 117\n      }                                                                                                     // 118\n    }                                                                                                       // 119\n    // Add this back and add the chokidar dependency back when we make this work eventually                 // 120\n    // watch: function(callback) {                                                                          // 121\n    //   function fileKey(filePath) {                                                                       // 122\n    //     return filePath.replace(absolutePath, \"\");                                                       // 123\n    //   }                                                                                                  // 124\n                                                                                                            // 125\n    //   FS.debug && console.log('Watching ' + absolutePath);                                               // 126\n                                                                                                            // 127\n    //   // chokidar seems to be most widely used and production ready watcher                              // 128\n    //   var watcher = chokidar.watch(absolutePath, {ignored: /\\/\\./, ignoreInitial: true});                // 129\n    //   watcher.on('add', Meteor.bindEnvironment(function(filePath, stats) {                               // 130\n    //     callback(\"change\", fileKey(filePath), {                                                          // 131\n    //       name: path.basename(filePath),                                                                 // 132\n    //       type: null,                                                                                    // 133\n    //       size: stats.size,                                                                              // 134\n    //       utime: stats.mtime                                                                             // 135\n    //     });                                                                                              // 136\n    //   }, function(err) {                                                                                 // 137\n    //     throw err;                                                                                       // 138\n    //   }));                                                                                               // 139\n    //   watcher.on('change', Meteor.bindEnvironment(function(filePath, stats) {                            // 140\n    //     callback(\"change\", fileKey(filePath), {                                                          // 141\n    //       name: path.basename(filePath),                                                                 // 142\n    //       type: null,                                                                                    // 143\n    //       size: stats.size,                                                                              // 144\n    //       utime: stats.mtime                                                                             // 145\n    //     });                                                                                              // 146\n    //   }, function(err) {                                                                                 // 147\n    //     throw err;                                                                                       // 148\n    //   }));                                                                                               // 149\n    //   watcher.on('unlink', Meteor.bindEnvironment(function(filePath) {                                   // 150\n    //     callback(\"remove\", fileKey(filePath));                                                           // 151\n    //   }, function(err) {                                                                                 // 152\n    //     throw err;                                                                                       // 153\n    //   }));                                                                                               // 154\n    // }                                                                                                    // 155\n  });                                                                                                       // 156\n};                                                                                                          // 157\n                                                                                                            // 158\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}